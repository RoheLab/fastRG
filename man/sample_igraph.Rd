% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sample_igraph.R
\name{sample_igraph}
\alias{sample_igraph}
\alias{sample_igraph.undirected_factor_model}
\alias{sample_igraph.directed_factor_model}
\title{Sample a random dot product graph as an igraph graph}
\usage{
sample_igraph(factor_model, ..., poisson_edges = TRUE, allow_self_loops = TRUE)

\method{sample_igraph}{undirected_factor_model}(factor_model, ..., poisson_edges = TRUE, allow_self_loops = TRUE)

\method{sample_igraph}{directed_factor_model}(factor_model, ..., poisson_edges = TRUE, allow_self_loops = TRUE)
}
\arguments{
\item{factor_model}{A \code{\link[=directed_factor_model]{directed_factor_model()}},
\code{\link[=undirected_factor_model]{undirected_factor_model()}}, or one of the many subclasses.}

\item{...}{Ignored. Do not use.}

\item{poisson_edges}{Logical indicating whether or not
multiple edges are allowed to form between a pair of
nodes. Defaults to \code{TRUE}. When \code{FALSE}, sampling proceeds
as usual, and duplicate edges are removed afterwards.
See Section 2.3 of Rohe et al (2017) for additional
details.}

\item{allow_self_loops}{Logical indicating whether or not
nodes should be allowed to form edges with themselves.
Defaults to \code{TRUE}. When \code{FALSE}, sampling proceeds
as usual, and self-loops are removed afterwards.}
}
\value{
An \code{\link[igraph:igraph]{igraph::igraph()}} graph object.
}
\description{
There are two steps to using the \code{FastRG} package. First,
you must parameterize a random dot product graph by
specifying its expected adjacency matrix. Use functions such as
\code{\link[=dcsbm]{dcsbm()}}, \code{\link[=sbm]{sbm()}}, etc, to perform this specification.
Then, use \code{\link[=sample_matrix]{sample_matrix()}} to generate a random graph,
represented as an \code{\link[igraph:igraph]{igraph::igraph()}}, with that expectation.
}
\details{
This function implements the \code{fastRG} algorithm as
described in Rohe et al (2017). Please see the paper
(which is short and open access!!) for details.
}
\examples{

set.seed(27)

n <- 1000
k <- 5

X <- matrix(rpois(n = n * k, 1), nrow = n)
S <- matrix(runif(n = k * k, 0, .1), nrow = k)

ufm <- undirected_factor_model(
  X, S,
  expected_density = 0.1
)

ufm

### sampling graphs as edgelists ----------------------

edgelist <- sample_edgelist(ufm)
edgelist

### sampling graphs as sparse matrices ----------------

A <- sample_sparse(ufm)

inherits(A, "dsCMatrix")  # TRUE
class(A[2, 1])            # "numeric" -- i.e. A has double data type
isSymmetric(A)            # TRUE

B <- sample_sparse(ufm, poisson_edges = FALSE)

inherits(B, "dsCMatrix")  # TRUE
isSymmetric(A)            # TRUE

### sampling graphs as igraph graphs ------------------

sample_igraph(ufm)

### sampling graphs as tidygraph graphs ---------------

sample_tidygraph(ufm)

sample_tidygraph(ufm, poisson_edges = FALSE)

}
\references{
Rohe, Karl, Jun Tao, Xintian Han, and Norbert Binkiewicz. 2017.
"A Note on Quickly Sampling a Sparse Matrix with Low Rank Expectation."
Journal of Machine Learning Research; 19(77):1-13, 2018.
\url{http://www.jmlr.org/papers/v19/17-128.html}
}
\seealso{
Other samplers: 
\code{\link{sample_edgelist.matrix}()},
\code{\link{sample_edgelist}()},
\code{\link{sample_sparse}()},
\code{\link{sample_tidygraph}()}
}
\concept{samplers}
