% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dc_overlapping.R
\name{dc_overlapping}
\alias{dc_overlapping}
\alias{dc_overlapping_params}
\title{Sample a degree corrected overlapping stochastic blockmodel graph}
\usage{
dc_overlapping(
  theta,
  p,
  B,
  avg_deg = NULL,
  poisson_edges = TRUE,
  sort_nodes = FALSE,
  ...
)

dc_overlapping_params(
  theta,
  p,
  B,
  avg_deg = NULL,
  poisson_edges = TRUE,
  sort_nodes = FALSE
)
}
\arguments{
\item{theta}{A vector specified the degree distribution parameters.
The resulting graph will have \code{length(theta)} nodes. Setting
\code{theta = rep(1, n)} recovers a stochastic blockmodel without
degree correction.}

\item{p}{Community membership parameter. For each node, membership in
each community is consider separately. Each node has probability
\code{p[i]} of being in the \code{i^th} community. \code{length(p)} implicitly
specifies the number of communities.}

\item{B}{A \code{length(pi)} by \code{length(pi)} matrix of block connection
probabilities. \code{B[i, j]} contains the probability that a node in
community \code{i} links to a node in community \code{j}. Does not need to
be symmetric.}

\item{avg_deg}{When specified, rescales parameter such that the
expected degree is \code{avg_deg} in the Poisson multi-graph. When
\code{poisson_edges = FALSE}, the resulting graph will have lower a
average degree than \code{avg_deg} due to lack of multi-edges. When
the graph is sparse, the expected number of edges for the Poisson
multi-graph and Bernoulli graph are nearly the
same. Defaults to \code{NULL}, such that no scaling occurs.}

\item{poisson_edges}{Logical indicating whether or not multi-edges are
allowed. Defaults to \code{TRUE}, which keeps multi-edges and produces
a multi-graph. When \code{FALSE}, only single edges are allowed, resulting
in a graph. See \strong{details} for some additional comments. Effected by
\code{simple} argument.}

\item{sort_nodes}{Logical indicating whether or not to sort the nodes
so that they are grouped by block. This incurs the the cost of a
radix sort, which is linear in the number of nodes in the graph.
Defaults to \code{FALSE}. Useful for plotting.}

\item{...}{
  Arguments passed on to \code{\link[=fastRG]{fastRG}}
  \describe{
    \item{\code{X}}{An \code{n} by \code{k_1} matrix.}
    \item{\code{S}}{A \code{k_1} by \code{k_2} matrix.}
    \item{\code{Y}}{A \code{d} by \code{k_2} matrix. Defaults to \code{X}.}
    \item{\code{simple}}{When \code{TRUE}, indicates that you want to work with undirected
graphs where self-loops and multi-edges are prohibited. Accomplishes
this by setting \code{directed = FALSE}, \code{allow_self_loops = FALSE}, and
\code{poisson_edges = FALSE}, and then ignoring arguments \code{directed},
\code{allow_self_loops} and \code{poisson_edges}. Defaults to \code{FALSE}.}
    \item{\code{directed}}{Logical indicating whether or not the graph should be
directed. Default is \code{directed = TRUE}. When \code{directed = FALSE},
symmetrizes \code{S} internally. When \code{X = Y} (which is the default when
no \code{Y} is specified), this results in a symmetric adjacency matrix
as output. When \code{avg_deg} is specified and the desired graph is directed,
the average degree scaling is on the out-degree of each node (or the
row sums if you prefer to think in terms of the adjacency matrix).
Effected by the \code{simple} argument.}
    \item{\code{allow_self_loops}}{Logical indicating whether edges are allowed from
a node back to itself. Defaults to \code{TRUE}. When \code{FALSE}, sampling
proceeds normally, and then self-loops are removed after sampling
is completed. Effected by the \code{simple} argument.}
    \item{\code{return_edge_list}}{Logical indicating whether to return an edgelist
rather than an adjacency matrix. Defaults to \code{FALSE}.}
  }}
}
\value{
A random Poisson (or Bernoulli) dot product graph. By default,
returns a \code{\link[Matrix:sparseMatrix]{Matrix::sparseMatrix()}} in CSC format (i.e. of abstract
class \code{CsparseMatrix}). When the graph is undirected, the \code{sparseMatrix}
will also be symmetric.

If \code{return_edge_list = TRUE}, instead returns the graph as an edgelist
in matrix format, with contains two columns called \code{from} and \code{to}.
The \code{from} column contains the index of the outgoing edge,
and the \code{to} column contains the index of the incoming edge.
}
\description{
Sample a degree corrected overlapping stochastic blockmodel graph
}
\details{
TODO: write the model out in detail here

\deqn{
    xi  = \theta_i * z_i, where [z_i]_j ~ bernoulli(pi_j)
  }

\deqn{
    \lambda_{ij} = xi' B xj
  }

probability of \eqn{i} connecting to \eqn{j}:  \eqn{1 - exp(-\lambda_{ij})}
}
\examples{

set.seed(27)

n <- 1000
k <- 5

B <- matrix(runif(k * k), nrow = k, ncol = k) # mixing probabilities

theta <- round(rlnorm(n, 2))  # degree parameter
p <- c(1, 2, 4, 1, 1) / 5     # community membership

A <- dc_overlapping(theta, p, B, avg_deg = 50)

}
\seealso{
\code{\link[=fastRG]{fastRG()}}

Other stochastic block models: 
\code{\link{dc_mixed}()},
\code{\link{dcsbm}()},
\code{\link{di_dc_sbm}()},
\code{\link{di_planted_partition_params}()},
\code{\link{di_planted_partition}()},
\code{\link{disbm_params}()},
\code{\link{disbm}()}
}
\concept{stochastic block models}
