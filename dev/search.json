[{"path":"https://rohelab.github.io/fastRG/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 fastRG authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (‚ÄúSoftware‚Äù), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED ‚Äú‚Äù, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alex Hayes. Author, maintainer, copyright holder. Karl Rohe. Author, copyright holder. Jun Tao. Author. Xintian Han. Author. Norbert Binkiewicz. Author.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hayes , Rohe K, Tao J, Han X, Binkiewicz N (2025). fastRG: Sample Generalized Random Dot Product Graphs Linear Time. R package version 0.3.3.9000, https://rohelab.github.io/fastRG/.","code":"@Manual{,   title = {fastRG: Sample Generalized Random Dot Product Graphs in Linear Time},   author = {Alex Hayes and Karl Rohe and Jun Tao and Xintian Han and Norbert Binkiewicz},   year = {2025},   note = {R package version 0.3.3.9000},   url = {https://rohelab.github.io/fastRG/}, }"},{"path":"https://rohelab.github.io/fastRG/dev/index.html","id":"fastrg","dir":"","previous_headings":"","what":"Sample Generalized Random Dot Product Graphs in Linear Time","title":"Sample Generalized Random Dot Product Graphs in Linear Time","text":"fastRG quickly samples broad class network models known generalized random dot product graphs (GRDPGs). particular, matrices XX, SS YY, fastRG samples matrix AA expectation XSYTX S Y^T entries independently Poisson distributed conditional XX YY. primarily useful AA adjacency matrix graph. Crucially, sampling ùí™(m)\\mathcal O(m), mm number edges graph, opposed naive sampling approach, ùí™(n2)\\mathcal O(n^2), nn number nodes network. additional details, see paper [1]. fastRG two primary use cases: Sampling enormous sparse graphs feasibly sampled existing samplers, validating new methods random dot product graphs (variants). fastRG makes latent parameters random dot product graphs readily available users, simulation studies community detection, subspace recovery, etc, straightforward.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Sample Generalized Random Dot Product Graphs in Linear Time","text":"can install released version fastRG CRAN : development version GitHub :","code":"install.packages(\"fastRG\") # install.packages(\"devtools\") devtools::install_github(\"RoheLab/fastRG\")"},{"path":"https://rohelab.github.io/fastRG/dev/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Sample Generalized Random Dot Product Graphs in Linear Time","text":"two stages sampling generalized random dot product graphs. First, sample latent factors XX YY. sample AA conditional latent factors. fastRG mimics two-stage sample structure. example, sample stochastic blockmodel, first create latent factors. can specify latent factors mixing matrix BB , also defaults enable fast prototyping. BB randomly generated Uniform[0, 1] entries nodes assigned randomly communities equal probability falling communities. Printing result object gives us additional information: Now, conditional latent representation, can sample graphs. fastRG supports several different output types, specified suffix sample_*() functions. example, can obtain edgelist tibble : can just easily obtain graph sparse matrix igraph object Note every time call sample_*() draw new sample.","code":"library(fastRG) #> Loading required package: Matrix  set.seed(27)  sbm <- sbm(n = 1000, k = 5, expected_density = 0.01) #> Generating random mixing matrix `B` with independent Uniform(0, 1) entries. This distribution may change in the future. Explicitly set `B` for reproducible results. sbm #> Undirected Stochastic Blockmodel #> -------------------------------- #>  #> Nodes (n): 1000 (arranged by block) #> Blocks (k): 5 #>  #> Traditional SBM parameterization: #>  #> Block memberships (z): 1000 [factor]  #> Block probabilities (pi): 5 [numeric]  #> Factor model parameterization: #>  #> X: 1000 x 5 [dgCMatrix]  #> S: 5 x 5 [dgeMatrix]  #>  #> Poisson edges: TRUE  #> Allow self loops: TRUE  #>  #> Expected edges: 4995 #> Expected degree: 5 #> Expected density: 0.01 sample_edgelist(sbm) #> # A tibble: 4,985 √ó 2 #>     from    to #>    <int> <int> #>  1   111   127 #>  2    86   109 #>  3    43    97 #>  4    61    94 #>  5    22   143 #>  6     4    89 #>  7    30   159 #>  8   119   210 #>  9    41   197 #> 10   145   175 #> # ‚Ñπ 4,975 more rows A <- sample_sparse(sbm) A[1:10, 1:10] #> 10 x 10 sparse Matrix of class \"dsCMatrix\" #>                           #>  [1,] . . . . . . . . . . #>  [2,] . . . . . . . . . . #>  [3,] . . . . . . . . . . #>  [4,] . . . . . . . . . . #>  [5,] . . . . . . . . . . #>  [6,] . . . . . . . . . . #>  [7,] . . . . . . . . . . #>  [8,] . . . . . . . . . . #>  [9,] . . . . . . . . . . #> [10,] . . . . . . . . . . sample_igraph(sbm) #> IGRAPH be5b840 UN-- 1000 5033 --  #> + attr: name (v/c) #> + edges from be5b840 (vertex names): #>  [1] 63 --76  135--215 59 --182 21 --134 180--218 53 --189 138--139 21 --78  #>  [9] 49 --70  76 --127 6  --139 64 --214 31 --132 56 --93  75 --144 9  --185 #> [17] 33 --150 115--165 163--213 6  --53  47 --179 25 --26  7  --51  10 --55  #> [25] 120--183 43 --152 25 --34  84 --216 114--191 34 --127 152--164 178--189 #> [33] 106--181 28 --38  41 --89  34 --139 6  --213 24 --153 32 --173 47 --111 #> [41] 157--205 108--133 98 --116 26 --117 18 --194 18 --32  74 --209 18 --128 #> [49] 13 --127 12 --26  1  --133 52 --72  128--213 13 --173 61 --214 33 --142 #> [57] 22 --111 163--191 191--205 5  --108 9  --72  6  --217 113--122 90 --154 #> + ... omitted several edges A <- sample_sparse(sbm) B <- sample_sparse(sbm)  all(A == B) # random realizations from the SBM don't match! #> [1] FALSE"},{"path":"https://rohelab.github.io/fastRG/dev/index.html","id":"efficient-spectral-decompositions","dir":"","previous_headings":"","what":"Efficient spectral decompositions","title":"Sample Generalized Random Dot Product Graphs in Linear Time","text":"like obtain singular value decomposition population adjacency matrix conditional latent factors, straightforward: Note eigendecompositions SVDS (directed graphs) use RSpectra require explicitly forming large dense population adjacency matrices; population decompositions efficient time space even large graphs.","code":"s <- eigs_sym(sbm) s$values #> [1]  5.0999835  1.8365365  0.6679806 -0.5241303 -0.8109449"},{"path":"https://rohelab.github.io/fastRG/dev/index.html","id":"key-sampling-options","dir":"","previous_headings":"","what":"Key sampling options","title":"Sample Generalized Random Dot Product Graphs in Linear Time","text":"several essential tools modify graph sampling know . First options affect latent factor sampling: expected_degree: Set expected average degree graph scaling sampling probabilities. strongly, strongly recommend always set option. , easy accidentally sample large dense graphs. expected_density: Set expected density graph scaling sampling probabilities. specify expected_degree expected_density time. second stage graph sampling, options : poisson_edges: Either TRUE FALSE depending whether like Bernoulli graph Poisson multi-graph. Scaling via expected_degree assumes Poisson multi-graph, limited exceptions. allow_self_edges: Whether nodes allowed connect . Either TRUE FALSE.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/index.html","id":"related-work","dir":"","previous_headings":"","what":"Related work","title":"Sample Generalized Random Dot Product Graphs in Linear Time","text":"igraph allows users sample SBMs (ùí™(m+n+k2)\\mathcal O(m + n + k^2) time) random dot product graphs (ùí™(n2k)\\mathcal O(n^2 k) time). can find original research code associated fastRG . also Python translation original code Python . implementations bare bones.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Sample Generalized Random Dot Product Graphs in Linear Time","text":"[1] Rohe, Karl, Jun Tao, Xintian Han, Norbert Binkiewicz. 2017. ‚ÄúNote Quickly Sampling Sparse Matrix Low Rank Expectation.‚Äù Journal Machine Learning Research; 19(77):1-13, 2018. https://www.jmlr.org/papers/v19/17-128.html","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/chung_lu.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an undirected Chung-Lu object ‚Äî chung_lu","title":"Create an undirected Chung-Lu object ‚Äî chung_lu","text":"specify Chung-Lu graph, must specify degree-heterogeneity parameters (via n theta). provide reasonable defaults enable rapid exploration can invest effort control model parameters. strongly recommend setting expected_degree expected_density argument avoid large memory allocations associated sampling large, dense graphs.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/chung_lu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an undirected Chung-Lu object ‚Äî chung_lu","text":"","code":"chung_lu(   n = NULL,   theta = NULL,   ...,   sort_nodes = TRUE,   poisson_edges = TRUE,   allow_self_loops = TRUE,   force_identifiability = FALSE )"},{"path":"https://rohelab.github.io/fastRG/dev/reference/chung_lu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an undirected Chung-Lu object ‚Äî chung_lu","text":"n (degree heterogeneity) number nodes graph. Use want specify degree-heterogeneity parameters theta hand. n specified, theta randomly generated LogNormal(2, 1) distribution. subject change, may reproducible. n defaults NULL. must specify either n theta, . theta (degree heterogeneity) numeric vector explicitly specifying degree heterogeneity parameters. implicitly determines number nodes resulting graph, .e. length(theta) nodes. Must positive. Setting vector ones recovers erdos renyi graph. Defaults NULL. must specify either n theta, . ... Arguments passed undirected_factor_model expected_degree specified, desired expected degree graph. Specifying expected_degree simply rescales S achieve . Defaults NULL. specify expected_degree expected_density time. expected_density specified, desired expected density graph. Specifying expected_density simply rescales S achieve . Defaults NULL. specify expected_degree expected_density time. sort_nodes Logical indicating whether sort nodes grouped block theta. Useful plotting. Defaults TRUE. poisson_edges Logical indicating whether multiple edges allowed form pair nodes. Defaults TRUE. FALSE, sampling proceeds usual, duplicate edges removed afterwards. , FALSE, assume S specifies desired -factor connection probability, back-transform S appropriate Poisson intensity parameter approximate Bernoulli factor connection probabilities. See Section 2.3 Rohe et al. (2017) additional details. allow_self_loops Logical indicating whether nodes allowed form edges . Defaults TRUE. FALSE, sampling proceeds allowing self-loops, removed fact. force_identifiability Logical indicating whether normalize theta sums one within block. Defaults FALSE, since behavior can surprise theta set vector ones recover SBM case.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/chung_lu.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an undirected Chung-Lu object ‚Äî chung_lu","text":"undirected_chung_lu S3 object, subclass dcsbm().","code":""},{"path":[]},{"path":"https://rohelab.github.io/fastRG/dev/reference/chung_lu.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an undirected Chung-Lu object ‚Äî chung_lu","text":"","code":"set.seed(27)  cl <- chung_lu(n = 100, expected_density = 0.01) #> Generating random degree heterogeneity parameters `theta` from a LogNormal(2, 1) distribution. This distribution may change in the future. Explicitly set `theta` for reproducible results. cl #> Undirected Degree-Corrected Stochastic Blockmodel #> ------------------------------------------------- #>  #> Nodes (n): 100 (arranged by block) #> Blocks (k): 1 #>  #> Traditional DCSBM parameterization: #>  #> Block memberships (z): 100 [factor]  #> Degree heterogeneity (theta): 100 [numeric]  #> Block probabilities (pi): 1 [numeric]  #>  #> Factor model parameterization: #>  #> X: 100 x 1 [dgeMatrix]  #> S: 1 x 1 [ddiMatrix]  #>  #> Poisson edges: TRUE  #> Allow self loops: TRUE  #>  #> Expected edges: 50 #> Expected degree: 0.5 #> Expected density: 0.01  theta <- round(stats::rlnorm(100, 2))  cl2 <- chung_lu(   theta = theta,   expected_degree = 5 )  cl2 #> Undirected Degree-Corrected Stochastic Blockmodel #> ------------------------------------------------- #>  #> Nodes (n): 100 (arranged by block) #> Blocks (k): 1 #>  #> Traditional DCSBM parameterization: #>  #> Block memberships (z): 100 [factor]  #> Degree heterogeneity (theta): 100 [numeric]  #> Block probabilities (pi): 1 [numeric]  #>  #> Factor model parameterization: #>  #> X: 100 x 1 [dgeMatrix]  #> S: 1 x 1 [ddiMatrix]  #>  #> Poisson edges: TRUE  #> Allow self loops: TRUE  #>  #> Expected edges: 500 #> Expected degree: 5 #> Expected density: 0.10101  edgelist <- sample_edgelist(cl) edgelist #> # A tibble: 65 √ó 2 #>     from    to #>    <int> <int> #>  1     6     8 #>  2     5     6 #>  3     3    76 #>  4     4     5 #>  5     8    25 #>  6     5    28 #>  7     1    59 #>  8     2     7 #>  9     8     8 #> 10     1     4 #> # ‚Ñπ 55 more rows"},{"path":"https://rohelab.github.io/fastRG/dev/reference/dcsbm.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an undirected degree corrected stochastic blockmodel object ‚Äî dcsbm","title":"Create an undirected degree corrected stochastic blockmodel object ‚Äî dcsbm","text":"specify degree-corrected stochastic blockmodel, must specify degree-heterogeneity parameters (via n theta), mixing matrix (via k B), relative block probabilities (optional, via pi). provide defaults options enable rapid exploration, can invest effort control model parameters. strongly recommend setting expected_degree expected_density argument avoid large memory allocations associated sampling large, dense graphs.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/dcsbm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an undirected degree corrected stochastic blockmodel object ‚Äî dcsbm","text":"","code":"dcsbm(   n = NULL,   theta = NULL,   k = NULL,   B = NULL,   ...,   pi = rep(1/k, k),   sort_nodes = TRUE,   force_identifiability = FALSE,   poisson_edges = TRUE,   allow_self_loops = TRUE )"},{"path":"https://rohelab.github.io/fastRG/dev/reference/dcsbm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an undirected degree corrected stochastic blockmodel object ‚Äî dcsbm","text":"n (degree heterogeneity) number nodes blockmodel. Use want specify degree-heterogeneity parameters theta hand. n specified, theta randomly generated LogNormal(2, 1) distribution. subject change, may reproducible. n defaults NULL. must specify either n theta, . theta (degree heterogeneity) numeric vector explicitly specifying degree heterogeneity parameters. implicitly determines number nodes resulting graph, .e. length(theta) nodes. Must positive. Setting vector ones recovers stochastic blockmodel without degree correction. Defaults NULL. must specify either n theta, . k (mixing matrix) number blocks blockmodel. Use want specify mixing-matrix hand. k specified, elements B drawn randomly Uniform(0, 1) distribution. subject change, may reproducible. k defaults NULL. must specify either k B, . B (mixing matrix) k k matrix block connection probabilities. probability node block connects node community j Poisson(B[, j]). Must square matrix. matrix Matrix objects acceptable. B symmetric, symmetrized via update B := B + t(B). Defaults NULL. must specify either k B, . ... Arguments passed undirected_factor_model expected_degree specified, desired expected degree graph. Specifying expected_degree simply rescales S achieve . Defaults NULL. specify expected_degree expected_density time. expected_density specified, desired expected density graph. Specifying expected_density simply rescales S achieve . Defaults NULL. specify expected_degree expected_density time. pi (relative block probabilities) Relative block probabilities. Must positive, need sum one, normalized internally. Must match dimensions B k. Defaults rep(1 / k, k), balanced blocks. sort_nodes Logical indicating whether sort nodes grouped block theta. Useful plotting. Defaults TRUE. TRUE, nodes first sorted block membership, degree-correction parameters within block. Additionally, pi sorted increasing order, columns B matrix permuted match new order pi. force_identifiability Logical indicating whether normalize theta sums one within block. Defaults FALSE, since behavior can surprise theta set vector ones recover SBM case. poisson_edges Logical indicating whether multiple edges allowed form pair nodes. Defaults TRUE. FALSE, sampling proceeds usual, duplicate edges removed afterwards. , FALSE, assume S specifies desired -factor connection probability, back-transform S appropriate Poisson intensity parameter approximate Bernoulli factor connection probabilities. See Section 2.3 Rohe et al. (2017) additional details. allow_self_loops Logical indicating whether nodes allowed form edges . Defaults TRUE. FALSE, sampling proceeds allowing self-loops, removed fact.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/dcsbm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an undirected degree corrected stochastic blockmodel object ‚Äî dcsbm","text":"undirected_dcsbm S3 object, subclass undirected_factor_model() following additional fields: theta: numeric vector degree-heterogeneity parameters. z: community memberships node, factor(). factor k levels, k number communities stochastic blockmodel. always necessarily observed nodes community. pi: Sampling probabilities block. sorted: Logical indicating nodes arranged block (additionally degree heterogeneity parameter) within block.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/dcsbm.html","id":"generative-model","dir":"Reference","previous_headings":"","what":"Generative Model","title":"Create an undirected degree corrected stochastic blockmodel object ‚Äî dcsbm","text":"two levels randomness degree-corrected stochastic blockmodel. First, randomly chose block membership node blockmodel. handled dcsbm(). , given block memberships, randomly sample edges nodes. second operation handled sample_edgelist(), sample_sparse(), sample_igraph() sample_tidygraph(), depending depending desired graph representation.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/dcsbm.html","id":"block-memberships","dir":"Reference","previous_headings":"","what":"Block memberships","title":"Create an undirected degree corrected stochastic blockmodel object ‚Äî dcsbm","text":"Let \\(z_i\\) represent block membership node \\(\\). generate \\(z_i\\) sample categorical distribution (note special case multinomial) parameter \\(\\pi\\), \\(\\pi_i\\) represents probability ending ith block. Block memberships node independent.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/dcsbm.html","id":"degree-heterogeneity","dir":"Reference","previous_headings":"","what":"Degree heterogeneity","title":"Create an undirected degree corrected stochastic blockmodel object ‚Äî dcsbm","text":"addition block membership, DCSBM also allows nodes different propensities edge formation. represent propensity node \\(\\) positive number \\(\\theta_i\\). Typically \\(\\theta_i\\) constrained sum one identifiability purposes, really matter sampling (.e. without sum constraint scaling \\(B\\) \\(\\theta\\) effect edge probabilities, whether \\(B\\) \\(\\theta\\) responsible change uncertain).","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/dcsbm.html","id":"edge-formulation","dir":"Reference","previous_headings":"","what":"Edge formulation","title":"Create an undirected degree corrected stochastic blockmodel object ‚Äî dcsbm","text":"know block memberships \\(z\\) degree heterogeneity parameters \\(theta\\), need one ingredient, baseline intensity connections nodes block block j. edge \\(A_{,j}\\) Poisson distributed parameter $$   \\lambda[, j] = \\theta_i \\cdot B_{z_i, z_j} \\cdot \\theta_j. $$","code":""},{"path":[]},{"path":"https://rohelab.github.io/fastRG/dev/reference/dcsbm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an undirected degree corrected stochastic blockmodel object ‚Äî dcsbm","text":"","code":"set.seed(27)  lazy_dcsbm <- dcsbm(n = 100, k = 5, expected_density = 0.01) #> Generating random degree heterogeneity parameters `theta` from a LogNormal(2, 1) distribution. This distribution may change in the future. Explicitly set `theta` for reproducible results. #> Generating random mixing matrix `B` with independent Uniform(0, 1) entries. This distribution may change in the future. Explicitly set `B` for reproducible results. lazy_dcsbm #> Undirected Degree-Corrected Stochastic Blockmodel #> ------------------------------------------------- #>  #> Nodes (n): 100 (arranged by block) #> Blocks (k): 5 #>  #> Traditional DCSBM parameterization: #>  #> Block memberships (z): 100 [factor]  #> Degree heterogeneity (theta): 100 [numeric]  #> Block probabilities (pi): 5 [numeric]  #>  #> Factor model parameterization: #>  #> X: 100 x 5 [dgCMatrix]  #> S: 5 x 5 [dgeMatrix]  #>  #> Poisson edges: TRUE  #> Allow self loops: TRUE  #>  #> Expected edges: 50 #> Expected degree: 0.5 #> Expected density: 0.01  # sometimes you gotta let the world burn and # sample a wildly dense graph  dense_lazy_dcsbm <- dcsbm(n = 50, k = 3, expected_density = 0.8) #> Generating random degree heterogeneity parameters `theta` from a LogNormal(2, 1) distribution. This distribution may change in the future. Explicitly set `theta` for reproducible results. #> Generating random mixing matrix `B` with independent Uniform(0, 1) entries. This distribution may change in the future. Explicitly set `B` for reproducible results. dense_lazy_dcsbm #> Undirected Degree-Corrected Stochastic Blockmodel #> ------------------------------------------------- #>  #> Nodes (n): 50 (arranged by block) #> Blocks (k): 3 #>  #> Traditional DCSBM parameterization: #>  #> Block memberships (z): 50 [factor]  #> Degree heterogeneity (theta): 50 [numeric]  #> Block probabilities (pi): 3 [numeric]  #>  #> Factor model parameterization: #>  #> X: 50 x 3 [dgCMatrix]  #> S: 3 x 3 [dgeMatrix]  #>  #> Poisson edges: TRUE  #> Allow self loops: TRUE  #>  #> Expected edges: 980 #> Expected degree: 19.6 #> Expected density: 0.8  # explicitly setting the degree heterogeneity parameter, # mixing matrix, and relative community sizes rather # than using randomly generated defaults  k <- 5 n <- 100 B <- matrix(stats::runif(k * k), nrow = k, ncol = k)  theta <- round(stats::rlnorm(n, 2))  pi <- c(1, 2, 4, 1, 1)  custom_dcsbm <- dcsbm(   theta = theta,   B = B,   pi = pi,   expected_degree = 50 )  custom_dcsbm #> Undirected Degree-Corrected Stochastic Blockmodel #> ------------------------------------------------- #>  #> Nodes (n): 100 (arranged by block) #> Blocks (k): 5 #>  #> Traditional DCSBM parameterization: #>  #> Block memberships (z): 100 [factor]  #> Degree heterogeneity (theta): 100 [numeric]  #> Block probabilities (pi): 5 [numeric]  #>  #> Factor model parameterization: #>  #> X: 100 x 5 [dgCMatrix]  #> S: 5 x 5 [dgeMatrix]  #>  #> Poisson edges: TRUE  #> Allow self loops: TRUE  #>  #> Expected edges: 5000 #> Expected degree: 50 #> Expected density: 1.0101  edgelist <- sample_edgelist(custom_dcsbm) edgelist #> # A tibble: 4,951 √ó 2 #>     from    to #>    <int> <int> #>  1     1     6 #>  2     1     1 #>  3     2     3 #>  4     2     3 #>  5     2     9 #>  6     1     1 #>  7     2     7 #>  8     3     3 #>  9     6     8 #> 10     1     3 #> # ‚Ñπ 4,941 more rows  # efficient eigendecompostion that leverages low-rank structure in # E(A) so that you don't have to form E(A) to find eigenvectors, # as E(A) is typically dense. computation is # handled via RSpectra  population_eigs <- eigs_sym(custom_dcsbm)"},{"path":"https://rohelab.github.io/fastRG/dev/reference/directed_dcsbm.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a directed degree corrected stochastic blockmodel object ‚Äî directed_dcsbm","title":"Create a directed degree corrected stochastic blockmodel object ‚Äî directed_dcsbm","text":"specify degree-corrected stochastic blockmodel, must specify degree-heterogeneity parameters (via n theta_out theta_in), mixing matrix (via k_out k_in, B), relative block probabilities (optional, via p_out pi_in). provide defaults options enable rapid exploration, can invest effort control model parameters. strongly recommend setting expected_out_degree, expected_in_degree, expected_density argument avoid large memory allocations associated sampling large, dense graphs.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/directed_dcsbm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a directed degree corrected stochastic blockmodel object ‚Äî directed_dcsbm","text":"","code":"directed_dcsbm(   n = NULL,   theta_out = NULL,   theta_in = NULL,   k_out = NULL,   k_in = NULL,   B = NULL,   ...,   pi_out = rep(1/k_out, k_out),   pi_in = rep(1/k_in, k_in),   sort_nodes = TRUE,   force_identifiability = TRUE,   poisson_edges = TRUE,   allow_self_loops = TRUE )"},{"path":"https://rohelab.github.io/fastRG/dev/reference/directed_dcsbm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a directed degree corrected stochastic blockmodel object ‚Äî directed_dcsbm","text":"n (degree heterogeneity) number nodes blockmodel. Use want specify degree-heterogeneity parameters theta_out theta_in hand. n specified, theta_out theta_in randomly generated LogNormal(2, 1) distribution. subject change, may reproducible. n defaults NULL. must specify either n theta_out theta_in together, . theta_out (degree heterogeneity) numeric vector explicitly specifying degree heterogeneity parameters. implicitly determines number nodes resulting graph, .e. length(theta_out) nodes. Must positive. Setting vector ones recovers stochastic blockmodel without degree correction. Defaults NULL. must specify either n theta_out theta_in together, . theta_out controls outgoing degree propensity, , equivalently, row sums adjacency matrix. theta_in (degree heterogeneity) numeric vector explicitly specifying degree heterogeneity parameters. implicitly determines number nodes resulting graph, .e. length(theta) nodes. Must positive. Setting vector ones recovers stochastic blockmodel without degree correction. Defaults NULL. must specify either n theta_out theta_in together, . theta_in controls incoming degree propensity, , equivalently, column sums adjacency matrix. k_out (mixing matrix) number outgoing blocks blockmodel. Use want specify mixing-matrix hand. k_out specified, elements B drawn randomly Uniform(0, 1) distribution. subject change, may reproducible. k_out defaults NULL. must specify either k_out k_in together, B. may specify three , case k_out used set pi_out (pi_out left default argument value). k_in (mixing matrix) number incoming blocks blockmodel. Use want specify mixing-matrix hand. k_in specified, elements B drawn randomly Uniform(0, 1) distribution. subject change, may reproducible. k_in defaults NULL. may specify three , case k_in used set pi_in (pi_in left default argument value). B (mixing matrix) k_out k_in matrix block connection probabilities. probability node block connects node community j Poisson(B[, j]). matrix Matrix objects acceptable. Defaults NULL. must specify either k_out k_in together, B, . ... Arguments passed directed_factor_model expected_in_degree specified, desired expected degree graph. Specifying expected_in_degree simply rescales S achieve . Defaults NULL. Specify one expected_in_degree, expected_out_degree, expected_density. expected_out_degree specified, desired expected degree graph. Specifying expected_out_degree simply rescales S achieve . Defaults NULL. Specify one expected_in_degree, expected_out_degree, expected_density. expected_density specified, desired expected density graph. Specifying expected_density simply rescales S achieve . Defaults NULL. Specify one expected_in_degree, expected_out_degree, expected_density. pi_out (relative block probabilities) Relative block probabilities. Must positive, need sum one, normalized internally. Must match rows B, k_out. Defaults rep(1 / k_out, k_out), balanced outgoing blocks. pi_in (relative block probabilities) Relative block probabilities. Must positive, need sum one, normalized internally. Must match columns B, k_in. Defaults rep(1 / k_in, k_in), balanced incoming blocks. sort_nodes Logical indicating whether sort nodes grouped block. Useful plotting. Defaults TRUE. TRUE, rows expected adjacency matrix first sorted outgoing block membership, incoming degree-correction parameters within incoming block. similar sorting procedure occurs independently columns, according incoming blocks. Additionally, pi_out pi_in sorted increasing order, columns B matrix permuted match new orderings. force_identifiability Logical indicating whether normalize theta_out sums one within incoming block theta_in sums one within outgoing block. Defaults TRUE. poisson_edges Logical indicating whether multiple edges allowed form pair nodes. Defaults TRUE. FALSE, sampling proceeds usual, duplicate edges removed afterwards. , FALSE, assume S specifies desired -factor connection probability, back-transform S appropriate Poisson intensity parameter approximate Bernoulli factor connection probabilities. See Section 2.3 Rohe et al. (2017) additional details. allow_self_loops Logical indicating whether nodes allowed form edges . Defaults TRUE. FALSE, sampling proceeds allowing self-loops, removed fact.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/directed_dcsbm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a directed degree corrected stochastic blockmodel object ‚Äî directed_dcsbm","text":"directed_dcsbm S3 object, subclass directed_factor_model() following additional fields: theta_out: numeric vector incoming community degree-heterogeneity parameters. theta_in: numeric vector outgoing community degree-heterogeneity parameters. z_out: incoming community memberships node, factor(). factor k_out levels, k_out number incoming communities stochastic blockmodel. always necessarily observed nodes community. z_in: outgoing community memberships node, factor(). factor k_in levels, k_in number outgoing communities stochastic blockmodel. always necessarily observed nodes community. pi_out: Sampling probabilities incoming community. pi_in: Sampling probabilities outgoing community. sorted: Logical indicating nodes arranged block (additionally degree heterogeneity parameter) within block.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/directed_dcsbm.html","id":"generative-model","dir":"Reference","previous_headings":"","what":"Generative Model","title":"Create a directed degree corrected stochastic blockmodel object ‚Äî directed_dcsbm","text":"two levels randomness directed degree-corrected stochastic blockmodel. First, randomly chose incoming block membership outgoing block membership node blockmodel. handled directed_dcsbm(). , given block memberships, randomly sample edges nodes. second operation handled sample_edgelist(), sample_sparse(), sample_igraph() sample_tidygraph(), depending desired graph representation.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/directed_dcsbm.html","id":"block-memberships","dir":"Reference","previous_headings":"","what":"Block memberships","title":"Create a directed degree corrected stochastic blockmodel object ‚Äî directed_dcsbm","text":"Let \\(x\\) represent incoming block membership node \\(y\\) represent outgoing block membership node. generate \\(x\\) sample categorical distribution parameter \\(\\pi_out\\). generate \\(y\\) sample categorical distribution parameter \\(\\pi_in\\). Block memberships independent across nodes. Incoming outgoing block memberships node also independent.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/directed_dcsbm.html","id":"degree-heterogeneity","dir":"Reference","previous_headings":"","what":"Degree heterogeneity","title":"Create a directed degree corrected stochastic blockmodel object ‚Äî directed_dcsbm","text":"addition block membership, DCSBM also nodes different propensities incoming outgoing edge formation. represent propensity form incoming edges given node positive number \\(\\theta_out\\). represent propensity form outgoing edges given node positive number \\(\\theta_in\\). Typically \\(\\theta_out\\) (\\(theta_in\\)) across nodes constrained sum one identifiability purposes, really matter sampling.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/directed_dcsbm.html","id":"edge-formulation","dir":"Reference","previous_headings":"","what":"Edge formulation","title":"Create a directed degree corrected stochastic blockmodel object ‚Äî directed_dcsbm","text":"know block memberships \\(x\\) \\(y\\) degree  heterogeneity parameters \\(\\theta_{}\\) \\(\\theta_{}\\), need one ingredient, baseline intensity connections nodes block block j. edge forms independently according Poisson distribution parameters $$   \\lambda = \\theta_{} * B_{x, y} * \\theta_{}. $$","code":""},{"path":[]},{"path":"https://rohelab.github.io/fastRG/dev/reference/directed_dcsbm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a directed degree corrected stochastic blockmodel object ‚Äî directed_dcsbm","text":"","code":"set.seed(27)  B <- matrix(0.2, nrow = 5, ncol = 8) diag(B) <- 0.9  ddcsbm <- directed_dcsbm(   n = 100,   B = B,   k_out = 5,   k_in = 8,   expected_density = 0.01 ) #> Generating random degree heterogeneity parameters `theta_out` and `theta_in` from LogNormal(2, 1) distributions. This distribution may change in the future. Explicitly set `theta_out` and `theta_in` for reproducible results.  ddcsbm #> Directed Degree-Corrected Stochastic Blockmodel #> ----------------------------------------------- #>  #> Nodes (n): 100 (arranged by block) #> Incoming Blocks (k_out): 5 #> Outgoing Blocks (k_in): 8 #>  #> Traditional DCSBM parameterization: #>  #> Block memberships (z_out): 100 [factor]  #> Block memberships (z_in): 100 [factor]  #> Degree heterogeneity (theta_out): 100 [numeric]  #> Degree heterogeneity (theta_in): 100 [numeric]  #> Block probabilities (pi_out): 5 [numeric]  #> Block probabilities (pi_in): 8 [numeric]  #>  #> Factor model parameterization: #>  #> X: 100 x 5 [dgCMatrix]  #> S: 5 x 8 [dgeMatrix]  #> Y: 100 x 8 [dgCMatrix]  #>  #> Poisson edges: TRUE  #> Allow self loops: TRUE  #>  #> Expected edges: 100 #> Expected in degree: 1 #> Expected out degree: 1 #> Expected density: 0.01  population_svd <- svds(ddcsbm)"},{"path":"https://rohelab.github.io/fastRG/dev/reference/directed_erdos_renyi.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an directed erdos renyi object ‚Äî directed_erdos_renyi","title":"Create an directed erdos renyi object ‚Äî directed_erdos_renyi","text":"Create directed erdos renyi object","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/directed_erdos_renyi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an directed erdos renyi object ‚Äî directed_erdos_renyi","text":"","code":"directed_erdos_renyi(   n,   ...,   p = NULL,   poisson_edges = TRUE,   allow_self_loops = TRUE )"},{"path":"https://rohelab.github.io/fastRG/dev/reference/directed_erdos_renyi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an directed erdos renyi object ‚Äî directed_erdos_renyi","text":"n Number nodes graph. ... Arguments passed directed_factor_model expected_in_degree specified, desired expected degree graph. Specifying expected_in_degree simply rescales S achieve . Defaults NULL. Specify one expected_in_degree, expected_out_degree, expected_density. expected_out_degree specified, desired expected degree graph. Specifying expected_out_degree simply rescales S achieve . Defaults NULL. Specify one expected_in_degree, expected_out_degree, expected_density. p Probability edge two nodes. must specify either p, expected_in_degree, expected_out_degree. poisson_edges Logical indicating whether multiple edges allowed form pair nodes. Defaults TRUE. FALSE, sampling proceeds usual, duplicate edges removed afterwards. , FALSE, assume S specifies desired -factor connection probability, back-transform S appropriate Poisson intensity parameter approximate Bernoulli factor connection probabilities. See Section 2.3 Rohe et al. (2017) additional details. allow_self_loops Logical indicating whether nodes allowed form edges . Defaults TRUE. FALSE, sampling proceeds allowing self-loops, removed fact.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/directed_erdos_renyi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an directed erdos renyi object ‚Äî directed_erdos_renyi","text":"directed_factor_model S3 class based list following elements: X: incoming latent positions Matrix::Matrix() object. S: mixing matrix Matrix::Matrix() object. Y: outgoing latent positions Matrix::Matrix() object. n: number nodes incoming edges network. k1: dimension latent node position vectors encoding incoming latent communities (.e. X). d: number nodes outgoing edges network. need match n ‚Äì rectangular adjacency matrices supported. k2: dimension latent node position vectors encoding outgoing latent communities (.e. Y). poisson_edges: Whether graph taken Poisson Bernoulli edges, indicated logical vector length 1. allow_self_loops: Whether self loops allowed.","code":""},{"path":[]},{"path":"https://rohelab.github.io/fastRG/dev/reference/directed_erdos_renyi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an directed erdos renyi object ‚Äî directed_erdos_renyi","text":"","code":"set.seed(87)  er <- directed_erdos_renyi(n = 10, p = 0.1) er #> Directed Factor Model #> --------------------- #>  #> Incoming Nodes (n): 10 #> Incoming Rank (k1): 1 #> Outgoing Rank (k2): 1 #> Outgoing Nodes (d): 10 #>  #> X: 10 x 1 [dgeMatrix]  #> S: 1 x 1 [ddiMatrix]  #> Y: 10 x 1 [dgeMatrix]  #>  #> Poisson edges: TRUE  #> Allow self loops: TRUE  #>  #> Expected edges: 10 #> Expected density: 0.1 #> Expected in degree: 1 #> Expected out degree: 1  big_er <- directed_erdos_renyi(n = 1000, expected_in_degree = 5) big_er #> Directed Factor Model #> --------------------- #>  #> Incoming Nodes (n): 1000 #> Incoming Rank (k1): 1 #> Outgoing Rank (k2): 1 #> Outgoing Nodes (d): 1000 #>  #> X: 1000 x 1 [dgeMatrix]  #> S: 1 x 1 [ddiMatrix]  #> Y: 1000 x 1 [dgeMatrix]  #>  #> Poisson edges: TRUE  #> Allow self loops: TRUE  #>  #> Expected edges: 5000 #> Expected density: 0.005 #> Expected in degree: 5 #> Expected out degree: 5  A <- sample_sparse(er) A #> 10 x 10 sparse Matrix of class \"dgCMatrix\" #>                           #>  [1,] . . . . . . . . . . #>  [2,] . . . . . . 1 . . . #>  [3,] . . . 1 . . . . . . #>  [4,] . . . . 1 . 1 . 1 1 #>  [5,] . . . . . . . . . . #>  [6,] . . . . . . 1 . . . #>  [7,] . . . . . . . . . . #>  [8,] 1 . . . . . . . . . #>  [9,] . . . . . 1 . . . . #> [10,] . . . . . . 2 . . ."},{"path":"https://rohelab.github.io/fastRG/dev/reference/directed_factor_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a directed factor model graph ‚Äî directed_factor_model","title":"Create a directed factor model graph ‚Äî directed_factor_model","text":"directed factor model graph directed generalized Poisson random dot product graph. edges graph assumpted independent Poisson distributed. graph parameterized expected adjacency matrix, E[] = X S Y'. recommend causal users use function, see instead directed_dcsbm() related functions, formulate common variants stochastic blockmodels undirected factor models lots helpful input validation.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/directed_factor_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a directed factor model graph ‚Äî directed_factor_model","text":"","code":"directed_factor_model(   X,   S,   Y,   ...,   expected_in_degree = NULL,   expected_out_degree = NULL,   expected_density = NULL,   poisson_edges = TRUE,   allow_self_loops = TRUE )"},{"path":"https://rohelab.github.io/fastRG/dev/reference/directed_factor_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a directed factor model graph ‚Äî directed_factor_model","text":"X matrix() Matrix::Matrix() representing real-valued latent node positions encoding community structure incoming edges. Entries must positive. S matrix() Matrix::Matrix() mixing matrix. Entries must positive. Y matrix() Matrix::Matrix() representing real-valued latent node positions encoding community structure outgoing edges. Entries must positive. ... Ignored. internal developer use . expected_in_degree specified, desired expected degree graph. Specifying expected_in_degree simply rescales S achieve . Defaults NULL. Specify one expected_in_degree, expected_out_degree, expected_density. expected_out_degree specified, desired expected degree graph. Specifying expected_out_degree simply rescales S achieve . Defaults NULL. Specify one expected_in_degree, expected_out_degree, expected_density. expected_density specified, desired expected density graph. Specifying expected_density simply rescales S achieve . Defaults NULL. Specify one expected_in_degree, expected_out_degree, expected_density. poisson_edges Logical indicating whether multiple edges allowed form pair nodes. Defaults TRUE. FALSE, sampling proceeds usual, duplicate edges removed afterwards. , FALSE, assume S specifies desired -factor connection probability, back-transform S appropriate Poisson intensity parameter approximate Bernoulli factor connection probabilities. See Section 2.3 Rohe et al. (2017) additional details. allow_self_loops Logical indicating whether nodes allowed form edges . Defaults TRUE. FALSE, sampling proceeds allowing self-loops, removed fact.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/directed_factor_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a directed factor model graph ‚Äî directed_factor_model","text":"directed_factor_model S3 class based list following elements: X: incoming latent positions Matrix::Matrix() object. S: mixing matrix Matrix::Matrix() object. Y: outgoing latent positions Matrix::Matrix() object. n: number nodes incoming edges network. k1: dimension latent node position vectors encoding incoming latent communities (.e. X). d: number nodes outgoing edges network. need match n ‚Äì rectangular adjacency matrices supported. k2: dimension latent node position vectors encoding outgoing latent communities (.e. Y). poisson_edges: Whether graph taken Poisson Bernoulli edges, indicated logical vector length 1. allow_self_loops: Whether self loops allowed.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/directed_factor_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a directed factor model graph ‚Äî directed_factor_model","text":"","code":"n <- 1000  k1 <- 5 k2 <- 3  d <- 500  X <- matrix(rpois(n = n * k1, 1), nrow = n) S <- matrix(runif(n = k1 * k2, 0, .1), nrow = k1, ncol = k2) Y <- matrix(rexp(n = k2 * d, 1), nrow = d)  fm <- directed_factor_model(X, S, Y) fm #> Directed Factor Model #> --------------------- #>  #> Incoming Nodes (n): 1000 #> Incoming Rank (k1): 5 #> Outgoing Rank (k2): 3 #> Outgoing Nodes (d): 500 #>  #> X: 1000 x 5 [dgeMatrix]  #> S: 5 x 3 [dgeMatrix]  #> Y: 500 x 3 [dgeMatrix]  #>  #> Poisson edges: TRUE  #> Allow self loops: TRUE  #>  #> Expected edges: 365525 #> Expected density: 0.73105 #> Expected in degree: 731.1 #> Expected out degree: 365.5  fm2 <- directed_factor_model(X, S, Y, expected_in_degree = 50) fm2 #> Directed Factor Model #> --------------------- #>  #> Incoming Nodes (n): 1000 #> Incoming Rank (k1): 5 #> Outgoing Rank (k2): 3 #> Outgoing Nodes (d): 500 #>  #> X: 1000 x 5 [dgeMatrix]  #> S: 5 x 3 [dgeMatrix]  #> Y: 500 x 3 [dgeMatrix]  #>  #> Poisson edges: TRUE  #> Allow self loops: TRUE  #>  #> Expected edges: 25000 #> Expected density: 0.05 #> Expected in degree: 50 #> Expected out degree: 25"},{"path":"https://rohelab.github.io/fastRG/dev/reference/eigs_sym.undirected_factor_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the eigendecomposition of the expected adjacency matrix of an undirected factor model ‚Äî eigs_sym.undirected_factor_model","title":"Compute the eigendecomposition of the expected adjacency matrix of an undirected factor model ‚Äî eigs_sym.undirected_factor_model","text":"Compute eigendecomposition expected adjacency matrix undirected factor model","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/eigs_sym.undirected_factor_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the eigendecomposition of the expected adjacency matrix of an undirected factor model ‚Äî eigs_sym.undirected_factor_model","text":"","code":"# S3 method for class 'undirected_factor_model' eigs_sym(A, k = A$k, which = \"LM\", sigma = NULL, opts = list(), ...)"},{"path":"https://rohelab.github.io/fastRG/dev/reference/eigs_sym.undirected_factor_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the eigendecomposition of the expected adjacency matrix of an undirected factor model ‚Äî eigs_sym.undirected_factor_model","text":"undirected_factor_model(). k Desired rank decomposition. Selection criterion. See Details . sigma Shift parameter. See section Shift--Invert Mode. opts Control parameters related computing algorithm. See Details . ... Unused, included consistency generic signature.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/eigs_sym.undirected_factor_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the eigendecomposition of the expected adjacency matrix of an undirected factor model ‚Äî eigs_sym.undirected_factor_model","text":"argument character string specifies type eigenvalues computed. Possible values : eigs() matrix types \"matrix\", \"dgeMatrix\", \"dgCMatrix\" \"dgRMatrix\" can use \"LM\", \"SM\", \"LR\", \"SR\", \"LI\" \"SI\". eigs_sym() supported matrix types, eigs() symmetric matrix types (\"dsyMatrix\", \"dsCMatrix\", \"dsRMatrix\") can use \"LM\", \"SM\", \"LA\", \"SA\" \"\". opts argument list can supply following parameters: ncv Number Lanzcos basis vectors use. vectors                   result faster convergence, greater                   memory use. general matrix, ncv must satisfy                   \\(k+2\\le ncv \\le n\\),                   symmetric matrix, constraint                   \\(k < ncv \\le n\\).                   Default min(n, max(2*k+1, 20)). tol Precision parameter. Default 1e-10. maxitr Maximum number iterations. Default 1000. retvec Whether compute eigenvectors. FALSE,                      calculate return eigenvalues. initvec Initial vector length \\(n\\) supplied                       Arnoldi/Lanczos iteration. may speed convergence                       initvec close eigenvector \\(\\).","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/erdos_renyi.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an undirected erdos renyi object ‚Äî erdos_renyi","title":"Create an undirected erdos renyi object ‚Äî erdos_renyi","text":"Create undirected erdos renyi object","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/erdos_renyi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an undirected erdos renyi object ‚Äî erdos_renyi","text":"","code":"erdos_renyi(n, ..., p = NULL, poisson_edges = TRUE, allow_self_loops = TRUE)"},{"path":"https://rohelab.github.io/fastRG/dev/reference/erdos_renyi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an undirected erdos renyi object ‚Äî erdos_renyi","text":"n Number nodes graph. ... Arguments passed undirected_factor_model expected_degree specified, desired expected degree graph. Specifying expected_degree simply rescales S achieve . Defaults NULL. specify expected_degree expected_density time. p Probability edge two nodes. must specify either p expected_degree. poisson_edges Logical indicating whether multiple edges allowed form pair nodes. Defaults TRUE. FALSE, sampling proceeds usual, duplicate edges removed afterwards. , FALSE, assume S specifies desired -factor connection probability, back-transform S appropriate Poisson intensity parameter approximate Bernoulli factor connection probabilities. See Section 2.3 Rohe et al. (2017) additional details. allow_self_loops Logical indicating whether nodes allowed form edges . Defaults TRUE. FALSE, sampling proceeds allowing self-loops, removed fact.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/erdos_renyi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an undirected erdos renyi object ‚Äî erdos_renyi","text":"undirected_factor_model S3 class based list following elements: X: latent positions Matrix::Matrix() object. S: mixing matrix Matrix::Matrix() object. n: number nodes network. k: rank expectation matrix. Equivalently, dimension latent node position vectors.","code":""},{"path":[]},{"path":"https://rohelab.github.io/fastRG/dev/reference/erdos_renyi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an undirected erdos renyi object ‚Äî erdos_renyi","text":"","code":"set.seed(87)  er <- erdos_renyi(n = 10, p = 0.1) er #> Undirected Factor Model #> ----------------------- #>  #> Nodes (n): 10 #> Rank (k): 1 #>  #> X: 10 x 1 [dgeMatrix]  #> S: 1 x 1 [ddiMatrix]  #>  #> Poisson edges: TRUE  #> Allow self loops: TRUE  #>  #> Expected edges: 10 #> Expected degree: 1 #> Expected density: 0.22222   er <- erdos_renyi(n = 10, expected_density = 0.1) er #> Undirected Factor Model #> ----------------------- #>  #> Nodes (n): 10 #> Rank (k): 1 #>  #> X: 10 x 1 [dgeMatrix]  #> S: 1 x 1 [ddiMatrix]  #>  #> Poisson edges: TRUE  #> Allow self loops: TRUE  #>  #> Expected edges: 4 #> Expected degree: 0.4 #> Expected density: 0.1  big_er <- erdos_renyi(n = 1000, expected_degree = 5) big_er #> Undirected Factor Model #> ----------------------- #>  #> Nodes (n): 1000 #> Rank (k): 1 #>  #> X: 1000 x 1 [dgeMatrix]  #> S: 1 x 1 [ddiMatrix]  #>  #> Poisson edges: TRUE  #> Allow self loops: TRUE  #>  #> Expected edges: 5000 #> Expected degree: 5 #> Expected density: 0.01001  A <- sample_sparse(er) A #> 10 x 10 sparse Matrix of class \"dsCMatrix\" #>                           #>  [1,] . . . . . . . . . . #>  [2,] . . . 1 . . . . . . #>  [3,] . . . . . . . . . . #>  [4,] . 1 . . . . . . . . #>  [5,] . . . . . . . . . . #>  [6,] . . . . . . . . . . #>  [7,] . . . . . . . . . . #>  [8,] . . . . . . . . . . #>  [9,] . . . . . . . . . . #> [10,] . . . . . . . . . ."},{"path":"https://rohelab.github.io/fastRG/dev/reference/expectation.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the expected adjacency matrix ‚Äî expectation","title":"Calculate the expected adjacency matrix ‚Äî expectation","text":"Calculate expected adjacency matrix","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/expectation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the expected adjacency matrix ‚Äî expectation","text":"","code":"expectation(model, ...)  # S3 method for class 'undirected_factor_model' expectation(model, ...)  # S3 method for class 'directed_factor_model' expectation(model, ...)"},{"path":"https://rohelab.github.io/fastRG/dev/reference/expectation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the expected adjacency matrix ‚Äî expectation","text":"model directed_factor_model() undirected_factor_model() object. ... Unused.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/expectation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the expected adjacency matrix ‚Äî expectation","text":"expected value adjacency matrix, conditional latent factors X Y (model directed).","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/expected_edges.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the expected edges in Poisson RDPG graph ‚Äî expected_edges","title":"Calculate the expected edges in Poisson RDPG graph ‚Äî expected_edges","text":"calculations conditional latent factors X Y.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/expected_edges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the expected edges in Poisson RDPG graph ‚Äî expected_edges","text":"","code":"expected_edges(factor_model, ...)  expected_degree(factor_model, ...)  expected_in_degree(factor_model, ...)  expected_out_degree(factor_model, ...)  expected_density(factor_model, ...)  expected_degrees(factor_model, ...)"},{"path":"https://rohelab.github.io/fastRG/dev/reference/expected_edges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the expected edges in Poisson RDPG graph ‚Äî expected_edges","text":"factor_model directed_factor_model() undirected_factor_model(). ... Ignored. use.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/expected_edges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the expected edges in Poisson RDPG graph ‚Äî expected_edges","text":"Expected edge counts, graph densities.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/expected_edges.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the expected edges in Poisson RDPG graph ‚Äî expected_edges","text":"Note runtime fastRG algorithm proportional expected number edges graph. Expected edge count underestimate expected number edges Bernoulli graphs. See Rohe et al details.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/expected_edges.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate the expected edges in Poisson RDPG graph ‚Äî expected_edges","text":"Rohe, Karl, Jun Tao, Xintian Han, Norbert Binkiewicz. 2017. \"Note Quickly Sampling Sparse Matrix Low Rank Expectation.\" Journal Machine Learning Research; 19(77):1-13, 2018. https://www.jmlr.org/papers/v19/17-128.html","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/expected_edges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the expected edges in Poisson RDPG graph ‚Äî expected_edges","text":"","code":"##### an undirected blockmodel example  n <- 100 pop <- n / 2 a <- .1 b <- .05  B <- matrix(c(a, b, b, a), nrow = 2)  b_model <- sbm(n = n, k = 2, B = B, poisson_edges = FALSE)  b_model #> Undirected Stochastic Blockmodel #> -------------------------------- #>  #> Nodes (n): 100 (arranged by block) #> Blocks (k): 2 #>  #> Traditional SBM parameterization: #>  #> Block memberships (z): 100 [factor]  #> Block probabilities (pi): 2 [numeric]  #> Factor model parameterization: #>  #> X: 100 x 2 [dgeMatrix]  #> S: 2 x 2 [dsyMatrix]  #>  #> Poisson edges: FALSE  #> Allow self loops: TRUE  #>  #> Expected edges: 784 #> Expected degree: 7.8 #> Expected density: 0.15832  A <- sample_sparse(b_model)  # compare mean(rowSums(triu(A))) #> [1] 7.09  pop * a + pop * b # analytical average degree #> [1] 7.5  ##### more generic examples  n <- 1000 k <- 5  X <- matrix(rpois(n = n * k, 1), nrow = n) S <- matrix(runif(n = k * k, 0, .1), nrow = k)  ufm <- undirected_factor_model(X, S)  expected_edges(ufm) #> [1] 1331491 expected_degree(ufm) #> [1] 1331.491 eigs_sym(ufm) #> $values #> [1] 1609.08690   92.34439   30.58269    5.64930   -2.40076 #>  #> $vectors #>                  [,1]          [,2]          [,3]          [,4]          [,5] #>    [1,] -2.362412e-02  8.600604e-03  1.569893e-04 -2.176249e-02 -1.728738e-02 #>    [2,] -1.903704e-02 -1.152900e-02 -2.105977e-02 -2.132740e-02 -1.205349e-02 #>    [3,] -1.682949e-02  2.488380e-02  4.073665e-03  8.319956e-03  2.395380e-02 #>    [4,] -3.942610e-02  2.949963e-02  1.828943e-02  1.720409e-03  4.777137e-02 #>    [5,] -3.871789e-02 -1.579049e-02  5.571673e-02 -3.687364e-02  1.831122e-02 #>    [6,] -2.821121e-02  2.873021e-02  2.137375e-02 -2.219757e-02 -2.252127e-02 #>    [7,] -4.163364e-02 -6.913170e-03 -6.844007e-03 -2.792694e-02  1.176408e-02 #>    [8,] -3.240854e-02  1.140251e-02 -5.850636e-02 -5.001863e-02  1.256180e-02 #>    [9,] -1.035419e-02 -1.383598e-04  3.135886e-02 -1.535459e-02 -5.370120e-03 #>   [10,] -4.061345e-02 -5.283944e-02  2.826610e-02 -6.217491e-03 -3.721235e-02 #>   [11,] -2.131502e-02  3.082086e-02  3.153514e-02  3.016821e-02 -1.781264e-02 #>   [12,] -1.235130e-02 -2.299476e-02 -2.336479e-03 -6.981781e-03 -2.436114e-02 #>   [13,] -5.980299e-02 -1.087508e-01  1.019044e-02 -2.686637e-02 -3.063240e-03 #>   [14,] -2.362412e-02  8.600604e-03  1.569893e-04 -2.176249e-02 -1.728738e-02 #>   [15,] -3.004882e-02 -3.914468e-02 -1.165467e-02  4.715726e-02 -1.482596e-02 #>   [16,]  2.047533e-20 -1.318593e-20  4.511014e-19  8.654023e-19 -3.564017e-18 #>   [17,] -2.918079e-02  1.889040e-03  1.737186e-03  1.338174e-03 -4.073346e-04 #>   [18,] -3.209654e-02  1.076636e-02 -6.082355e-02  1.028487e-02 -6.954474e-03 #>   [19,] -3.025926e-02 -5.270108e-02 -3.092761e-03  9.137097e-03 -3.184223e-02 #>   [20,] -2.611254e-02  3.739406e-02  6.131381e-02 -8.287040e-03 -4.006280e-02 #>   [21,] -3.612792e-02 -5.877650e-02  8.046250e-04 -2.806574e-02  4.554087e-03 #>   [22,] -3.046237e-02 -2.431598e-02 -1.558219e-02 -3.542958e-02  4.122287e-02 #>   [23,] -3.694501e-02 -4.123533e-02 -2.181605e-02 -5.208520e-03 -1.953459e-02 #>   [24,] -4.957717e-02  9.761714e-04  6.213772e-02  3.093250e-02 -3.066385e-02 #>   [25,] -4.245073e-02  1.062800e-02 -2.946469e-02 -5.069723e-03 -1.232459e-02 #>   [26,] -2.826215e-02 -2.984468e-02  3.060258e-02  7.642905e-04 -1.285121e-02 #>   [27,] -3.689406e-02  1.733957e-02 -3.104488e-02 -2.817038e-02 -2.920464e-02 #>   [28,] -2.049794e-02  1.327968e-02  5.415582e-02  7.310985e-03  6.276037e-03 #>   [29,] -3.360838e-02 -2.299985e-02  2.362087e-02  6.188511e-02  2.104511e-02 #>   [30,] -3.230698e-02 -2.790039e-03 -5.226164e-02 -2.773530e-02 -2.397075e-02 #>   [31,] -3.662569e-02  7.002804e-05 -4.518458e-02  4.854846e-02  5.103052e-02 #>   [32,] -2.254566e-02  6.319073e-02  4.986936e-03 -2.956141e-02  1.414752e-02 #>   [33,] -4.719031e-02 -1.362473e-02 -5.263811e-03 -4.826285e-03  2.864412e-02 #>   [34,] -1.014375e-02  1.341804e-02  2.279696e-02  2.266557e-02  1.164616e-02 #>   [35,] -3.392037e-02 -2.236370e-02  2.593806e-02  1.581612e-03  4.056138e-02 #>   [36,] -3.127946e-02 -6.774810e-03 -3.820287e-02 -1.257236e-02  1.713420e-02 #>   [37,] -2.729257e-02 -3.003513e-03  5.023914e-02 -2.277146e-02 -3.496515e-02 #>   [38,] -4.019257e-02 -2.572664e-02  1.114229e-02  6.982283e-02 -3.179799e-03 #>   [39,] -3.725700e-02 -4.059918e-02 -1.949886e-02 -6.551202e-02 -1.831057e-05 #>   [40,] -5.274698e-02 -2.033630e-02 -3.683615e-03  1.827437e-02  4.552417e-02 #>   [41,] -3.127946e-02 -6.774810e-03 -3.820287e-02 -1.257236e-02  1.713420e-02 #>   [42,] -3.067281e-02 -3.787238e-02 -7.020285e-03 -7.344974e-02  2.420660e-02 #>   [43,] -2.454277e-02  4.033433e-02 -2.870840e-02 -2.118860e-02 -4.843499e-03 #>   [44,] -1.326994e-02  8.738964e-03 -3.120187e-02 -6.407897e-03 -1.191726e-02 #>   [45,] -1.570042e-02  6.706478e-03  2.437715e-02  4.576623e-02  2.852620e-02 #>   [46,] -2.454277e-02  4.033433e-02 -2.870840e-02 -2.118860e-02 -4.843499e-03 #>   [47,] -1.811840e-02 -4.326273e-02  7.805622e-03 -2.190128e-02 -2.449737e-02 #>   [48,] -3.963653e-02  1.594323e-02  2.685133e-02 -3.629975e-02  3.075510e-02 #>   [49,] -3.365899e-02  4.976760e-02  8.147329e-03  1.663991e-02  4.790761e-02 #>   [50,] -1.913860e-02  2.663548e-03 -2.730449e-02 -4.361074e-02  2.447906e-02 #>   [51,] -5.890384e-02 -3.146959e-03  1.075554e-01  3.074085e-02  5.070980e-03 #>   [52,] -3.974542e-02 -1.180572e-02  4.165795e-02 -5.203657e-02 -2.279373e-02 #>   [53,] -2.815327e-02 -2.095731e-03  1.579596e-02  1.650111e-02  4.069762e-02 #>   [54,] -2.541080e-02 -6.993939e-04 -4.210026e-02  2.463048e-02 -1.926212e-02 #>   [55,] -3.279129e-02 -4.054102e-02  4.624155e-02  3.902789e-02  4.513378e-02 #>   [56,] -3.538826e-02  9.184582e-02  9.750261e-02 -3.144055e-02 -1.399802e-02 #>   [57,] -3.499884e-02 -7.695382e-02  2.110811e-02  9.380535e-03  9.126484e-03 #>   [58,] -2.377662e-02 -3.578174e-02  3.141104e-03 -2.108396e-02  2.891523e-02 #>   [59,] -2.341369e-02  2.215701e-02 -8.404915e-03  1.625768e-02 -2.711017e-04 #>   [60,] -4.163364e-02 -6.913170e-03 -6.844007e-03 -2.792694e-02  1.176408e-02 #>   [61,] -2.146752e-02 -1.356149e-02  3.451925e-02  3.084673e-02  2.838997e-02 #>   [62,] -3.392037e-02 -2.236370e-02  2.593806e-02  1.581612e-03  4.056138e-02 #>   [63,] -2.367507e-02 -4.997429e-02  9.385818e-03  1.199377e-03 -7.617327e-03 #>   [64,] -3.781270e-02  4.907329e-02 -5.991028e-02 -2.759650e-02 -1.676076e-02 #>   [65,] -2.949278e-02  2.525188e-03  4.054376e-03 -5.896533e-02  1.910894e-02 #>   [66,] -2.562123e-02 -1.425580e-02 -3.353835e-02 -1.338968e-02 -3.627840e-02 #>   [67,] -3.448340e-02  2.536727e-02  6.577982e-03  4.604365e-02 -6.626245e-02 #>   [68,] -3.020832e-02  5.873811e-03 -1.232159e-02 -1.382476e-02 -4.151228e-02 #>   [69,] -1.214086e-02 -9.438358e-03 -1.089838e-02  3.103838e-02 -7.344861e-03 #>   [70,] -2.897035e-02  1.544544e-02 -6.824718e-03  3.935834e-02  1.660894e-02 #>   [71,] -4.465828e-02 -2.578480e-02 -5.459812e-02 -3.471708e-02 -4.833189e-02 #>   [72,] -1.575835e-02  3.753242e-02  2.995494e-02  7.067548e-03 -3.469268e-02 #>   [73,] -1.326994e-02  8.738964e-03 -3.120187e-02 -6.407897e-03 -1.191726e-02 #>   [74,] -3.701544e-02  3.752733e-02  5.591229e-02  7.593444e-02  1.071357e-02 #>   [75,] -5.113359e-02 -7.626394e-04 -8.188332e-02 -1.104253e-02 -1.900797e-02 #>   [76,] -1.245285e-02 -8.802209e-03 -8.581193e-03 -2.926512e-02  1.217141e-02 #>   [77,] -4.386068e-02  9.401158e-02  3.652208e-02  6.067995e-04 -3.665116e-03 #>   [78,] -1.127283e-02  3.159536e-02  2.493468e-03 -1.478070e-02  7.073760e-03 #>   [79,] -2.643832e-02  3.285377e-03 -5.615903e-02  9.467544e-03 -6.036707e-02 #>   [80,] -3.565610e-02  2.691120e-02 -2.554801e-02  2.501272e-02  2.891659e-02 #>   [81,] -2.508502e-02  3.340929e-02  7.537258e-02  6.875899e-03  1.042150e-03 #>   [82,] -2.049794e-02  1.327968e-02  5.415582e-02  7.310985e-03  6.276037e-03 #>   [83,] -1.790796e-02 -2.970632e-02 -7.562825e-04  1.611888e-02 -7.481094e-03 #>   [84,] -1.872505e-02 -1.216515e-02 -2.337696e-02  3.897610e-02 -3.156977e-02 #>   [85,] -4.704514e-02 -1.118389e-02  1.280341e-02  1.041706e-03 -1.076399e-01 #>   [86,] -2.847259e-02 -4.340109e-02  3.916448e-02 -3.725587e-02 -2.986749e-02 #>   [87,] -3.596809e-02  2.754735e-02 -2.323082e-02 -3.529078e-02  4.843286e-02 #>   [88,] -2.459371e-02 -1.824057e-02 -1.947958e-02  1.773261e-03  4.826552e-03 #>   [89,] -2.146752e-02 -1.356149e-02  3.451925e-02  3.084673e-02  2.838997e-02 #>   [90,] -2.907924e-02 -1.230351e-02  7.981900e-03  2.362151e-02 -3.693989e-02 #>   [91,] -2.718368e-02  2.474544e-02  3.543253e-02 -7.034632e-03  1.858368e-02 #>   [92,] -3.830401e-02  1.007231e-01  3.494188e-02 -2.249386e-02 -2.054516e-02 #>   [93,] -2.912985e-02  6.046393e-02 -7.491643e-03 -2.162369e-02 -1.007739e-02 #>   [94,] -2.270548e-02 -2.313312e-02  2.902238e-02 -2.233637e-02 -2.973126e-02 #>   [95,] -4.703781e-02  3.075761e-02 -8.247925e-03 -5.504809e-03 -1.755848e-02 #>   [96,] -4.679410e-02 -5.827871e-02  3.448068e-02 -1.037238e-01  1.870024e-02 #>   [97,] -2.469527e-02 -4.048016e-03 -2.572429e-02 -2.051008e-02  4.135910e-02 #>   [98,] -1.337149e-02  2.293151e-02 -3.744659e-02 -2.869124e-02  2.461529e-02 #>   [99,] -3.658207e-02  1.670342e-02 -3.336207e-02  3.213312e-02 -4.872091e-02 #>  [100,] -4.194564e-02 -6.277021e-03 -4.526817e-03 -8.823044e-02  3.128035e-02 #>  [101,] -1.682949e-02  2.488380e-02  4.073665e-03  8.319956e-03  2.395380e-02 #>  [102,] -3.381882e-02 -3.655625e-02  3.218278e-02  2.386495e-02  4.028830e-03 #>  [103,] -3.463590e-02 -1.901508e-02  9.562096e-03  4.672217e-02 -2.005984e-02 #>  [104,] -1.903704e-02 -1.152900e-02 -2.105977e-02 -2.132740e-02 -1.205349e-02 #>  [105,] -1.577148e-19  2.176418e-19 -4.664374e-18 -1.038860e-17  4.273099e-17 #>  [106,] -3.601904e-02 -3.102755e-02 -1.400199e-02 -1.232892e-02  5.810292e-02 #>  [107,] -3.413081e-02 -3.592010e-02  3.449997e-02 -3.643855e-02  2.354511e-02 #>  [108,] -3.209654e-02  1.076636e-02 -6.082355e-02  1.028487e-02 -6.954474e-03 #>  [109,] -2.729257e-02 -3.003513e-03  5.023914e-02 -2.277146e-02 -3.496515e-02 #>  [110,] -3.122851e-02  5.180008e-02 -4.743170e-02 -3.553422e-02  7.464148e-03 #>  [111,] -4.255961e-02 -1.712095e-02 -1.465807e-02 -2.080655e-02 -6.587342e-02 #>  [112,] -6.685746e-03  1.146576e-02 -1.872329e-02 -1.434562e-02  1.230765e-02 #>  [113,] -1.872505e-02 -1.216515e-02 -2.337696e-02  3.897610e-02 -3.156977e-02 #>  [114,] -1.769753e-02 -1.614992e-02 -9.318186e-03  5.413904e-02  9.535183e-03 #>  [115,] -1.682949e-02  2.488380e-02  4.073665e-03  8.319956e-03  2.395380e-02 #>  [116,] -4.839715e-02  4.137374e-02  7.321238e-02  4.541691e-02 -3.576150e-02 #>  [117,] -2.449216e-02 -3.243312e-02 -1.323486e-02  2.405660e-02 -3.170600e-02 #>  [118,] -1.672794e-02  1.069125e-02  1.031838e-02  3.060329e-02 -1.257875e-02 #>  [119,] -5.767105e-03 -2.026797e-02  1.014210e-02 -1.491950e-02 -1.362328e-04 #>  [120,] -3.117790e-02 -2.096736e-02 -3.195815e-02  9.710981e-03 -1.939835e-02 #>  [121,] -1.995568e-02  2.020472e-02 -4.992517e-02 -2.075351e-02  3.903879e-04 #>  [122,] -2.249505e-02 -9.576718e-03  2.046048e-02  1.568379e-02 -1.271498e-02 #>  [123,] -2.826215e-02 -2.984468e-02  3.060258e-02  7.642905e-04 -1.285121e-02 #>  [124,] -2.821121e-02  2.873021e-02  2.137375e-02 -2.219757e-02 -2.252127e-02 #>  [125,] -2.949278e-02  2.525188e-03  4.054376e-03 -5.896533e-02  1.910894e-02 #>  [126,] -3.699562e-02  3.153212e-02 -3.728960e-02 -5.045372e-02  7.327915e-03 #>  [127,] -5.123514e-02  1.342991e-02 -8.812803e-02 -3.332587e-02  1.752459e-02 #>  [128,] -3.030987e-02  2.006636e-02 -1.856630e-02 -3.610810e-02 -4.979732e-03 #>  [129,] -2.049794e-02  1.327968e-02  5.415582e-02  7.310985e-03  6.276037e-03 #>  [130,] -1.014375e-02  1.341804e-02  2.279696e-02  2.266557e-02  1.164616e-02 #>  [131,] -2.954373e-02 -5.604971e-02  1.328320e-02 -3.600346e-02  2.877899e-02 #>  [132,] -6.685746e-03  1.146576e-02 -1.872329e-02 -1.434562e-02  1.230765e-02 #>  [133,] -1.245285e-02 -8.802209e-03 -8.581193e-03 -2.926512e-02  1.217141e-02 #>  [134,] -1.672794e-02  1.069125e-02  1.031838e-02  3.060329e-02 -1.257875e-02 #>  [135,] -2.664143e-02  3.167048e-02 -6.864846e-02 -3.509913e-02  1.269803e-02 #>  [136,] -2.928235e-02  1.608159e-02 -4.507528e-03 -2.094516e-02  3.612522e-02 #>  [137,] -3.036082e-02 -3.850853e-02 -9.337475e-03 -1.314624e-02  4.690320e-03 #>  [138,] -2.341369e-02  2.215701e-02 -8.404915e-03  1.625768e-02 -2.711017e-04 #>  [139,] -2.999788e-02  1.943021e-02 -2.088349e-02  2.419540e-02 -2.449601e-02 #>  [140,] -4.168459e-02 -6.548806e-02  2.384821e-03 -4.965083e-03  2.143413e-02 #>  [141,] -4.137959e-02  2.327662e-02 -3.583408e-03 -6.322130e-03 -7.097108e-02 #>  [142,] -2.944218e-02 -7.024226e-02  1.952792e-02 -1.372012e-02 -7.753560e-03 #>  [143,] -1.214086e-02 -9.438358e-03 -1.089838e-02  3.103838e-02 -7.344861e-03 #>  [144,] -3.607698e-02 -2.016053e-04 -8.424204e-03 -5.102760e-02 -5.115965e-03 #>  [145,] -6.584191e-03 -2.726793e-03 -1.247858e-02  7.937721e-03 -2.422491e-02 #>  [146,] -4.137959e-02  2.327662e-02 -3.583408e-03 -6.322130e-03 -7.097108e-02 #>  [147,] -2.398706e-02 -4.933814e-02  1.170301e-02 -5.910412e-02  1.189895e-02 #>  [148,] -1.132377e-02 -2.697953e-02  1.172230e-02  8.181158e-03  1.674381e-02 #>  [149,] -4.213874e-02  9.991855e-03 -3.178188e-02  5.523378e-02 -3.184087e-02 #>  [150,] -6.214537e-02 -2.837832e-02 -7.247821e-02  5.744212e-02 -2.178043e-02 #>  [151,] -3.057125e-02 -5.206494e-02 -7.755714e-04 -5.116640e-02 -1.232596e-02 #>  [152,] -1.800952e-02 -1.551377e-02 -7.000997e-03 -6.164460e-03  2.905146e-02 #>  [153,] -2.933329e-02 -4.249330e-02  4.721300e-03  2.016698e-03  4.579527e-02 #>  [154,] -2.388551e-02 -6.353069e-02  1.794772e-02 -3.682078e-02 -2.463360e-02 #>  [155,] -2.346463e-02 -3.641789e-02  8.239139e-04  3.921954e-02  9.398950e-03 #>  [156,] -3.561248e-02  4.354459e-02 -1.372551e-02  8.597371e-03 -7.083484e-02 #>  [157,] -2.228461e-02  3.979685e-03  1.189857e-02  5.370395e-02  4.301296e-03 #>  [158,] -2.572279e-02 -6.324545e-05 -3.978307e-02 -3.567302e-02  2.541551e-04 #>  [159,] -5.657491e-02  1.307808e-02  4.573162e-02 -4.371662e-02  1.160072e-03 #>  [160,] -2.188840e-02 -4.067429e-02  5.164306e-02 -4.519359e-02 -5.642586e-03 #>  [161,] -6.685746e-03  1.146576e-02 -1.872329e-02 -1.434562e-02  1.230765e-02 #>  [162,] -2.044699e-02  7.185458e-02  4.492699e-02 -1.565088e-02 -3.394014e-03 #>  [163,] -1.730132e-02 -6.080390e-02  3.042630e-02 -4.475850e-02 -4.086985e-04 #>  [164,] -4.342032e-02 -1.621317e-02 -4.910125e-02  1.846602e-02  9.789338e-03 #>  [165,] -3.366632e-02  7.826096e-03  2.919866e-02  2.318643e-02 -4.217377e-02 #>  [166,] -5.199516e-02 -4.899303e-02  4.556619e-02 -3.673502e-02 -8.368742e-02 #>  [167,] -4.606123e-02 -3.180206e-02  1.503968e-02  3.261999e-02  3.321652e-02 #>  [168,] -2.454277e-02  4.033433e-02 -2.870840e-02 -2.118860e-02 -4.843499e-03 #>  [169,] -1.245285e-02 -8.802209e-03 -8.581193e-03 -2.926512e-02  1.217141e-02 #>  [170,] -2.713274e-02  8.332033e-02  2.620370e-02 -2.999649e-02  8.913632e-03 #>  [171,] -2.836371e-02 -1.565213e-02  2.435787e-02 -2.151905e-02  2.368134e-02 #>  [172,] -2.480415e-02 -3.179697e-02 -1.091767e-02 -3.624690e-02 -1.218972e-02 #>  [173,] -3.407987e-02  2.265479e-02  2.527114e-02 -5.940041e-02  1.387505e-02 #>  [174,] -2.152546e-02  1.726445e-02  4.009704e-02 -7.851954e-03 -3.482891e-02 #>  [175,] -4.060612e-02 -1.089794e-02  7.214768e-03 -1.276401e-02  5.286903e-02 #>  [176,] -2.490570e-02 -1.760442e-02 -1.716239e-02 -5.853024e-02  2.434283e-02 #>  [177,] -5.571334e-02  6.130847e-02 -8.171789e-02 -1.802414e-02  6.583953e-02 #>  [178,] -3.413081e-02 -3.592010e-02  3.449997e-02 -3.643855e-02  2.354511e-02 #>  [179,] -2.470259e-02 -4.598952e-02 -4.672958e-03 -1.396356e-02 -4.872228e-02 #>  [180,] -4.417301e-02 -3.669461e-02  6.354164e-02  8.510362e-03 -1.341290e-03 #>  [181,] -1.903704e-02 -1.152900e-02 -2.105977e-02 -2.132740e-02 -1.205349e-02 #>  [182,] -4.132165e-02 -7.549318e-03 -9.161197e-03  3.237655e-02 -7.752196e-03 #>  [183,] -2.965261e-02 -8.379866e-02  2.808982e-02 -5.174029e-02 -2.476984e-02 #>  [184,] -4.519320e-02  9.231666e-03  2.843153e-02 -1.319909e-02  4.763514e-02 #>  [185,] -1.224241e-02  4.754193e-03 -1.714310e-02  8.755042e-03  2.918769e-02 #>  [186,] -2.470259e-02 -4.598952e-02 -4.672958e-03 -1.396356e-02 -4.872228e-02 #>  [187,] -3.242836e-02  1.739773e-02  3.469553e-02  7.636953e-02  1.594745e-02 #>  [188,] -4.336937e-02  4.236173e-02 -5.833008e-02 -4.495839e-03  1.192862e-04 #>  [189,] -2.367507e-02 -4.997429e-02  9.385818e-03  1.199377e-03 -7.617327e-03 #>  [190,] -2.826215e-02 -2.984468e-02  3.060258e-02  7.642905e-04 -1.285121e-02 #>  [191,] -3.117790e-02 -2.096736e-02 -3.195815e-02  9.710981e-03 -1.939835e-02 #>  [192,] -3.576498e-02 -8.377538e-04 -1.074139e-02  9.275895e-03 -2.463224e-02 #>  [193,] -1.903704e-02 -1.152900e-02 -2.105977e-02 -2.132740e-02 -1.205349e-02 #>  [194,] -3.868806e-02 -3.390193e-02 -5.225080e-02  2.476910e-02 -1.212608e-01 #>  [195,] -3.494790e-02 -1.837893e-02  1.187929e-02 -1.358133e-02 -5.435674e-04 #>  [196,] -1.127283e-02  3.159536e-02  2.493468e-03 -1.478070e-02  7.073760e-03 #>  [197,] -1.153421e-02 -4.053593e-02  2.028420e-02 -2.983900e-02 -2.724657e-04 #>  [198,] -2.341369e-02  2.215701e-02 -8.404915e-03  1.625768e-02 -2.711017e-04 #>  [199,] -3.938248e-02  4.613302e-02  3.011193e-02 -1.469494e-02 -5.198006e-02 #>  [200,] -4.363075e-02 -2.976957e-02 -4.053935e-02 -1.955414e-02 -7.226939e-03 #>  [201,] -5.403589e-02 -8.848282e-02  4.834251e-05 -1.194686e-02 -2.927007e-03 #>  [202,] -2.912285e-02 -2.893690e-02 -3.840604e-03  4.003686e-02  6.281155e-02 #>  [203,] -4.729919e-02 -4.137369e-02  9.542807e-03 -2.056311e-02 -2.490471e-02 #>  [204,] -2.928968e-02 -2.585991e-02  1.654380e-02 -1.439865e-02 -5.395616e-02 #>  [205,] -1.682949e-02  2.488380e-02  4.073665e-03  8.319956e-03  2.395380e-02 #>  [206,] -2.459371e-02 -1.824057e-02 -1.947958e-02  1.773261e-03  4.826552e-03 #>  [207,] -4.587081e-03  2.012961e-02  2.121676e-02 -4.350863e-04 -5.233887e-03 #>  [208,] -4.454939e-02  1.964154e-03 -6.940474e-02 -1.898025e-02  5.216940e-03 #>  [209,] -4.071500e-02 -3.864689e-02  2.202139e-02 -2.850083e-02 -6.798002e-04 #>  [210,] -6.584191e-03 -2.726793e-03 -1.247858e-02  7.937721e-03 -2.422491e-02 #>  [211,] -1.117127e-02  1.740281e-02  8.738182e-03  7.502634e-03 -2.945879e-02 #>  [212,] -3.673457e-02 -2.767892e-02 -3.037796e-02  3.281164e-02 -2.518309e-03 #>  [213,] -3.355743e-02  3.557505e-02  1.439204e-02  3.892325e-02  1.137506e-02 #>  [214,] -3.036082e-02 -3.850853e-02 -9.337475e-03 -1.314624e-02  4.690320e-03 #>  [215,] -1.811840e-02 -4.326273e-02  7.805622e-03 -2.190128e-02 -2.449737e-02 #>  [216,] -4.071500e-02 -3.864689e-02  2.202139e-02 -2.850083e-02 -6.798002e-04 #>  [217,] -4.245806e-02 -3.131350e-02 -8.413355e-03  1.476793e-03 -1.024060e-01 #>  [218,] -4.779696e-02  1.747284e-02 -3.644639e-02  5.605110e-02  2.157173e-02 #>  [219,] -2.836371e-02 -1.565213e-02  2.435787e-02 -2.151905e-02  2.368134e-02 #>  [220,] -5.760889e-02  2.425952e-02 -1.091685e-01  1.263201e-02  1.031596e-02 #>  [221,] -1.132377e-02 -2.697953e-02  1.172230e-02  8.181158e-03  1.674381e-02 #>  [222,] -1.585991e-02  5.172497e-02  2.371023e-02 -1.521579e-02  1.839873e-03 #>  [223,] -6.584191e-03 -2.726793e-03 -1.247858e-02  7.937721e-03 -2.422491e-02 #>  [224,] -1.494127e-02  1.999125e-02  5.257562e-02 -1.578967e-02 -1.060401e-02 #>  [225,] -2.765550e-02 -6.094226e-02  6.178516e-02 -6.011309e-02 -5.778818e-03 #>  [226,] -2.125708e-02 -5.086355e-06  2.595735e-02  6.886689e-02  4.540625e-02 #>  [227,] -1.682949e-02  2.488380e-02  4.073665e-03  8.319956e-03  2.395380e-02 #>  [228,] -3.117790e-02 -2.096736e-02 -3.195815e-02  9.710981e-03 -1.939835e-02 #>  [229,] -1.775546e-02  1.467602e-02 -3.740397e-03  1.544035e-02 -5.368370e-02 #>  [230,] -3.791426e-02  6.326584e-02 -6.615499e-02 -4.987984e-02  1.977179e-02 #>  [231,] -4.273160e-02  7.583426e-02  5.682557e-02  3.805308e-02  9.072813e-04 #>  [232,] -2.944218e-02 -7.024226e-02  1.952792e-02 -1.372012e-02 -7.753560e-03 #>  [233,] -3.991137e-02  4.040944e-02 -9.985033e-02 -4.150703e-02  7.807759e-04 #>  [234,] -1.769753e-02 -1.614992e-02 -9.318186e-03  5.413904e-02  9.535183e-03 #>  [235,] -3.442547e-02 -5.458673e-03  1.000192e-03  8.474233e-02 -3.043566e-03 #>  [236,] -2.454277e-02  4.033433e-02 -2.870840e-02 -2.118860e-02 -4.843499e-03 #>  [237,] -1.693838e-02 -2.865153e-03  1.888028e-02 -7.416867e-03 -2.959503e-02 #>  [238,] -2.131502e-02  3.082086e-02  3.153514e-02  3.016821e-02 -1.781264e-02 #>  [239,] -5.594360e-02  5.374728e-02  2.004590e-02  7.034386e-02  5.220890e-02 #>  [240,] -2.454277e-02  4.033433e-02 -2.870840e-02 -2.118860e-02 -4.843499e-03 #>  [241,] -1.494127e-02  1.999125e-02  5.257562e-02 -1.578967e-02 -1.060401e-02 #>  [242,] -2.259660e-02  4.615833e-03  1.421576e-02 -6.599546e-03  2.381757e-02 #>  [243,] -5.662552e-02  8.584552e-02  3.025807e-02 -8.896182e-02  2.802257e-02 #>  [244,] -2.238616e-02  1.817224e-02  5.653861e-03  3.142062e-02  4.083385e-02 #>  [245,] -1.821996e-02 -2.907018e-02  1.560907e-03 -4.418462e-02  1.203518e-02 #>  [246,] -1.808982e-19  1.390881e-19 -4.044693e-18 -8.487204e-18  3.409298e-17 #>  [247,] -2.398706e-02 -4.933814e-02  1.170301e-02 -5.910412e-02  1.189895e-02 #>  [248,] -1.800952e-02 -1.551377e-02 -7.000997e-03 -6.164460e-03  2.905146e-02 #>  [249,] -3.240854e-02  1.140251e-02 -5.850636e-02 -5.001863e-02  1.256180e-02 #>  [250,] -3.127946e-02 -6.774810e-03 -3.820287e-02 -1.257236e-02  1.713420e-02 #>  [251,] -2.912985e-02  6.046393e-02 -7.491643e-03 -2.162369e-02 -1.007739e-02 #>  [252,] -2.398706e-02 -4.933814e-02  1.170301e-02 -5.910412e-02  1.189895e-02 #>  [253,] -2.800077e-02  4.228661e-02  1.281185e-02  1.582259e-02 -5.504989e-03 #>  [254,] -1.214086e-02 -9.438358e-03 -1.089838e-02  3.103838e-02 -7.344861e-03 #>  [255,] -2.249505e-02 -9.576718e-03  2.046048e-02  1.568379e-02 -1.271498e-02 #>  [256,] -3.295079e-02  4.477473e-03  4.557463e-02 -2.195413e-02  1.844745e-02 #>  [257,] -5.474409e-02 -4.319270e-02 -3.737896e-02  2.664718e-02  2.653315e-02 #>  [258,] -2.744507e-02 -4.738586e-02  5.322326e-02 -2.209293e-02  1.123746e-02 #>  [259,] -1.893549e-02 -2.572155e-02 -1.481506e-02  9.559395e-04 -4.858604e-02 #>  [260,] -2.162701e-02  3.145700e-02  3.385233e-02 -3.013529e-02  1.703640e-03 #>  [261,] -3.112696e-02  3.760753e-02 -4.118698e-02 -1.325088e-02 -2.906840e-02 #>  [262,] -2.131502e-02  3.082086e-02  3.153514e-02  3.016821e-02 -1.781264e-02 #>  [263,] -2.356619e-02 -2.222534e-02 -5.420800e-03  1.693620e-02  4.593150e-02 #>  [264,] -4.872293e-02  7.265061e-03 -4.426046e-02  6.317150e-02 -5.606577e-02 #>  [265,] -4.173520e-02  7.279381e-03 -1.308872e-02 -5.021028e-02  4.829663e-02 #>  [266,] -3.565610e-02  2.691120e-02 -2.554801e-02  2.501272e-02  2.891659e-02 #>  [267,] -2.572279e-02 -6.324545e-05 -3.978307e-02 -3.567302e-02  2.541551e-04 #>  [268,] -5.048882e-02 -5.669094e-02  3.692336e-02  9.316693e-02  5.466896e-02 #>  [269,] -4.224029e-02  2.418441e-02 -3.802659e-02  3.295044e-02  4.691684e-03 #>  [270,] -2.821121e-02  2.873021e-02  2.137375e-02 -2.219757e-02 -2.252127e-02 #>  [271,] -3.871789e-02 -1.579049e-02  5.571673e-02 -3.687364e-02  1.831122e-02 #>  [272,] -3.020832e-02  5.873811e-03 -1.232159e-02 -1.382476e-02 -4.151228e-02 #>  [273,] -6.584191e-03 -2.726793e-03 -1.247858e-02  7.937721e-03 -2.422491e-02 #>  [274,] -1.821996e-02 -2.907018e-02  1.560907e-03 -4.418462e-02  1.203518e-02 #>  [275,] -1.214086e-02 -9.438358e-03 -1.089838e-02  3.103838e-02 -7.344861e-03 #>  [276,] -2.469527e-02 -4.048016e-03 -2.572429e-02 -2.051008e-02  4.135910e-02 #>  [277,] -2.562123e-02 -1.425580e-02 -3.353835e-02 -1.338968e-02 -3.627840e-02 #>  [278,] -2.826215e-02 -2.984468e-02  3.060258e-02  7.642905e-04 -1.285121e-02 #>  [279,] -1.245285e-02 -8.802209e-03 -8.581193e-03 -2.926512e-02  1.217141e-02 #>  [280,] -1.132377e-02 -2.697953e-02  1.172230e-02  8.181158e-03  1.674381e-02 #>  [281,] -2.146752e-02 -1.356149e-02  3.451925e-02  3.084673e-02  2.838997e-02 #>  [282,] -3.494790e-02 -1.837893e-02  1.187929e-02 -1.358133e-02 -5.435674e-04 #>  [283,] -3.355743e-02  3.557505e-02  1.439204e-02  3.892325e-02  1.137506e-02 #>  [284,]  3.102990e-19 -2.206061e-19  6.494227e-18  1.420699e-17 -5.971298e-17 #>  [285,] -2.551968e-02 -2.844835e-02 -2.729364e-02  8.893660e-03 -7.281095e-02 #>  [286,] -2.718368e-02  2.474544e-02  3.543253e-02 -7.034632e-03  1.858368e-02 #>  [287,] -2.331213e-02  7.964455e-03 -2.160201e-03  3.854101e-02 -3.680365e-02 #>  [288,] -1.245285e-02 -8.802209e-03 -8.581193e-03 -2.926512e-02  1.217141e-02 #>  [289,] -3.376787e-02  2.201865e-02  2.295395e-02  9.030881e-04 -5.641222e-03 #>  [290,] -1.214086e-02 -9.438358e-03 -1.089838e-02  3.103838e-02 -7.344861e-03 #>  [291,] -9.174163e-03  4.025921e-02  4.243352e-02 -8.701726e-04 -1.046777e-02 #>  [292,] -2.886880e-02  1.252891e-03 -5.800043e-04  6.164167e-02 -1.992361e-02 #>  [293,] -1.214086e-02 -9.438358e-03 -1.089838e-02  3.103838e-02 -7.344861e-03 #>  [294,] -5.135652e-02  3.361768e-02 -1.170857e-03  7.077895e-02  5.744279e-02 #>  [295,] -3.086591e-02 -2.160351e-02 -3.427534e-02  7.001448e-02 -3.891463e-02 #>  [296,] -3.835495e-02  4.214825e-02  4.417071e-02  4.680018e-04 -1.087511e-02 #>  [297,] -4.821783e-02 -9.639963e-03 -1.932259e-02 -1.998922e-02 -1.246083e-02 #>  [298,] -1.730132e-02 -6.080390e-02  3.042630e-02 -4.475850e-02 -4.086985e-04 #>  [299,] -2.933329e-02 -4.249330e-02  4.721300e-03  2.016698e-03  4.579527e-02 #>  [300,] -2.346463e-02 -3.641789e-02  8.239139e-04  3.921954e-02  9.398950e-03 #>  [301,] -2.352257e-02 -5.591947e-03  6.401703e-03  5.208532e-04 -5.381993e-02 #>  [302,] -1.224241e-02  4.754193e-03 -1.714310e-02  8.755042e-03  2.918769e-02 #>  [303,] -5.254387e-02 -4.872140e-02  8.805814e-03  6.284105e-02 -2.754094e-02 #>  [304,] -2.918079e-02  1.889040e-03  1.737186e-03  1.338174e-03 -4.073346e-04 #>  [305,] -4.148114e-02  3.746917e-02 -9.828122e-03 -2.860547e-02 -3.443852e-02 #>  [306,] -2.362412e-02  8.600604e-03  1.569893e-04 -2.176249e-02 -1.728738e-02 #>  [307,] -3.684345e-02 -5.542788e-02 -1.557134e-02  1.707482e-02 -5.606714e-02 #>  [308,] -2.989632e-02  5.237662e-03 -1.463878e-02  4.647873e-02 -6.102856e-02 #>  [309,] -4.234917e-02 -3.564547e-03 -2.321997e-02  1.721362e-02 -4.885715e-02 #>  [310,] -2.480415e-02 -3.179697e-02 -1.091767e-02 -3.624690e-02 -1.218972e-02 #>  [311,] -2.372568e-02  2.279315e-02 -6.087725e-03 -4.404582e-02  1.924517e-02 #>  [312,] -3.274035e-02  1.803388e-02  3.701272e-02  1.606603e-02  3.546373e-02 #>  [313,] -3.279829e-02  4.885982e-02  4.259051e-02 -2.263266e-02 -2.775515e-02 #>  [314,] -3.219810e-02  2.495891e-02 -6.706826e-02 -1.199847e-02  2.957808e-02 #>  [315,] -5.124247e-02 -2.851159e-02 -6.707670e-02 -2.677936e-02 -7.255679e-02 #>  [316,] -5.767105e-03 -2.026797e-02  1.014210e-02 -1.491950e-02 -1.362328e-04 #>  [317,] -1.245285e-02 -8.802209e-03 -8.581193e-03 -2.926512e-02  1.217141e-02 #>  [318,] -4.729919e-02 -4.137369e-02  9.542807e-03 -2.056311e-02 -2.490471e-02 #>  [319,] -1.775546e-02  1.467602e-02 -3.740397e-03  1.544035e-02 -5.368370e-02 #>  [320,] -1.214086e-02 -9.438358e-03 -1.089838e-02  3.103838e-02 -7.344861e-03 #>  [321,] -5.749355e-02  4.481180e-02  1.686622e-02 -4.314274e-02  1.360395e-02 #>  [322,] -1.872505e-02 -1.216515e-02 -2.337696e-02  3.897610e-02 -3.156977e-02 #>  [323,] -3.030987e-02  2.006636e-02 -1.856630e-02 -3.610810e-02 -4.979732e-03 #>  [324,] -4.606123e-02 -3.180206e-02  1.503968e-02  3.261999e-02  3.321652e-02 #>  [325,] -4.132165e-02 -7.549318e-03 -9.161197e-03  3.237655e-02 -7.752196e-03 #>  [326,] -2.341369e-02  2.215701e-02 -8.404915e-03  1.625768e-02 -2.711017e-04 #>  [327,] -3.020832e-02  5.873811e-03 -1.232159e-02 -1.382476e-02 -4.151228e-02 #>  [328,] -1.703993e-02  1.132740e-02  1.263557e-02 -2.970021e-02  6.937527e-03 #>  [329,] -1.224241e-02  4.754193e-03 -1.714310e-02  8.755042e-03  2.918769e-02 #>  [330,] -1.672794e-02  1.069125e-02  1.031838e-02  3.060329e-02 -1.257875e-02 #>  [331,] -3.623680e-02 -8.652545e-02  1.561124e-02 -4.380257e-02 -4.899474e-02 #>  [332,] -1.913860e-02  2.663548e-03 -2.730449e-02 -4.361074e-02  2.447906e-02 #>  [333,] -4.148114e-02  3.746917e-02 -9.828122e-03 -2.860547e-02 -3.443852e-02 #>  [334,] -2.228461e-02  3.979685e-03  1.189857e-02  5.370395e-02  4.301296e-03 #>  [335,] -1.326994e-02  8.738964e-03 -3.120187e-02 -6.407897e-03 -1.191726e-02 #>  [336,] -3.469384e-02  1.181087e-02  1.513989e-02  8.023487e-03 -8.327872e-02 #>  [337,] -1.892816e-02  1.621995e-02 -3.586639e-02 -5.590576e-03  4.149534e-02 #>  [338,] -3.771115e-02  3.488074e-02 -5.366556e-02 -5.313160e-03 -5.329331e-02 #>  [339,] -5.657491e-02  1.307808e-02  4.573162e-02 -4.371662e-02  1.160072e-03 #>  [340,] -1.785702e-02  2.886857e-02 -9.985111e-03 -6.842983e-03 -1.715115e-02 #>  [341,] -4.687832e-02 -1.426088e-02 -7.581001e-03  5.547721e-02  9.127848e-03 #>  [342,]  8.542648e-20 -8.771792e-20  2.500985e-18  5.140922e-18 -2.200381e-17 #>  [343,] -3.300173e-02 -5.409742e-02  5.480346e-02  1.007728e-03  2.811750e-02 #>  [344,] -4.924536e-02 -5.655192e-03 -3.338136e-02 -3.515216e-02 -5.356578e-02 #>  [345,] -2.264755e-02 -5.395906e-02  2.344459e-02  1.636232e-02  3.348762e-02 #>  [346,] -4.677676e-02 -2.845343e-02 -1.336287e-03  7.776055e-02 -2.740470e-02 #>  [347,] -4.535303e-02 -7.709218e-02  5.246698e-02 -5.974053e-03  3.756364e-03 #>  [348,] -3.295079e-02  4.477473e-03  4.557463e-02 -2.195413e-02  1.844745e-02 #>  [349,] -1.326994e-02  8.738964e-03 -3.120187e-02 -6.407897e-03 -1.191726e-02 #>  [350,] -1.014375e-02  1.341804e-02  2.279696e-02  2.266557e-02  1.164616e-02 #>  [351,] -2.800077e-02  4.228661e-02  1.281185e-02  1.582259e-02 -5.504989e-03 #>  [352,] -1.612129e-02 -2.040633e-02  4.150096e-02 -3.027409e-02 -5.506353e-03 #>  [353,] -5.193722e-02 -7.981897e-02  3.998840e-02  1.963667e-03 -2.046854e-02 #>  [354,] -1.800952e-02 -1.551377e-02 -7.000997e-03 -6.164460e-03  2.905146e-02 #>  [355,] -2.459371e-02 -1.824057e-02 -1.947958e-02  1.773261e-03  4.826552e-03 #>  [356,] -1.790796e-02 -2.970632e-02 -7.562825e-04  1.611888e-02 -7.481094e-03 #>  [357,] -2.438327e-02 -4.684165e-03 -2.804148e-02  3.979342e-02  2.184283e-02 #>  [358,] -1.214086e-02 -9.438358e-03 -1.089838e-02  3.103838e-02 -7.344861e-03 #>  [359,] -1.316838e-02 -5.453587e-03 -2.495716e-02  1.587544e-02 -4.844981e-02 #>  [360,] -2.541080e-02 -6.993939e-04 -4.210026e-02  2.463048e-02 -1.926212e-02 #>  [361,] -1.132377e-02 -2.697953e-02  1.172230e-02  8.181158e-03  1.674381e-02 #>  [362,] -3.182171e-02 -1.369985e-02  6.587812e-02  1.549214e-02  2.301985e-02 #>  [363,] -1.224241e-02  4.754193e-03 -1.714310e-02  8.755042e-03  2.918769e-02 #>  [364,] -2.789921e-02  2.809406e-02  1.905656e-02  3.810593e-02 -4.203754e-02 #>  [365,] -4.498276e-02  2.278807e-02  1.986963e-02  2.482107e-02  6.465142e-02 #>  [366,] -3.102540e-02  2.341498e-02 -3.494227e-02  9.032458e-03 -6.560096e-02 #>  [367,] -1.117127e-02  1.740281e-02  8.738182e-03  7.502634e-03 -2.945879e-02 #>  [368,] -3.494790e-02 -1.837893e-02  1.187929e-02 -1.358133e-02 -5.435674e-04 #>  [369,] -1.245285e-02 -8.802209e-03 -8.581193e-03 -2.926512e-02  1.217141e-02 #>  [370,] -3.361537e-02  6.640099e-02  1.996983e-02  2.245645e-04 -5.184383e-02 #>  [371,] -3.289984e-02  6.305237e-02  3.634580e-02 -4.491600e-02  8.777400e-03 #>  [372,] -2.356619e-02 -2.222534e-02 -5.420800e-03  1.693620e-02  4.593150e-02 #>  [373,] -3.489695e-02  4.019597e-02  2.650457e-03 -3.654319e-02 -1.021362e-02 #>  [374,] -1.382356e-19  2.343260e-19 -6.650884e-18 -1.351813e-17  5.857991e-17 #>  [375,] -3.899273e-02  8.675718e-03 -7.098494e-02 -4.208091e-02 -1.166310e-02 #>  [376,] -2.259660e-02  4.615833e-03  1.421576e-02 -6.599546e-03  2.381757e-02 #>  [377,] -3.360838e-02 -2.299985e-02  2.362087e-02  6.188511e-02  2.104511e-02 #>  [378,] -3.658207e-02  1.670342e-02 -3.336207e-02  3.213312e-02 -4.872091e-02 #>  [379,] -5.767105e-03 -2.026797e-02  1.014210e-02 -1.491950e-02 -1.362328e-04 #>  [380,] -2.718368e-02  2.474544e-02  3.543253e-02 -7.034632e-03  1.858368e-02 #>  [381,] -1.903704e-02 -1.152900e-02 -2.105977e-02 -2.132740e-02 -1.205349e-02 #>  [382,] -4.359963e-02  3.480054e-02  4.343371e-02  8.387216e-02 -1.351134e-02 #>  [383,] -4.946829e-02  2.872512e-02  4.733110e-02  4.666932e-02  2.288498e-02 #>  [384,] -2.438327e-02 -4.684165e-03 -2.804148e-02  3.979342e-02  2.184283e-02 #>  [385,] -3.570705e-02 -3.166370e-02 -1.631918e-02  4.797458e-02  3.858664e-02 #>  [386,] -2.367507e-02 -4.997429e-02  9.385818e-03  1.199377e-03 -7.617327e-03 #>  [387,] -3.673457e-02 -2.767892e-02 -3.037796e-02  3.281164e-02 -2.518309e-03 #>  [388,] -2.228461e-02  3.979685e-03  1.189857e-02  5.370395e-02  4.301296e-03 #>  [389,] -2.551968e-02 -2.844835e-02 -2.729364e-02  8.893660e-03 -7.281095e-02 #>  [390,] -2.999788e-02  1.943021e-02 -2.088349e-02  2.419540e-02 -2.449601e-02 #>  [391,] -4.384119e-02 -4.332597e-02 -3.197744e-02 -5.757430e-02 -2.424322e-02 #>  [392,] -3.166921e-02  3.068250e-02  6.289400e-02  1.481362e-02 -2.318276e-02 #>  [393,] -4.234917e-02 -3.564547e-03 -2.321997e-02  1.721362e-02 -4.885715e-02 #>  [394,] -2.702419e-02 -2.027305e-02  3.609945e-02  5.394739e-02  4.527001e-02 #>  [395,] -3.525989e-02 -1.774278e-02  1.419648e-02 -7.388483e-02  1.897271e-02 #>  [396,] -2.162701e-02  3.145700e-02  3.385233e-02 -3.013529e-02  1.703640e-03 #>  [397,] -4.627167e-02 -4.535846e-02  2.360158e-02 -5.400169e-03  1.620024e-02 #>  [398,] -1.245285e-02 -8.802209e-03 -8.581193e-03 -2.926512e-02  1.217141e-02 #>  [399,] -2.826215e-02 -2.984468e-02  3.060258e-02  7.642905e-04 -1.285121e-02 #>  [400,] -5.616136e-02 -1.750622e-03  4.965914e-02  3.887022e-02 -5.488876e-02 #>  [401,] -4.988917e-02  1.612320e-03  6.445491e-02 -2.937100e-02 -1.114757e-02 #>  [402,] -2.367507e-02 -4.997429e-02  9.385818e-03  1.199377e-03 -7.617327e-03 #>  [403,] -3.376787e-02  2.201865e-02  2.295395e-02  9.030881e-04 -5.641222e-03 #>  [404,] -4.050456e-02 -2.509049e-02  1.345948e-02  9.519332e-03  1.633648e-02 #>  [405,] -2.836371e-02 -1.565213e-02  2.435787e-02 -2.151905e-02  2.368134e-02 #>  [406,] -6.685746e-03  1.146576e-02 -1.872329e-02 -1.434562e-02  1.230765e-02 #>  [407,] -1.892816e-02  1.621995e-02 -3.586639e-02 -5.590576e-03  4.149534e-02 #>  [408,] -1.892816e-02  1.621995e-02 -3.586639e-02 -5.590576e-03  4.149534e-02 #>  [409,] -4.870914e-02  4.200989e-02  7.552957e-02 -1.488659e-02 -1.624523e-02 #>  [410,] -4.611917e-02 -9.761136e-04  2.061747e-02 -6.078693e-03 -3.000236e-02 #>  [411,] -5.448270e-02  2.893860e-02 -5.516969e-02  4.170548e-02  3.387937e-02 #>  [412,] -2.249505e-02 -9.576718e-03  2.046048e-02  1.568379e-02 -1.271498e-02 #>  [413,] -1.800952e-02 -1.551377e-02 -7.000997e-03 -6.164460e-03  2.905146e-02 #>  [414,] -4.412206e-02  2.188029e-02  5.431281e-02 -1.445150e-02 -1.101134e-02 #>  [415,] -2.949278e-02  2.525188e-03  4.054376e-03 -5.896533e-02  1.910894e-02 #>  [416,] -2.167796e-02 -2.711789e-02  4.308116e-02 -7.173430e-03  1.137369e-02 #>  [417,] -3.361537e-02  6.640099e-02  1.996983e-02  2.245645e-04 -5.184383e-02 #>  [418,] -2.800077e-02  4.228661e-02  1.281185e-02  1.582259e-02 -5.504989e-03 #>  [419,] -4.509165e-02 -4.960885e-03  3.467624e-02  9.084246e-03  1.110259e-02 #>  [420,] -1.245285e-02 -8.802209e-03 -8.581193e-03 -2.926512e-02  1.217141e-02 #>  [421,] -4.988917e-02  1.612320e-03  6.445491e-02 -2.937100e-02 -1.114757e-02 #>  [422,] -3.041143e-02  3.425891e-02 -2.481102e-02 -5.839144e-02  3.155282e-02 #>  [423,] -2.367507e-02 -4.997429e-02  9.385818e-03  1.199377e-03 -7.617327e-03 #>  [424,] -3.617853e-02  1.399095e-02 -1.466892e-02 -7.331094e-02  3.141659e-02 #>  [425,] -2.815327e-02 -2.095731e-03  1.579596e-02  1.650111e-02  4.069762e-02 #>  [426,] -2.653988e-02  1.747793e-02 -6.240374e-02 -1.281579e-02 -2.383452e-02 #>  [427,] -2.999788e-02  1.943021e-02 -2.088349e-02  2.419540e-02 -2.449601e-02 #>  [428,] -3.678518e-02  4.508852e-02 -4.585150e-02 -1.243356e-02  2.434419e-02 #>  [429,] -2.367507e-02 -4.997429e-02  9.385818e-03  1.199377e-03 -7.617327e-03 #>  [430,] -3.355743e-02  3.557505e-02  1.439204e-02  3.892325e-02  1.137506e-02 #>  [431,] -2.356619e-02 -2.222534e-02 -5.420800e-03  1.693620e-02  4.593150e-02 #>  [432,] -1.224241e-02  4.754193e-03 -1.714310e-02  8.755042e-03  2.918769e-02 #>  [433,] -2.912985e-02  6.046393e-02 -7.491643e-03 -2.162369e-02 -1.007739e-02 #>  [434,] -2.664143e-02  3.167048e-02 -6.864846e-02 -3.509913e-02  1.269803e-02 #>  [435,] -1.790796e-02 -2.970632e-02 -7.562825e-04  1.611888e-02 -7.481094e-03 #>  [436,] -4.196546e-02 -2.818060e-04  8.867507e-02  3.815772e-02  3.466601e-02 #>  [437,] -3.279129e-02 -4.054102e-02  4.624155e-02  3.902789e-02  4.513378e-02 #>  [438,] -4.892604e-02  3.565016e-02 -5.674988e-02  1.860482e-02  1.699933e-02 #>  [439,] -1.245285e-02 -8.802209e-03 -8.581193e-03 -2.926512e-02  1.217141e-02 #>  [440,] -3.658207e-02  1.670342e-02 -3.336207e-02  3.213312e-02 -4.872091e-02 #>  [441,] -2.325419e-02 -2.286149e-02 -7.737990e-03  7.723970e-02  2.641523e-02 #>  [442,] -3.025926e-02 -5.270108e-02 -3.092761e-03  9.137097e-03 -3.184223e-02 #>  [443,] -2.459371e-02 -1.824057e-02 -1.947958e-02  1.773261e-03  4.826552e-03 #>  [444,] -2.626504e-02 -6.988284e-03  6.429792e-02 -7.608516e-03  6.139804e-03 #>  [445,] -4.587081e-03  2.012961e-02  2.121676e-02 -4.350863e-04 -5.233887e-03 #>  [446,] -3.932454e-02  1.530708e-02  2.453414e-02  2.400375e-02  1.123882e-02 #>  [447,] -4.394275e-02 -2.913342e-02 -3.822216e-02 -7.985764e-02  1.228934e-02 #>  [448,] -1.111333e-02 -1.342313e-02  3.160393e-03  4.620132e-02  3.376009e-02 #>  [449,] -9.174163e-03  4.025921e-02  4.243352e-02 -8.701726e-04 -1.046777e-02 #>  [450,] -4.587081e-03  2.012961e-02  2.121676e-02 -4.350863e-04 -5.233887e-03 #>  [451,] -3.658207e-02  1.670342e-02 -3.336207e-02  3.213312e-02 -4.872091e-02 #>  [452,] -1.769753e-02 -1.614992e-02 -9.318186e-03  5.413904e-02  9.535183e-03 #>  [453,] -5.021494e-02 -3.249636e-02 -5.301793e-02 -1.161642e-02 -3.145184e-02 #>  [454,] -2.653988e-02  1.747793e-02 -6.240374e-02 -1.281579e-02 -2.383452e-02 #>  [455,] -1.494127e-02  1.999125e-02  5.257562e-02 -1.578967e-02 -1.060401e-02 #>  [456,] -1.224241e-02  4.754193e-03 -1.714310e-02  8.755042e-03  2.918769e-02 #>  [457,] -4.942467e-02  4.535852e-02  5.915360e-02  3.025397e-02 -7.686645e-02 #>  [458,] -2.907924e-02 -1.230351e-02  7.981900e-03  2.362151e-02 -3.693989e-02 #>  [459,] -2.152546e-02  1.726445e-02  4.009704e-02 -7.851954e-03 -3.482891e-02 #>  [460,] -4.342764e-02 -5.815467e-02 -2.804992e-02  2.501254e-02 -8.029204e-02 #>  [461,] -2.362412e-02  8.600604e-03  1.569893e-04 -2.176249e-02 -1.728738e-02 #>  [462,] -6.278917e-02 -2.111081e-02  2.535806e-02  6.322329e-02  2.063777e-02 #>  [463,] -1.682949e-02  2.488380e-02  4.073665e-03  8.319956e-03  2.395380e-02 #>  [464,] -4.245073e-02  1.062800e-02 -2.946469e-02 -5.069723e-03 -1.232459e-02 #>  [465,] -2.259660e-02  4.615833e-03  1.421576e-02 -6.599546e-03  2.381757e-02 #>  [466,] -5.366562e-02  1.139743e-02 -3.254901e-02  1.884826e-02  5.796805e-02 #>  [467,] -7.116703e-02  5.626324e-02 -3.302881e-02  5.589343e-02 -7.845081e-02 #>  [468,] -5.398494e-02 -2.990793e-02 -9.180486e-03 -3.490873e-02 -1.259706e-02 #>  [469,] -1.893549e-02 -2.572155e-02 -1.481506e-02  9.559395e-04 -4.858604e-02 #>  [470,] -2.454277e-02  4.033433e-02 -2.870840e-02 -2.118860e-02 -4.843499e-03 #>  [471,] -3.448340e-02  2.536727e-02  6.577982e-03  4.604365e-02 -6.626245e-02 #>  [472,] -2.912285e-02 -2.893690e-02 -3.840604e-03  4.003686e-02  6.281155e-02 #>  [473,] -1.775546e-02  1.467602e-02 -3.740397e-03  1.544035e-02 -5.368370e-02 #>  [474,] -2.049794e-02  1.327968e-02  5.415582e-02  7.310985e-03  6.276037e-03 #>  [475,] -4.978761e-02 -1.258023e-02  7.069962e-02 -7.087663e-03 -4.768013e-02 #>  [476,] -3.679251e-02  3.147017e-03 -2.480017e-02 -5.887044e-03 -6.573719e-02 #>  [477,] -1.775546e-02  1.467602e-02 -3.740397e-03  1.544035e-02 -5.368370e-02 #>  [478,] -1.127283e-02  3.159536e-02  2.493468e-03 -1.478070e-02  7.073760e-03 #>  [479,] -6.040964e-02 -7.765322e-02 -2.099214e-02  3.401102e-02 -1.013564e-02 #>  [480,] -2.244410e-02  4.899818e-02  1.123165e-02 -7.278070e-03 -2.238503e-02 #>  [481,] -2.351524e-02  3.634956e-02 -1.464963e-02 -6.025662e-03  3.626145e-02 #>  [482,] -1.821996e-02 -2.907018e-02  1.560907e-03 -4.418462e-02  1.203518e-02 #>  [483,] -1.672794e-02  1.069125e-02  1.031838e-02  3.060329e-02 -1.257875e-02 #>  [484,] -5.556667e-03 -6.711564e-03  1.580196e-03  2.310066e-02  1.688004e-02 #>  [485,] -2.480415e-02 -3.179697e-02 -1.091767e-02 -3.624690e-02 -1.218972e-02 #>  [486,] -1.790796e-02 -2.970632e-02 -7.562825e-04  1.611888e-02 -7.481094e-03 #>  [487,] -5.438115e-02  1.474605e-02 -4.892497e-02  6.398882e-02 -2.653178e-03 #>  [488,] -3.586654e-02  1.335480e-02 -1.698611e-02 -1.300744e-02  1.190031e-02 #>  [489,] -2.459371e-02 -1.824057e-02 -1.947958e-02  1.773261e-03  4.826552e-03 #>  [490,] -2.459371e-02 -1.824057e-02 -1.947958e-02  1.773261e-03  4.826552e-03 #>  [491,] -3.596809e-02  2.754735e-02 -2.323082e-02 -3.529078e-02  4.843286e-02 #>  [492,] -2.367507e-02 -4.997429e-02  9.385818e-03  1.199377e-03 -7.617327e-03 #>  [493,] -2.259660e-02  4.615833e-03  1.421576e-02 -6.599546e-03  2.381757e-02 #>  [494,] -9.174163e-03  4.025921e-02  4.243352e-02 -8.701726e-04 -1.046777e-02 #>  [495,] -4.040301e-02 -3.928304e-02  1.970420e-02  3.180267e-02 -2.019608e-02 #>  [496,] -2.454277e-02  4.033433e-02 -2.870840e-02 -2.118860e-02 -4.843499e-03 #>  [497,] -2.270548e-02 -2.313312e-02  2.902238e-02 -2.233637e-02 -2.973126e-02 #>  [498,] -3.030987e-02  2.006636e-02 -1.856630e-02 -3.610810e-02 -4.979732e-03 #>  [499,] -2.541080e-02 -6.993939e-04 -4.210026e-02  2.463048e-02 -1.926212e-02 #>  [500,] -5.479470e-02  2.957475e-02 -5.285250e-02 -1.859802e-02  5.339565e-02 #>  [501,] -2.449216e-02 -3.243312e-02 -1.323486e-02  2.405660e-02 -3.170600e-02 #>  [502,] -5.275431e-02 -6.227780e-02  1.736772e-02  2.482089e-02 -4.455721e-02 #>  [503,] -3.694501e-02 -4.123533e-02 -2.181605e-02 -5.208520e-03 -1.953459e-02 #>  [504,] -3.030987e-02  2.006636e-02 -1.856630e-02 -3.610810e-02 -4.979732e-03 #>  [505,] -3.302251e-02  5.585835e-04 -6.863761e-02  1.740526e-02 -8.459198e-02 #>  [506,] -3.658207e-02  1.670342e-02 -3.336207e-02  3.213312e-02 -4.872091e-02 #>  [507,] -2.244410e-02  4.899818e-02  1.123165e-02 -7.278070e-03 -2.238503e-02 #>  [508,] -4.331876e-02 -3.040572e-02 -4.285654e-02  4.074936e-02 -2.674321e-02 #>  [509,] -2.647548e-02 -2.054469e-02  7.285982e-02 -4.562868e-02 -1.087647e-02 #>  [510,] -1.811840e-02 -4.326273e-02  7.805622e-03 -2.190128e-02 -2.449737e-02 #>  [511,] -3.355743e-02  3.557505e-02  1.439204e-02  3.892325e-02  1.137506e-02 #>  [512,] -1.834833e-02  8.051843e-02  8.486705e-02 -1.740345e-03 -2.093555e-02 #>  [513,] -3.252991e-02  3.159028e-02  2.845082e-02  5.408619e-02  5.248001e-02 #>  [514,] -1.795857e-02  4.306112e-02 -1.622983e-02 -2.912632e-02  1.938141e-02 #>  [515,] -2.249505e-02 -9.576718e-03  2.046048e-02  1.568379e-02 -1.271498e-02 #>  [516,] -5.767105e-03 -2.026797e-02  1.014210e-02 -1.491950e-02 -1.362328e-04 #>  [517,] -3.371693e-02  8.059354e-02  1.372512e-02 -2.205877e-02 -1.531127e-02 #>  [518,] -3.483901e-02  9.370026e-03 -2.927332e-03  2.155496e-03  5.300526e-02 #>  [519,] -1.035419e-02 -1.383598e-04  3.135886e-02 -1.535459e-02 -5.370120e-03 #>  [520,] -1.235130e-02 -2.299476e-02 -2.336479e-03 -6.981781e-03 -2.436114e-02 #>  [521,] -2.162701e-02  3.145700e-02  3.385233e-02 -3.013529e-02  1.703640e-03 #>  [522,] -3.693768e-02  7.061765e-04 -4.286739e-02 -1.175504e-02  7.054680e-02 #>  [523,] -3.252991e-02  3.159028e-02  2.845082e-02  5.408619e-02  5.248001e-02 #>  [524,] -3.036082e-02 -3.850853e-02 -9.337475e-03 -1.314624e-02  4.690320e-03 #>  [525,] -4.587081e-03  2.012961e-02  2.121676e-02 -4.350863e-04 -5.233887e-03 #>  [526,] -2.789921e-02  2.809406e-02  1.905656e-02  3.810593e-02 -4.203754e-02 #>  [527,] -2.708213e-02  1.055289e-02  4.167724e-02  1.524871e-02 -1.794887e-02 #>  [528,] -5.012588e-02  1.247805e-03  2.537735e-02  1.305086e-01  2.548264e-02 #>  [529,] -5.767105e-03 -2.026797e-02  1.014210e-02 -1.491950e-02 -1.362328e-04 #>  [530,] -3.112696e-02  3.760753e-02 -4.118698e-02 -1.325088e-02 -2.906840e-02 #>  [531,] -2.928235e-02  1.608159e-02 -4.507528e-03 -2.094516e-02  3.612522e-02 #>  [532,] -2.238616e-02  1.817224e-02  5.653861e-03  3.142062e-02  4.083385e-02 #>  [533,] -3.635784e-02  6.500465e-02  7.786605e-02 -7.904805e-03  8.115910e-03 #>  [534,] -4.102700e-02 -3.801074e-02  2.433858e-02 -8.880433e-02  1.883648e-02 #>  [535,] -1.132377e-02 -2.697953e-02  1.172230e-02  8.181158e-03  1.674381e-02 #>  [536,] -1.235130e-02 -2.299476e-02 -2.336479e-03 -6.981781e-03 -2.436114e-02 #>  [537,] -1.709088e-02 -4.724750e-02  2.186440e-02 -6.738344e-03  1.660758e-02 #>  [538,] -5.082159e-02 -1.398788e-03 -8.420051e-02  4.926097e-02 -3.852424e-02 #>  [539,] -2.729257e-02 -3.003513e-03  5.023914e-02 -2.277146e-02 -3.496515e-02 #>  [540,] -1.821996e-02 -2.907018e-02  1.560907e-03 -4.418462e-02  1.203518e-02 #>  [541,] -2.836371e-02 -1.565213e-02  2.435787e-02 -2.151905e-02  2.368134e-02 #>  [542,] -2.131502e-02  3.082086e-02  3.153514e-02  3.016821e-02 -1.781264e-02 #>  [543,] -2.480415e-02 -3.179697e-02 -1.091767e-02 -3.624690e-02 -1.218972e-02 #>  [544,] -4.587081e-03  2.012961e-02  2.121676e-02 -4.350863e-04 -5.233887e-03 #>  [545,] -3.468651e-02  5.375237e-02 -5.911447e-03  1.476972e-03  6.802658e-03 #>  [546,] -1.882660e-02  2.027399e-03 -2.962168e-02  1.669276e-02  4.962785e-03 #>  [547,] -5.280492e-02  1.048964e-02  1.894175e-03 -2.042431e-02 -1.769471e-02 #>  [548,] -1.575835e-02  3.753242e-02  2.995494e-02  7.067548e-03 -3.469268e-02 #>  [549,] -3.117057e-02  2.097414e-02 -5.300949e-02  3.164466e-03  7.068303e-02 #>  [550,] -3.199499e-02 -3.426187e-03 -5.457883e-02  3.256820e-02 -4.348703e-02 #>  [551,] -1.903704e-02 -1.152900e-02 -2.105977e-02 -2.132740e-02 -1.205349e-02 #>  [552,] -2.028750e-02  2.683608e-02  4.559392e-02  4.533115e-02  2.329231e-02 #>  [553,] -2.254566e-02  6.319073e-02  4.986936e-03 -2.956141e-02  1.414752e-02 #>  [554,] -6.310116e-02 -2.047466e-02  2.767525e-02  2.919786e-03  4.015405e-02 #>  [555,] -3.662569e-02  7.002804e-05 -4.518458e-02  4.854846e-02  5.103052e-02 #>  [556,] -3.020832e-02  5.873811e-03 -1.232159e-02 -1.382476e-02 -4.151228e-02 #>  [557,] -2.356619e-02 -2.222534e-02 -5.420800e-03  1.693620e-02  4.593150e-02 #>  [558,] -3.127946e-02 -6.774810e-03 -3.820287e-02 -1.257236e-02  1.713420e-02 #>  [559,] -1.800952e-02 -1.551377e-02 -7.000997e-03 -6.164460e-03  2.905146e-02 #>  [560,] -3.478807e-02  6.794492e-02 -1.215616e-02 -2.080637e-02  4.333521e-02 #>  [561,] -1.931791e-02  5.367726e-02  6.523048e-02  2.179540e-02  1.178383e-03 #>  [562,] -3.020099e-02  4.781531e-02 -3.337292e-02 -2.037128e-02  4.856910e-02 #>  [563,] -2.918079e-02  1.889040e-03  1.737186e-03  1.338174e-03 -4.073346e-04 #>  [564,] -3.268940e-02  7.660877e-02  2.778389e-02 -6.895835e-03  2.579368e-02 #>  [565,] -3.159145e-02 -6.138661e-03 -3.588568e-02 -7.287586e-02  3.665047e-02 #>  [566,] -6.584191e-03 -2.726793e-03 -1.247858e-02  7.937721e-03 -2.422491e-02 #>  [567,] -2.541080e-02 -6.993939e-04 -4.210026e-02  2.463048e-02 -1.926212e-02 #>  [568,] -2.562123e-02 -1.425580e-02 -3.353835e-02 -1.338968e-02 -3.627840e-02 #>  [569,] -4.703781e-02  3.075761e-02 -8.247925e-03 -5.504809e-03 -1.755848e-02 #>  [570,] -3.220543e-02 -1.698259e-02 -4.601693e-02 -5.451958e-03 -6.050330e-02 #>  [571,] -6.584191e-03 -2.726793e-03 -1.247858e-02  7.937721e-03 -2.422491e-02 #>  [572,] -1.821996e-02 -2.907018e-02  1.560907e-03 -4.418462e-02  1.203518e-02 #>  [573,] -1.709088e-02 -4.724750e-02  2.186440e-02 -6.738344e-03  1.660758e-02 #>  [574,] -9.174163e-03  4.025921e-02  4.243352e-02 -8.701726e-04 -1.046777e-02 #>  [575,] -1.127283e-02  3.159536e-02  2.493468e-03 -1.478070e-02  7.073760e-03 #>  [576,] -1.779908e-02 -1.957371e-03 -1.556290e-02  3.185570e-02  4.606774e-02 #>  [577,] -4.595235e-02 -4.053103e-03  2.330607e-04  4.835681e-02  8.676535e-02 #>  [578,] -1.872505e-02 -1.216515e-02 -2.337696e-02  3.897610e-02 -3.156977e-02 #>  [579,] -3.127946e-02 -6.774810e-03 -3.820287e-02 -1.257236e-02  1.713420e-02 #>  [580,] -1.612129e-02 -2.040633e-02  4.150096e-02 -3.027409e-02 -5.506353e-03 #>  [581,] -4.587081e-03  2.012961e-02  2.121676e-02 -4.350863e-04 -5.233887e-03 #>  [582,] -4.960830e-02 -6.359394e-02 -2.183534e-02 -7.249380e-02 -2.437945e-02 #>  [583,] -2.368610e-20  4.707672e-20 -1.065098e-18 -2.255541e-18  8.897606e-18 #>  [584,] -3.371693e-02  8.059354e-02  1.372512e-02 -2.205877e-02 -1.531127e-02 #>  [585,] -2.362412e-02  8.600604e-03  1.569893e-04 -2.176249e-02 -1.728738e-02 #>  [586,] -2.341369e-02  2.215701e-02 -8.404915e-03  1.625768e-02 -2.711017e-04 #>  [587,] -1.111333e-02 -1.342313e-02  3.160393e-03  4.620132e-02  3.376009e-02 #>  [588,] -4.025051e-02  5.099302e-03  1.672008e-02  3.112415e-02 -6.639868e-02 #>  [589,] -1.882660e-02  2.027399e-03 -2.962168e-02  1.669276e-02  4.962785e-03 #>  [590,] -4.622072e-02  1.321644e-02  1.437275e-02 -2.836203e-02  6.530192e-03 #>  [591,] -3.209654e-02  1.076636e-02 -6.082355e-02  1.028487e-02 -6.954474e-03 #>  [592,] -1.703993e-02  1.132740e-02  1.263557e-02 -2.970021e-02  6.937527e-03 #>  [593,] -2.444121e-02  2.614178e-02 -2.246369e-02  1.094737e-03 -4.137605e-02 #>  [594,] -4.483759e-02  2.522891e-02  3.793684e-02  3.068906e-02 -7.163257e-02 #>  [595,] -2.249505e-02 -9.576718e-03  2.046048e-02  1.568379e-02 -1.271498e-02 #>  [596,] -2.341369e-02  2.215701e-02 -8.404915e-03  1.625768e-02 -2.711017e-04 #>  [597,] -2.815327e-02 -2.095731e-03  1.579596e-02  1.650111e-02  4.069762e-02 #>  [598,] -5.831797e-02  2.041147e-02  1.529687e-02 -1.373900e-02 -1.005661e-01 #>  [599,] -3.458496e-02  3.955982e-02  3.332675e-04  2.376031e-02 -2.972989e-02 #>  [600,] -1.035419e-02 -1.383598e-04  3.135886e-02 -1.535459e-02 -5.370120e-03 #>  [601,] -3.117790e-02 -2.096736e-02 -3.195815e-02  9.710981e-03 -1.939835e-02 #>  [602,] -4.703781e-02  3.075761e-02 -8.247925e-03 -5.504809e-03 -1.755848e-02 #>  [603,] -4.692926e-02 -7.283578e-02  1.647828e-03  7.843908e-02  1.879790e-02 #>  [604,] -1.688044e-02 -3.369110e-02  1.330249e-02  3.128182e-02  3.362386e-02 #>  [605,] -5.037994e-02 -2.894199e-02  2.211675e-02  1.089038e-01  1.082178e-01 #>  [606,] -1.245285e-02 -8.802209e-03 -8.581193e-03 -2.926512e-02  1.217141e-02 #>  [607,] -3.030987e-02  2.006636e-02 -1.856630e-02 -3.610810e-02 -4.979732e-03 #>  [608,] -3.365899e-02  4.976760e-02  8.147329e-03  1.663991e-02  4.790761e-02 #>  [609,] -2.249505e-02 -9.576718e-03  2.046048e-02  1.568379e-02 -1.271498e-02 #>  [610,] -5.463520e-02 -1.544375e-02 -5.218557e-02  4.238400e-02  8.008198e-02 #>  [611,] -1.111333e-02 -1.342313e-02  3.160393e-03  4.620132e-02  3.376009e-02 #>  [612,] -3.107635e-02 -3.515991e-02 -2.571344e-02  3.199432e-02 -5.593091e-02 #>  [613,] -2.815327e-02 -2.095731e-03  1.579596e-02  1.650111e-02  4.069762e-02 #>  [614,] -4.029413e-02 -1.153409e-02  4.897578e-03  4.753949e-02  3.335275e-02 #>  [615,] -1.337149e-02  2.293151e-02 -3.744659e-02 -2.869124e-02  2.461529e-02 #>  [616,] -2.377662e-02 -3.578174e-02  3.141104e-03 -2.108396e-02  2.891523e-02 #>  [617,] -5.556667e-03 -6.711564e-03  1.580196e-03  2.310066e-02  1.688004e-02 #>  [618,] -2.351524e-02  3.634956e-02 -1.464963e-02 -6.025662e-03  3.626145e-02 #>  [619,] -2.480415e-02 -3.179697e-02 -1.091767e-02 -3.624690e-02 -1.218972e-02 #>  [620,] -5.178472e-02 -3.543663e-02  3.700428e-02  1.285144e-03 -6.667115e-02 #>  [621,] -3.775476e-02  1.824735e-02 -6.548807e-02  1.110219e-02  4.645812e-02 #>  [622,] -1.570042e-02  6.706478e-03  2.437715e-02  4.576623e-02  2.852620e-02 #>  [623,] -1.132377e-02 -2.697953e-02  1.172230e-02  8.181158e-03  1.674381e-02 #>  [624,] -3.295079e-02  4.477473e-03  4.557463e-02 -2.195413e-02  1.844745e-02 #>  [625,] -2.270548e-02 -2.313312e-02  2.902238e-02 -2.233637e-02 -2.973126e-02 #>  [626,] -6.584191e-03 -2.726793e-03 -1.247858e-02  7.937721e-03 -2.422491e-02 #>  [627,] -3.560549e-02 -4.585625e-02 -1.007447e-02  7.025792e-02  2.054088e-03 #>  [628,] -2.490570e-02 -1.760442e-02 -1.716239e-02 -5.853024e-02  2.434283e-02 #>  [629,] -2.815327e-02 -2.095731e-03  1.579596e-02  1.650111e-02  4.069762e-02 #>  [630,] -2.351524e-02  3.634956e-02 -1.464963e-02 -6.025662e-03  3.626145e-02 #>  [631,] -4.336937e-02  4.236173e-02 -5.833008e-02 -4.495839e-03  1.192862e-04 #>  [632,] -6.584191e-03 -2.726793e-03 -1.247858e-02  7.937721e-03 -2.422491e-02 #>  [633,] -3.009943e-02  3.362276e-02 -2.712821e-02  1.912058e-03  1.203655e-02 #>  [634,] -2.280704e-02 -8.940569e-03  2.277767e-02 -4.461971e-02  6.801294e-03 #>  [635,] -4.384119e-02 -4.332597e-02 -3.197744e-02 -5.757430e-02 -2.424322e-02 #>  [636,] -5.090936e-02  4.753859e-02  2.934480e-02 -5.108046e-02  3.782886e-02 #>  [637,] -4.887543e-02 -3.711728e-02 -4.127634e-02  6.385002e-02 -9.863170e-03 #>  [638,] -3.878229e-02  2.223212e-02 -7.954684e-02 -4.060752e-03  5.353173e-03 #>  [639,] -4.373231e-02 -1.557702e-02 -4.678406e-02 -4.183748e-02  2.930561e-02 #>  [640,] -5.775494e-02 -2.731950e-02  3.465695e-02 -5.820103e-02  6.257727e-03 #>  [641,] -1.326994e-02  8.738964e-03 -3.120187e-02 -6.407897e-03 -1.191726e-02 #>  [642,] -5.350613e-02 -3.362107e-02 -3.188208e-02  7.983028e-02  8.465438e-02 #>  [643,] -3.284923e-02 -9.715077e-03  5.181934e-02  3.292042e-04 -1.808510e-02 #>  [644,] -7.201394e-02  9.191585e-02  5.231804e-02  1.710791e-02  3.703250e-02 #>  [645,] -5.263809e-02  7.412654e-03 -1.849023e-02  3.401120e-02  9.907300e-02 #>  [646,] -1.903704e-02 -1.152900e-02 -2.105977e-02 -2.132740e-02 -1.205349e-02 #>  [647,]  2.285861e-20 -2.261506e-20  5.624077e-19  1.208790e-18 -5.248100e-18 #>  [648,] -1.111333e-02 -1.342313e-02  3.160393e-03  4.620132e-02  3.376009e-02 #>  [649,] -3.483901e-02  9.370026e-03 -2.927332e-03  2.155496e-03  5.300526e-02 #>  [650,] -2.362412e-02  8.600604e-03  1.569893e-04 -2.176249e-02 -1.728738e-02 #>  [651,] -4.359963e-02  3.480054e-02  4.343371e-02  8.387216e-02 -1.351134e-02 #>  [652,] -2.815327e-02 -2.095731e-03  1.579596e-02  1.650111e-02  4.069762e-02 #>  [653,] -3.494790e-02 -1.837893e-02  1.187929e-02 -1.358133e-02 -5.435674e-04 #>  [654,] -2.070837e-02 -2.767197e-04  6.271772e-02 -3.070918e-02 -1.074024e-02 #>  [655,] -5.237705e-02 -5.179839e-02 -1.157859e-02  1.172766e-01  8.922677e-02 #>  [656,] -1.672794e-02  1.069125e-02  1.031838e-02  3.060329e-02 -1.257875e-02 #>  [657,] -1.111333e-02 -1.342313e-02  3.160393e-03  4.620132e-02  3.376009e-02 #>  [658,] -4.530208e-02 -1.851729e-02  4.323815e-02 -2.893592e-02 -5.913687e-03 #>  [659,] -1.575835e-02  3.753242e-02  2.995494e-02  7.067548e-03 -3.469268e-02 #>  [660,] -1.337149e-02  2.293151e-02 -3.744659e-02 -2.869124e-02  2.461529e-02 #>  [661,] -3.381882e-02 -3.655625e-02  3.218278e-02  2.386495e-02  4.028830e-03 #>  [662,] -4.142321e-02  6.643233e-03 -1.540591e-02  1.009322e-02  2.878036e-02 #>  [663,] -3.127946e-02 -6.774810e-03 -3.820287e-02 -1.257236e-02  1.713420e-02 #>  [664,] -2.541080e-02 -6.993939e-04 -4.210026e-02  2.463048e-02 -1.926212e-02 #>  [665,] -2.928235e-02  1.608159e-02 -4.507528e-03 -2.094516e-02  3.612522e-02 #>  [666,] -3.850745e-02 -2.234091e-03  4.715482e-02  1.146525e-03  3.532750e-02 #>  [667,] -2.590210e-02  5.095046e-02  5.275190e-02  2.973312e-02 -2.304652e-02 #>  [668,] -3.376787e-02  2.201865e-02  2.295395e-02  9.030881e-04 -5.641222e-03 #>  [669,] -5.653775e-02  3.690814e-02 -8.328724e-02  1.137960e-02 -4.833053e-02 #>  [670,] -1.014375e-02  1.341804e-02  2.279696e-02  2.266557e-02  1.164616e-02 #>  [671,] -1.800952e-02 -1.551377e-02 -7.000997e-03 -6.164460e-03  2.905146e-02 #>  [672,] -6.284711e-02  9.715135e-03  3.093585e-02  2.452460e-02 -4.258111e-02 #>  [673,] -3.555455e-02  1.271865e-02 -1.930330e-02  4.729606e-02 -7.615963e-03 #>  [674,] -9.174163e-03  4.025921e-02  4.243352e-02 -8.701726e-04 -1.046777e-02 #>  [675,] -1.872505e-02 -1.216515e-02 -2.337696e-02  3.897610e-02 -3.156977e-02 #>  [676,] -1.779908e-02 -1.957371e-03 -1.556290e-02  3.185570e-02  4.606774e-02 #>  [677,] -2.918079e-02  1.889040e-03  1.737186e-03  1.338174e-03 -4.073346e-04 #>  [678,] -2.708213e-02  1.055289e-02  4.167724e-02  1.524871e-02 -1.794887e-02 #>  [679,] -1.985413e-02  6.012170e-03 -4.368045e-02  1.529823e-03 -3.614216e-02 #>  [680,] -5.679914e-02 -3.522316e-02 -6.549651e-02 -3.678697e-03 -5.567675e-02 #>  [681,] -4.504070e-02  5.361401e-02  2.544742e-02 -1.387762e-02  1.432538e-03 #>  [682,] -3.360838e-02 -2.299985e-02  2.362087e-02  6.188511e-02  2.104511e-02 #>  [683,] -3.494790e-02 -1.837893e-02  1.187929e-02 -1.358133e-02 -5.435674e-04 #>  [684,] -3.488996e-02 -4.920487e-02  6.301497e-03  2.511736e-02  6.267531e-02 #>  [685,] -4.294204e-02  6.227786e-02  6.538747e-02  3.291552e-05 -1.610900e-02 #>  [686,] -5.361467e-02  6.997232e-02 -4.177784e-02 -4.113604e-03  4.829800e-02 #>  [687,] -3.268940e-02  7.660877e-02  2.778389e-02 -6.895835e-03  2.579368e-02 #>  [688,] -1.913860e-02  2.663548e-03 -2.730449e-02 -4.361074e-02  2.447906e-02 #>  [689,] -3.504945e-02 -4.186376e-03  5.634572e-03 -3.586467e-02  3.598899e-02 #>  [690,] -4.692893e-02  5.850656e-02 -2.305454e-02  1.023201e-02  3.599035e-02 #>  [691,] -4.089398e-02  1.437092e-01  8.985398e-02 -3.130175e-02 -6.788029e-03 #>  [692,] -1.872505e-02 -1.216515e-02 -2.337696e-02  3.897610e-02 -3.156977e-02 #>  [693,] -2.438327e-02 -4.684165e-03 -2.804148e-02  3.979342e-02  2.184283e-02 #>  [694,] -4.320988e-02 -2.656765e-03 -5.766316e-02  5.648618e-02  2.680561e-02 #>  [695,] -3.015038e-02 -2.495213e-02 -1.789938e-02  2.487392e-02  2.170660e-02 #>  [696,] -2.551235e-02  1.349316e-02 -4.834497e-02  2.347145e-03  1.727043e-02 #>  [697,] -2.146752e-02 -1.356149e-02  3.451925e-02  3.084673e-02  2.838997e-02 #>  [698,] -4.331143e-02  1.153579e-02 -6.390787e-02  3.420285e-02  6.333817e-02 #>  [699,] -2.146752e-02 -1.356149e-02  3.451925e-02  3.084673e-02  2.838997e-02 #>  [700,] -1.693838e-02 -2.865153e-03  1.888028e-02 -7.416867e-03 -2.959503e-02 #>  [701,] -1.117127e-02  1.740281e-02  8.738182e-03  7.502634e-03 -2.945879e-02 #>  [702,] -4.606822e-02  5.759878e-02  1.138864e-02 -2.904055e-02 -3.967241e-02 #>  [703,] -5.026555e-02  4.027108e-02 -6.849147e-02 -5.686162e-02 -4.589344e-03 #>  [704,] -3.413081e-02 -3.592010e-02  3.449997e-02 -3.643855e-02  2.354511e-02 #>  [705,] -2.049794e-02  1.327968e-02  5.415582e-02  7.310985e-03  6.276037e-03 #>  [706,] -2.584416e-02  2.012452e-02  4.717411e-02  6.843181e-02  4.017236e-02 #>  [707,] -1.709088e-02 -4.724750e-02  2.186440e-02 -6.738344e-03  1.660758e-02 #>  [708,] -4.805834e-02 -5.465846e-02 -1.865566e-02  4.099280e-02  1.422550e-02 #>  [709,] -2.718368e-02  2.474544e-02  3.543253e-02 -7.034632e-03  1.858368e-02 #>  [710,] -3.994886e-02 -1.147630e-01  5.387089e-02 -2.839619e-02  3.307892e-02 #>  [711,] -2.541080e-02 -6.993939e-04 -4.210026e-02  2.463048e-02 -1.926212e-02 #>  [712,] -1.127283e-02  3.159536e-02  2.493468e-03 -1.478070e-02  7.073760e-03 #>  [713,] -6.584191e-03 -2.726793e-03 -1.247858e-02  7.937721e-03 -2.422491e-02 #>  [714,] -1.201655e-19  2.643329e-19 -6.703612e-18 -1.314320e-17  5.922849e-17 #>  [715,] -2.469527e-02 -4.048016e-03 -2.572429e-02 -2.051008e-02  4.135910e-02 #>  [716,] -2.954373e-02 -5.604971e-02  1.328320e-02 -3.600346e-02  2.877899e-02 #>  [717,] -1.235130e-02 -2.299476e-02 -2.336479e-03 -6.981781e-03 -2.436114e-02 #>  [718,] -2.999788e-02  1.943021e-02 -2.088349e-02  2.419540e-02 -2.449601e-02 #>  [719,] -5.734139e-02 -4.214819e-02  3.858448e-02  2.438580e-02 -4.979110e-02 #>  [720,] -6.320272e-02 -6.282107e-03  2.143053e-02 -1.936355e-02  7.668660e-02 #>  [721,] -2.372568e-02  2.279315e-02 -6.087725e-03 -4.404582e-02  1.924517e-02 #>  [722,] -1.214086e-02 -9.438358e-03 -1.089838e-02  3.103838e-02 -7.344861e-03 #>  [723,] -2.912285e-02 -2.893690e-02 -3.840604e-03  4.003686e-02  6.281155e-02 #>  [724,] -4.579985e-02  4.032924e-02 -2.751054e-03  4.767829e-02  4.056275e-02 #>  [725,] -3.596809e-02  2.754735e-02 -2.323082e-02 -3.529078e-02  4.843286e-02 #>  [726,] -4.209512e-02  2.662525e-02 -1.995937e-02  3.881843e-02 -1.315923e-01 #>  [727,] -3.046237e-02 -2.431598e-02 -1.558219e-02 -3.542958e-02  4.122287e-02 #>  [728,] -1.672794e-02  1.069125e-02  1.031838e-02  3.060329e-02 -1.257875e-02 #>  [729,] -3.009943e-02  3.362276e-02 -2.712821e-02  1.912058e-03  1.203655e-02 #>  [730,] -3.458496e-02  3.955982e-02  3.332675e-04  2.376031e-02 -2.972989e-02 #>  [731,] -1.893549e-02 -2.572155e-02 -1.481506e-02  9.559395e-04 -4.858604e-02 #>  [732,] -2.470259e-02 -4.598952e-02 -4.672958e-03 -1.396356e-02 -4.872228e-02 #>  [733,] -1.214086e-02 -9.438358e-03 -1.089838e-02  3.103838e-02 -7.344861e-03 #>  [734,] -3.199499e-02 -3.426187e-03 -5.457883e-02  3.256820e-02 -4.348703e-02 #>  [735,] -5.096031e-02 -1.103630e-02  3.857363e-02 -2.811859e-02  4.749891e-02 #>  [736,] -2.907924e-02 -1.230351e-02  7.981900e-03  2.362151e-02 -3.693989e-02 #>  [737,] -2.228461e-02  3.979685e-03  1.189857e-02  5.370395e-02  4.301296e-03 #>  [738,] -5.301535e-02 -3.066759e-03  1.045608e-02 -5.844447e-02 -3.471099e-02 #>  [739,] -3.964386e-02 -2.599827e-02  4.790267e-02 -2.975324e-02 -5.932628e-02 #>  [740,] -3.683612e-02 -1.348637e-02 -3.662267e-02  1.052830e-02  3.401424e-02 #>  [741,] -3.974542e-02 -1.180572e-02  4.165795e-02 -5.203657e-02 -2.279373e-02 #>  [742,] -5.172645e-02  6.507977e-02  6.724122e-03 -2.822323e-02  1.374018e-02 #>  [743,] -3.478807e-02  6.794492e-02 -1.215616e-02 -2.080637e-02  4.333521e-02 #>  [744,] -5.754450e-02 -1.376309e-02  2.609505e-02 -2.018087e-02  2.327400e-02 #>  [745,] -3.117790e-02 -2.096736e-02 -3.195815e-02  9.710981e-03 -1.939835e-02 #>  [746,] -1.575835e-02  3.753242e-02  2.995494e-02  7.067548e-03 -3.469268e-02 #>  [747,] -5.259448e-02  2.404605e-02 -6.667729e-03  1.759585e-02 -6.784363e-04 #>  [748,] -3.080118e-02  7.171622e-02  7.628585e-02 -3.100546e-02 -8.764134e-03 #>  [749,] -3.199499e-02 -3.426187e-03 -5.457883e-02  3.256820e-02 -4.348703e-02 #>  [750,] -2.362412e-02  8.600604e-03  1.569893e-04 -2.176249e-02 -1.728738e-02 #>  [751,] -4.163364e-02 -6.913170e-03 -6.844007e-03 -2.792694e-02  1.176408e-02 #>  [752,] -2.508502e-02  3.340929e-02  7.537258e-02  6.875899e-03  1.042150e-03 #>  [753,] -4.066406e-02  1.992800e-02  1.279256e-02 -5.146269e-02 -1.034985e-02 #>  [754,] -3.743631e-02  1.041453e-02  7.303610e-02 -1.058821e-04 -2.331899e-02 #>  [755,] -1.800952e-02 -1.551377e-02 -7.000997e-03 -6.164460e-03  2.905146e-02 #>  [756,] -3.321217e-02 -6.765382e-02  6.336536e-02 -3.701243e-02  1.110123e-02 #>  [757,] -3.284923e-02 -9.715077e-03  5.181934e-02  3.292042e-04 -1.808510e-02 #>  [758,] -3.932454e-02  1.530708e-02  2.453414e-02  2.400375e-02  1.123882e-02 #>  [759,] -3.458496e-02  3.955982e-02  3.332675e-04  2.376031e-02 -2.972989e-02 #>  [760,] -3.468651e-02  5.375237e-02 -5.911447e-03  1.476972e-03  6.802658e-03 #>  [761,] -3.355743e-02  3.557505e-02  1.439204e-02  3.892325e-02  1.137506e-02 #>  [762,] -2.503407e-02  9.198418e-02  6.614375e-02 -1.608596e-02 -8.627901e-03 #>  [763,] -1.127283e-02  3.159536e-02  2.493468e-03 -1.478070e-02  7.073760e-03 #>  [764,] -1.570042e-02  6.706478e-03  2.437715e-02  4.576623e-02  2.852620e-02 #>  [765,] -3.189343e-02 -1.761874e-02 -4.833412e-02  5.485154e-02 -8.001958e-02 #>  [766,] -3.122851e-02  5.180008e-02 -4.743170e-02 -3.553422e-02  7.464148e-03 #>  [767,] -2.744507e-02 -4.738586e-02  5.322326e-02 -2.209293e-02  1.123746e-02 #>  [768,] -4.116915e-02  3.683303e-02 -1.214531e-02  3.169803e-02 -5.395480e-02 #>  [769,] -5.954161e-02 -3.661949e-02 -7.600290e-03 -1.180807e-02  4.282985e-03 #>  [770,] -2.331213e-02  7.964455e-03 -2.160201e-03  3.854101e-02 -3.680365e-02 #>  [771,] -4.384119e-02 -4.332597e-02 -3.197744e-02 -5.757430e-02 -2.424322e-02 #>  [772,] -3.030987e-02  2.006636e-02 -1.856630e-02 -3.610810e-02 -4.979732e-03 #>  [773,] -4.892604e-02  3.565016e-02 -5.674988e-02  1.860482e-02  1.699933e-02 #>  [774,] -4.174253e-02 -3.466212e-02  7.962611e-03 -4.366377e-02 -4.178475e-02 #>  [775,] -5.295742e-02 -3.389270e-02  4.878289e-03 -1.974579e-02  2.850789e-02 #>  [776,] -2.561391e-02  2.768571e-02 -5.458968e-02 -1.993619e-02  5.380298e-02 #>  [777,] -3.750804e-02  6.495640e-03 -4.117613e-02  3.925352e-02 -1.263584e-01 #>  [778,] -3.138101e-02  7.417741e-03 -4.444758e-02 -3.485570e-02  5.366675e-02 #>  [779,] -2.582434e-02  1.412931e-02 -4.602778e-02 -5.795635e-02  3.678671e-02 #>  [780,] -1.903704e-02 -1.152900e-02 -2.105977e-02 -2.132740e-02 -1.205349e-02 #>  [781,] -4.271211e-02 -6.150329e-02 -1.167395e-02 -2.012802e-02 -1.967082e-02 #>  [782,] -5.327674e-02 -7.519806e-02  2.824681e-02 -7.350277e-02 -4.205722e-02 #>  [783,] -2.815327e-02 -2.095731e-03  1.579596e-02  1.650111e-02  4.069762e-02 #>  [784,] -3.342873e-02  5.732879e-02 -9.361647e-02 -7.172809e-02  6.153823e-02 #>  [785,] -1.214086e-02 -9.438358e-03 -1.089838e-02  3.103838e-02 -7.344861e-03 #>  [786,] -3.704656e-02 -2.704278e-02 -2.806077e-02 -2.749186e-02  1.699797e-02 #>  [787,] -1.785702e-02  2.886857e-02 -9.985111e-03 -6.842983e-03 -1.715115e-02 #>  [788,] -3.240854e-02  1.140251e-02 -5.850636e-02 -5.001863e-02  1.256180e-02 #>  [789,] -2.826215e-02 -2.984468e-02  3.060258e-02  7.642905e-04 -1.285121e-02 #>  [790,] -6.417231e-02 -3.312328e-02  1.793968e-03  4.172194e-03  9.880053e-02 #>  [791,] -1.337149e-02  2.293151e-02 -3.744659e-02 -2.869124e-02  2.461529e-02 #>  [792,] -3.714812e-02 -1.285023e-02 -3.430548e-02 -4.977520e-02  5.353052e-02 #>  [793,] -2.341369e-02  2.215701e-02 -8.404915e-03  1.625768e-02 -2.711017e-04 #>  [794,] -2.356619e-02 -2.222534e-02 -5.420800e-03  1.693620e-02  4.593150e-02 #>  [795,] -1.111333e-02 -1.342313e-02  3.160393e-03  4.620132e-02  3.376009e-02 #>  [796,] -2.912985e-02  6.046393e-02 -7.491643e-03 -2.162369e-02 -1.007739e-02 #>  [797,] -3.850745e-02 -2.234091e-03  4.715482e-02  1.146525e-03  3.532750e-02 #>  [798,] -3.555455e-02  1.271865e-02 -1.930330e-02  4.729606e-02 -7.615963e-03 #>  [799,] -2.162701e-02  3.145700e-02  3.385233e-02 -3.013529e-02  1.703640e-03 #>  [800,] -2.928235e-02  1.608159e-02 -4.507528e-03 -2.094516e-02  3.612522e-02 #>  [801,] -2.647548e-02 -2.054469e-02  7.285982e-02 -4.562868e-02 -1.087647e-02 #>  [802,] -1.224241e-02  4.754193e-03 -1.714310e-02  8.755042e-03  2.918769e-02 #>  [803,] -2.270548e-02 -2.313312e-02  2.902238e-02 -2.233637e-02 -2.973126e-02 #>  [804,] -3.381882e-02 -3.655625e-02  3.218278e-02  2.386495e-02  4.028830e-03 #>  [805,]  2.083130e-19 -1.707031e-19  5.414670e-18  1.103219e-17 -4.394434e-17 #>  [806,] -1.494127e-02  1.999125e-02  5.257562e-02 -1.578967e-02 -1.060401e-02 #>  [807,] -4.617012e-02 -5.955101e-02  2.984630e-02  1.688317e-02 -2.033231e-02 #>  [808,] -3.020832e-02  5.873811e-03 -1.232159e-02 -1.382476e-02 -4.151228e-02 #>  [809,] -4.611917e-02 -9.761136e-04  2.061747e-02 -6.078693e-03 -3.000236e-02 #>  [810,] -2.438327e-02 -4.684165e-03 -2.804148e-02  3.979342e-02  2.184283e-02 #>  [811,] -1.585991e-02  5.172497e-02  2.371023e-02 -1.521579e-02  1.839873e-03 #>  [812,] -1.775546e-02  1.467602e-02 -3.740397e-03  1.544035e-02 -5.368370e-02 #>  [813,] -4.008369e-02  2.022313e-03 -3.664326e-03  8.555965e-02  5.036903e-02 #>  [814,] -3.452702e-02  8.733877e-03 -5.244522e-03  6.245900e-02  3.348899e-02 #>  [815,] -3.861634e-02 -2.998304e-02  6.196144e-02 -1.459030e-02 -1.822133e-02 #>  [816,] -4.811628e-02 -2.383251e-02 -1.307787e-02  2.294114e-03 -4.899338e-02 #>  [817,] -1.892816e-02  1.621995e-02 -3.586639e-02 -5.590576e-03  4.149534e-02 #>  [818,] -2.259660e-02  4.615833e-03  1.421576e-02 -6.599546e-03  2.381757e-02 #>  [819,] -2.362412e-02  8.600604e-03  1.569893e-04 -2.176249e-02 -1.728738e-02 #>  [820,] -2.454277e-02  4.033433e-02 -2.870840e-02 -2.118860e-02 -4.843499e-03 #>  [821,] -5.033632e-02 -1.230860e-02  3.393925e-02  9.248840e-02  8.466358e-03 #>  [822,] -6.584191e-03 -2.726793e-03 -1.247858e-02  7.937721e-03 -2.422491e-02 #>  [823,] -2.821121e-02  2.873021e-02  2.137375e-02 -2.219757e-02 -2.252127e-02 #>  [824,] -5.269603e-02  3.823860e-02 -1.291244e-02 -4.687488e-03  3.585412e-02 #>  [825,] -2.438327e-02 -4.684165e-03 -2.804148e-02  3.979342e-02  2.184283e-02 #>  [826,] -1.591085e-02 -6.849924e-03  3.293906e-02  7.746072e-03  1.150992e-02 #>  [827,] -3.434125e-02 -4.947650e-02  4.306187e-02 -7.445871e-02  6.528828e-03 #>  [828,] -1.245285e-02 -8.802209e-03 -8.581193e-03 -2.926512e-02  1.217141e-02 #>  [829,] -1.785702e-02  2.886857e-02 -9.985111e-03 -6.842983e-03 -1.715115e-02 #>  [830,] -6.685746e-03  1.146576e-02 -1.872329e-02 -1.434562e-02  1.230765e-02 #>  [831,] -3.171982e-02  1.034499e-01  4.742046e-02 -3.043158e-02  3.679745e-03 #>  [832,] -2.907924e-02 -1.230351e-02  7.981900e-03  2.362151e-02 -3.693989e-02 #>  [833,] -2.028750e-02  2.683608e-02  4.559392e-02  4.533115e-02  2.329231e-02 #>  [834,] -1.575835e-02  3.753242e-02  2.995494e-02  7.067548e-03 -3.469268e-02 #>  [835,] -4.132165e-02 -7.549318e-03 -9.161197e-03  3.237655e-02 -7.752196e-03 #>  [836,] -5.780555e-02  4.544795e-02  1.918341e-02 -1.034462e-01  3.312023e-02 #>  [837,] -2.562123e-02 -1.425580e-02 -3.353835e-02 -1.338968e-02 -3.627840e-02 #>  [838,] -5.767105e-03 -2.026797e-02  1.014210e-02 -1.491950e-02 -1.362328e-04 #>  [839,] -3.361537e-02  6.640099e-02  1.996983e-02  2.245645e-04 -5.184383e-02 #>  [840,] -3.601904e-02 -3.102755e-02 -1.400199e-02 -1.232892e-02  5.810292e-02 #>  [841,] -2.857414e-02 -2.920854e-02  3.291977e-02 -5.953921e-02  6.665061e-03 #>  [842,] -3.302251e-02  5.585835e-04 -6.863761e-02  1.740526e-02 -8.459198e-02 #>  [843,] -3.565610e-02  2.691120e-02 -2.554801e-02  2.501272e-02  2.891659e-02 #>  [844,] -2.167796e-02 -2.711789e-02  4.308116e-02 -7.173430e-03  1.137369e-02 #>  [845,] -3.295079e-02  4.477473e-03  4.557463e-02 -2.195413e-02  1.844745e-02 #>  [846,] -2.238616e-02  1.817224e-02  5.653861e-03  3.142062e-02  4.083385e-02 #>  [847,] -1.224241e-02  4.754193e-03 -1.714310e-02  8.755042e-03  2.918769e-02 #>  [848,] -1.224241e-02  4.754193e-03 -1.714310e-02  8.755042e-03  2.918769e-02 #>  [849,] -3.127946e-02 -6.774810e-03 -3.820287e-02 -1.257236e-02  1.713420e-02 #>  [850,] -2.167796e-02 -2.711789e-02  4.308116e-02 -7.173430e-03  1.137369e-02 #>  [851,] -1.795857e-02  4.306112e-02 -1.622983e-02 -2.912632e-02  1.938141e-02 #>  [852,] -3.009943e-02  3.362276e-02 -2.712821e-02  1.912058e-03  1.203655e-02 #>  [853,] -2.703118e-02  6.912778e-02  3.244841e-02 -7.713156e-03 -2.761892e-02 #>  [854,] -2.070837e-02 -2.767197e-04  6.271772e-02 -3.070918e-02 -1.074024e-02 #>  [855,] -3.819546e-02 -2.870240e-03  4.483763e-02  6.145002e-02  1.581122e-02 #>  [856,] -3.845651e-02  5.634080e-02  3.792599e-02 -2.181534e-02  2.565744e-02 #>  [857,] -1.821996e-02 -2.907018e-02  1.560907e-03 -4.418462e-02  1.203518e-02 #>  [858,] -5.556667e-03 -6.711564e-03  1.580196e-03  2.310066e-02  1.688004e-02 #>  [859,] -1.882660e-02  2.027399e-03 -2.962168e-02  1.669276e-02  4.962785e-03 #>  [860,] -1.245285e-02 -8.802209e-03 -8.581193e-03 -2.926512e-02  1.217141e-02 #>  [861,] -3.963653e-02  1.594323e-02  2.685133e-02 -3.629975e-02  3.075510e-02 #>  [862,] -2.162701e-02  3.145700e-02  3.385233e-02 -3.013529e-02  1.703640e-03 #>  [863,] -3.607698e-02 -2.016053e-04 -8.424204e-03 -5.102760e-02 -5.115965e-03 #>  [864,] -7.096694e-02 -4.940647e-02 -2.122707e-03 -2.591025e-02  5.755935e-02 #>  [865,] -3.743631e-02  1.041453e-02  7.303610e-02 -1.058821e-04 -2.331899e-02 #>  [866,] -2.259660e-02  4.615833e-03  1.421576e-02 -6.599546e-03  2.381757e-02 #>  [867,] -3.025193e-02 -1.075958e-02 -2.414409e-02  2.590582e-03  5.823915e-02 #>  [868,] -1.769753e-02 -1.614992e-02 -9.318186e-03  5.413904e-02  9.535183e-03 #>  [869,] -2.243711e-02 -4.040266e-02  1.488269e-02  5.438248e-02  5.050390e-02 #>  [870,] -2.923174e-02 -5.668585e-02  1.096601e-02  2.430004e-02  9.262717e-03 #>  [871,] -3.483901e-02  9.370026e-03 -2.927332e-03  2.155496e-03  5.300526e-02 #>  [872,] -3.468651e-02  5.375237e-02 -5.911447e-03  1.476972e-03  6.802658e-03 #>  [873,] -4.693626e-02  1.656506e-02 -2.003211e-03  1.677853e-02 -5.409103e-02 #>  [874,] -4.164097e-02 -4.885467e-02  1.420732e-02 -2.138043e-02 -7.831730e-02 #>  [875,] -2.438327e-02 -4.684165e-03 -2.804148e-02  3.979342e-02  2.184283e-02 #>  [876,] -4.713937e-02  4.495016e-02 -1.449264e-02 -2.778815e-02  1.897407e-02 #>  [877,] -3.942610e-02  2.949963e-02  1.828943e-02  1.720409e-03  4.777137e-02 #>  [878,] -4.606123e-02 -3.180206e-02  1.503968e-02  3.261999e-02  3.321652e-02 #>  [879,] -4.260574e-20  3.642984e-20 -9.695994e-19 -2.040006e-18  7.930394e-18 #>  [880,] -2.821121e-02  2.873021e-02  2.137375e-02 -2.219757e-02 -2.252127e-02 #>  [881,] -1.892816e-02  1.621995e-02 -3.586639e-02 -5.590576e-03  4.149534e-02 #>  [882,] -2.794283e-02  1.146067e-02  7.234057e-03  5.452127e-02  5.771389e-02 #>  [883,] -3.009943e-02  3.362276e-02 -2.712821e-02  1.912058e-03  1.203655e-02 #>  [884,] -2.541080e-02 -6.993939e-04 -4.210026e-02  2.463048e-02 -1.926212e-02 #>  [885,] -1.591085e-02 -6.849924e-03  3.293906e-02  7.746072e-03  1.150992e-02 #>  [886,] -3.166921e-02  3.068250e-02  6.289400e-02  1.481362e-02 -2.318276e-02 #>  [887,] -2.918079e-02  1.889040e-03  1.737186e-03  1.338174e-03 -4.073346e-04 #>  [888,] -4.014163e-02  3.284825e-02  1.913464e-03  4.686097e-02 -1.284985e-02 #>  [889,] -2.815327e-02 -2.095731e-03  1.579596e-02  1.650111e-02  4.069762e-02 #>  [890,] -1.153421e-02 -4.053593e-02  2.028420e-02 -2.983900e-02 -2.724657e-04 #>  [891,] -2.562123e-02 -1.425580e-02 -3.353835e-02 -1.338968e-02 -3.627840e-02 #>  [892,] -1.882660e-02  2.027399e-03 -2.962168e-02  1.669276e-02  4.962785e-03 #>  [893,] -2.259660e-02  4.615833e-03  1.421576e-02 -6.599546e-03  2.381757e-02 #>  [894,] -1.111333e-02 -1.342313e-02  3.160393e-03  4.620132e-02  3.376009e-02 #>  [895,] -2.362412e-02  8.600604e-03  1.569893e-04 -2.176249e-02 -1.728738e-02 #>  [896,] -1.790796e-02 -2.970632e-02 -7.562825e-04  1.611888e-02 -7.481094e-03 #>  [897,] -1.903704e-02 -1.152900e-02 -2.105977e-02 -2.132740e-02 -1.205349e-02 #>  [898,] -2.264755e-02 -5.395906e-02  2.344459e-02  1.636232e-02  3.348762e-02 #>  [899,] -2.708213e-02  1.055289e-02  4.167724e-02  1.524871e-02 -1.794887e-02 #>  [900,] -2.918079e-02  1.889040e-03  1.737186e-03  1.338174e-03 -4.073346e-04 #>  [901,] -4.081656e-02 -2.445434e-02  1.577667e-02 -5.078417e-02  3.585275e-02 #>  [902,] -3.943342e-02 -1.244187e-02  3.934076e-02  8.266925e-03 -4.231001e-02 #>  [903,] -4.137959e-02  2.327662e-02 -3.583408e-03 -6.322130e-03 -7.097108e-02 #>  [904,] -2.480415e-02 -3.179697e-02 -1.091767e-02 -3.624690e-02 -1.218972e-02 #>  [905,] -1.790796e-02 -2.970632e-02 -7.562825e-04  1.611888e-02 -7.481094e-03 #>  [906,] -1.790796e-02 -2.970632e-02 -7.562825e-04  1.611888e-02 -7.481094e-03 #>  [907,] -3.807409e-02 -2.305801e-02 -4.211954e-02 -4.265480e-02 -2.410698e-02 #>  [908,] -3.722588e-02  2.397093e-02  6.447420e-02  3.791428e-02 -6.302711e-03 #>  [909,] -2.454277e-02  4.033433e-02 -2.870840e-02 -2.118860e-02 -4.843499e-03 #>  [910,] -2.356619e-02 -2.222534e-02 -5.420800e-03  1.693620e-02  4.593150e-02 #>  [911,] -4.417301e-02 -3.669461e-02  6.354164e-02  8.510362e-03 -1.341290e-03 #>  [912,] -1.693838e-02 -2.865153e-03  1.888028e-02 -7.416867e-03 -2.959503e-02 #>  [913,] -7.173308e-02  2.670959e-02 -3.397222e-02 -2.601489e-02  2.380062e-02 #>  [914,] -2.918079e-02  1.889040e-03  1.737186e-03  1.338174e-03 -4.073346e-04 #>  [915,] -3.658207e-02  1.670342e-02 -3.336207e-02  3.213312e-02 -4.872091e-02 #>  [916,] -3.694501e-02 -4.123533e-02 -2.181605e-02 -5.208520e-03 -1.953459e-02 #>  [917,] -2.765550e-02 -6.094226e-02  6.178516e-02 -6.011309e-02 -5.778818e-03 #>  [918,] -2.438327e-02 -4.684165e-03 -2.804148e-02  3.979342e-02  2.184283e-02 #>  [919,] -2.249505e-02 -9.576718e-03  2.046048e-02  1.568379e-02 -1.271498e-02 #>  [920,] -4.847189e-02 -3.982976e-02 -2.258319e-02 -4.159404e-02  7.027433e-02 #>  [921,] -1.585991e-02  5.172497e-02  2.371023e-02 -1.521579e-02  1.839873e-03 #>  [922,] -2.702419e-02 -2.027305e-02  3.609945e-02  5.394739e-02  4.527001e-02 #>  [923,] -7.394062e-02 -9.703208e-03 -5.910565e-02 -5.566224e-02 -1.220667e-02 #>  [924,] -2.372568e-02  2.279315e-02 -6.087725e-03 -4.404582e-02  1.924517e-02 #>  [925,] -2.810965e-02  1.453766e-02  2.761846e-02  8.576687e-05 -5.905382e-02 #>  [926,] -1.117127e-02  1.740281e-02  8.738182e-03  7.502634e-03 -2.945879e-02 #>  [927,] -2.800077e-02  4.228661e-02  1.281185e-02  1.582259e-02 -5.504989e-03 #>  [928,] -5.767105e-03 -2.026797e-02  1.014210e-02 -1.491950e-02 -1.362328e-04 #>  [929,] -2.907924e-02 -1.230351e-02  7.981900e-03  2.362151e-02 -3.693989e-02 #>  [930,] -1.245285e-02 -8.802209e-03 -8.581193e-03 -2.926512e-02  1.217141e-02 #>  [931,] -1.800952e-02 -1.551377e-02 -7.000997e-03 -6.164460e-03  2.905146e-02 #>  [932,] -1.245285e-02 -8.802209e-03 -8.581193e-03 -2.926512e-02  1.217141e-02 #>  [933,] -1.800952e-02 -1.551377e-02 -7.000997e-03 -6.164460e-03  2.905146e-02 #>  [934,] -4.740075e-02 -2.718114e-02  3.298093e-03 -4.284645e-02  1.162785e-02 #>  [935,] -5.516496e-02 -7.030550e-02 -2.025515e-02 -4.939314e-02 -7.499405e-03 #>  [936,] -2.718368e-02  2.474544e-02  3.543253e-02 -7.034632e-03  1.858368e-02 #>  [937,] -1.800952e-02 -1.551377e-02 -7.000997e-03 -6.164460e-03  2.905146e-02 #>  [938,] -2.341369e-02  2.215701e-02 -8.404915e-03  1.625768e-02 -2.711017e-04 #>  [939,] -3.570705e-02 -3.166370e-02 -1.631918e-02  4.797458e-02  3.858664e-02 #>  [940,] -2.907191e-02  2.963799e-02 -1.306943e-02  1.707500e-02  5.314149e-02 #>  [941,] -2.821121e-02  2.873021e-02  2.137375e-02 -2.219757e-02 -2.252127e-02 #>  [942,] -2.362412e-02  8.600604e-03  1.569893e-04 -2.176249e-02 -1.728738e-02 #>  [943,] -1.872505e-02 -1.216515e-02 -2.337696e-02  3.897610e-02 -3.156977e-02 #>  [944,] -3.755166e-02 -1.013775e-02 -5.299864e-02  5.566886e-02 -2.660698e-02 #>  [945,] -2.351524e-02  3.634956e-02 -1.464963e-02 -6.025662e-03  3.626145e-02 #>  [946,] -4.239279e-02 -2.019794e-02 -3.504248e-02  3.362896e-02  5.089429e-02 #>  [947,] -3.591748e-02 -4.522010e-02 -7.757279e-03  9.954419e-03  2.157036e-02 #>  [948,] -1.775546e-02  1.467602e-02 -3.740397e-03  1.544035e-02 -5.368370e-02 #>  [949,] -2.049794e-02  1.327968e-02  5.415582e-02  7.310985e-03  6.276037e-03 #>  [950,] -1.591085e-02 -6.849924e-03  3.293906e-02  7.746072e-03  1.150992e-02 #>  [951,] -1.153421e-02 -4.053593e-02  2.028420e-02 -2.983900e-02 -2.724657e-04 #>  [952,] -2.611254e-02  3.739406e-02  6.131381e-02 -8.287040e-03 -4.006280e-02 #>  [953,] -1.117127e-02  1.740281e-02  8.738182e-03  7.502634e-03 -2.945879e-02 #>  [954,] -2.826215e-02 -2.984468e-02  3.060258e-02  7.642905e-04 -1.285121e-02 #>  [955,] -2.718368e-02  2.474544e-02  3.543253e-02 -7.034632e-03  1.858368e-02 #>  [956,] -1.893549e-02 -2.572155e-02 -1.481506e-02  9.559395e-04 -4.858604e-02 #>  [957,] -4.795645e-02  6.249133e-02 -3.711332e-02 -4.930925e-03 -5.114601e-03 #>  [958,] -6.685746e-03  1.146576e-02 -1.872329e-02 -1.434562e-02  1.230765e-02 #>  [959,] -3.355743e-02  3.557505e-02  1.439204e-02  3.892325e-02  1.137506e-02 #>  [960,] -2.490570e-02 -1.760442e-02 -1.716239e-02 -5.853024e-02  2.434283e-02 #>  [961,] -1.782202e-19  1.803009e-19 -5.035280e-18 -1.090887e-17  4.485406e-17 #>  [962,] -4.929630e-02 -6.423009e-02 -2.415253e-02 -1.219030e-02 -4.389572e-02 #>  [963,] -3.086591e-02 -2.160351e-02 -3.427534e-02  7.001448e-02 -3.891463e-02 #>  [964,] -2.765550e-02 -6.094226e-02  6.178516e-02 -6.011309e-02 -5.778818e-03 #>  [965,] -1.612129e-02 -2.040633e-02  4.150096e-02 -3.027409e-02 -5.506353e-03 #>  [966,] -3.127946e-02 -6.774810e-03 -3.820287e-02 -1.257236e-02  1.713420e-02 #>  [967,] -1.127283e-02  3.159536e-02  2.493468e-03 -1.478070e-02  7.073760e-03 #>  [968,] -3.020832e-02  5.873811e-03 -1.232159e-02 -1.382476e-02 -4.151228e-02 #>  [969,] -1.035419e-02 -1.383598e-04  3.135886e-02 -1.535459e-02 -5.370120e-03 #>  [970,] -5.031650e-02 -1.830381e-02 -5.926264e-02 -3.389976e-02  5.080708e-03 #>  [971,] -1.326994e-02  8.738964e-03 -3.120187e-02 -6.407897e-03 -1.191726e-02 #>  [972,] -2.469527e-02 -4.048016e-03 -2.572429e-02 -2.051008e-02  4.135910e-02 #>  [973,] -2.454277e-02  4.033433e-02 -2.870840e-02 -2.118860e-02 -4.843499e-03 #>  [974,] -1.693838e-02 -2.865153e-03  1.888028e-02 -7.416867e-03 -2.959503e-02 #>  [975,] -1.892816e-02  1.621995e-02 -3.586639e-02 -5.590576e-03  4.149534e-02 #>  [976,]  1.707563e-19 -2.183368e-19  4.712280e-18  9.904904e-18 -4.194298e-17 #>  [977,] -5.556667e-03 -6.711564e-03  1.580196e-03  2.310066e-02  1.688004e-02 #>  [978,] -1.892816e-02  1.621995e-02 -3.586639e-02 -5.590576e-03  4.149534e-02 #>  [979,] -2.902130e-02 -4.312945e-02  2.404110e-03  6.232020e-02  2.627899e-02 #>  [980,] -1.224241e-02  4.754193e-03 -1.714310e-02  8.755042e-03  2.918769e-02 #>  [981,] -2.356619e-02 -2.222534e-02 -5.420800e-03  1.693620e-02  4.593150e-02 #>  [982,] -1.795857e-02  4.306112e-02 -1.622983e-02 -2.912632e-02  1.938141e-02 #>  [983,] -4.045362e-02  3.348440e-02  4.230654e-03 -1.344253e-02  6.666425e-03 #>  [984,] -4.816723e-02 -8.240741e-02 -3.849044e-03  2.525598e-02 -3.932333e-02 #>  [985,] -2.259660e-02  4.615833e-03  1.421576e-02 -6.599546e-03  2.381757e-02 #>  [986,] -3.963653e-02  1.594323e-02  2.685133e-02 -3.629975e-02  3.075510e-02 #>  [987,] -2.049794e-02  1.327968e-02  5.415582e-02  7.310985e-03  6.276037e-03 #>  [988,] -3.209654e-02  1.076636e-02 -6.082355e-02  1.028487e-02 -6.954474e-03 #>  [989,] -3.127946e-02 -6.774810e-03 -3.820287e-02 -1.257236e-02  1.713420e-02 #>  [990,] -3.714812e-02 -1.285023e-02 -3.430548e-02 -4.977520e-02  5.353052e-02 #>  [991,] -2.708213e-02  1.055289e-02  4.167724e-02  1.524871e-02 -1.794887e-02 #>  [992,] -3.622948e-02 -4.458395e-02 -5.440089e-03 -5.034908e-02  4.108664e-02 #>  [993,] -3.597542e-02 -1.439416e-02 -2.179490e-03 -2.874427e-02 -4.164852e-02 #>  [994,] -3.591748e-02 -4.522010e-02 -7.757279e-03  9.954419e-03  2.157036e-02 #>  [995,] -2.444121e-02  2.614178e-02 -2.246369e-02  1.094737e-03 -4.137605e-02 #>  [996,]  1.182149e-20 -2.138658e-20  4.957266e-19  1.043617e-18 -4.438631e-18 #>  [997,] -1.882660e-02  2.027399e-03 -2.962168e-02  1.669276e-02  4.962785e-03 #>  [998,] -2.331213e-02  7.964455e-03 -2.160201e-03  3.854101e-02 -3.680365e-02 #>  [999,] -2.234255e-02  3.480563e-02  1.747636e-02  1.500527e-02 -5.891759e-02 #> [1000,] -4.076561e-02  3.412055e-02  6.547844e-03 -7.374603e-02  2.618270e-02 #>  #> $nconv #> [1] 5 #>  #> $niter #> [1] 1 #>  #> $nops #> [1] 20 #>   n <- 1000 d <- 100  k1 <- 5 k2 <- 3  X <- matrix(rpois(n = n * k1, 1), nrow = n) Y <- matrix(rpois(n = d * k2, 1), nrow = d) S <- matrix(runif(n = k1 * k2, 0, .1), nrow = k1)  dfm <- directed_factor_model(X = X, S = S, Y = Y)  expected_edges(dfm) #> [1] 104573.9 expected_in_degree(dfm) #> [1] 1045.739 expected_out_degree(dfm) #> [1] 104.5739  svds(dfm) #> $d #> [1] 416.897984  19.594926   5.682794 #>  #> $u #>                [,1]          [,2]          [,3] #>    [1,] 0.011026736  0.0254565020 -1.835390e-02 #>    [2,] 0.008659212  0.0190745244  2.679943e-02 #>    [3,] 0.046527618 -0.0182010900 -5.499932e-03 #>    [4,] 0.044848168 -0.0453580251 -4.548423e-03 #>    [5,] 0.039395637 -0.0171499361  1.553488e-02 #>    [6,] 0.026844828 -0.0235263934 -2.622465e-02 #>    [7,] 0.011314532 -0.0119942425 -3.021903e-03 #>    [8,] 0.022552954 -0.0275041134  1.834907e-02 #>    [9,] 0.017867764  0.0226503695 -4.244151e-02 #>   [10,] 0.052925473 -0.0297934577  1.614539e-02 #>   [11,] 0.037501343 -0.0425462212 -1.095930e-02 #>   [12,] 0.010950626  0.0219408736  6.038974e-03 #>   [13,] 0.026371598 -0.0045120858  4.542285e-02 #>   [14,] 0.042708973 -0.0411931176 -3.257371e-02 #>   [15,] 0.031394442 -0.0291988751 -2.955181e-02 #>   [16,] 0.043660613  0.0538340497 -1.540347e-02 #>   [17,] 0.028084263  0.0340500295  6.277590e-03 #>   [18,] 0.053371804  0.0181985005 -4.186673e-02 #>   [19,] 0.026814772  0.0042741494 -3.100888e-04 #>   [20,] 0.044054575 -0.0079016092 -5.037891e-02 #>   [21,] 0.020446974 -0.0119340257 -4.786997e-02 #>   [22,] 0.023792389  0.0300723094  5.085131e-02 #>   [23,] 0.042421178 -0.0037423731 -4.790571e-02 #>   [24,] 0.041029034 -0.0213091721  1.306168e-02 #>   [25,] 0.013314992 -0.0108828718 -2.683516e-02 #>   [26,] 0.068319547  0.0107598486  6.916464e-02 #>   [27,] 0.028818390  0.0445912431 -3.640254e-02 #>   [28,] 0.041375515  0.1293791464 -1.920139e-02 #>   [29,] 0.051107288 -0.0516741145 -3.474165e-02 #>   [30,] 0.011026736  0.0254565020 -1.835390e-02 #>   [31,] 0.015500240  0.0162683919  2.711814e-03 #>   [32,] 0.024708792  0.0198442371 -6.652913e-02 #>   [33,] 0.026447708 -0.0009964575  2.102998e-02 #>   [34,] 0.041319988 -0.0195541936  1.611449e-02 #>   [35,] 0.013314992 -0.0108828718 -2.683516e-02 #>   [36,] 0.032851879  0.0658226208  1.811692e-02 #>   [37,] 0.039031732  0.0167851801  2.459575e-02 #>   [38,] 0.006473964 -0.0080767393 -2.747550e-03 #>   [39,] 0.051735249 -0.0168479864 -2.711435e-02 #>   [40,] 0.015711926 -0.0246979810  4.243668e-02 #>   [41,] 0.008659212  0.0190745244  2.679943e-02 #>   [42,] 0.039004833  0.0837914458  3.823112e-02 #>   [43,] 0.015711926 -0.0246979810  4.243668e-02 #>   [44,] 0.028451327  0.0393206363 -1.506247e-02 #>   [45,] 0.026553874 -0.0252813719 -2.927746e-02 #>   [46,] 0.051077232 -0.0238735718 -8.827092e-03 #>   [47,] 0.021974204  0.0081916526 -3.573635e-05 #>   [48,] 0.032560925  0.0640676424  1.506411e-02 #>   [49,] 0.039980702  0.0255657439  9.361303e-03 #>   [50,] 0.015711926 -0.0246979810  4.243668e-02 #>   [51,] 0.010947468 -0.0172648494  1.831816e-02 #>   [52,] 0.019398153  0.0819817708 -6.886465e-03 #>   [53,] 0.046236665 -0.0199560685 -8.552739e-03 #>   [54,] 0.028735964 -0.0373358312  1.254871e-02 #>   [55,] 0.013605946 -0.0091278933 -2.378236e-02 #>   [56,] 0.013682056 -0.0056122649 -4.817523e-02 #>   [57,] 0.004185708  0.0282626344  5.733716e-03 #>   [58,] 0.010659673  0.0201858951  2.986166e-03 #>   [59,] 0.055186831  0.0008734343  2.129950e-02 #>   [60,] 0.019897634  0.0035646535  4.817040e-02 #>   [61,] 0.013238882 -0.0143985001 -2.442293e-03 #>   [62,] 0.015212444  0.0537191364 -1.262018e-02 #>   [63,] 0.008947008 -0.0183762201  4.213142e-02 #>   [64,] 0.021610299  0.0421267688  9.025140e-03 #>   [65,] 0.017500700  0.0173797627 -2.110145e-02 #>   [66,] 0.020079910 -0.0172046326 -2.652991e-02 #>   [67,] 0.047106368 -0.0538968561  1.288487e-02 #>   [68,] 0.033215784  0.0318875047  9.056045e-03 #>   [69,] 0.037113697  0.0976008836 -5.422339e-04 #>   [70,] 0.010947468 -0.0172648494  1.831816e-02 #>   [71,] 0.010950626  0.0219408736  6.038974e-03 #>   [72,] 0.027288001 -0.0147401582 -7.195759e-02 #>   [73,] 0.048425071  0.0464009181  8.715051e-03 #>   [74,] 0.029103028 -0.0320652244 -8.791355e-03 #>   [75,] 0.013605946 -0.0091278933 -2.378236e-02 #>   [76,] 0.031318332 -0.0327145035 -5.158938e-03 #>   [77,] 0.017791654  0.0191347412 -1.804864e-02 #>   [78,] 0.018079450 -0.0183160033 -2.716645e-03 #>   [79,] 0.025792849  0.0311836802  2.703804e-02 #>   [80,] 0.035656260  0.0025793877 -4.821097e-02 #>   [81,] 0.033579690 -0.0020476114 -4.831265e-06 #>   [82,] 0.030954427  0.0012206127  3.901939e-03 #>   [83,] 0.036235009 -0.0331163783 -2.982616e-02 #>   [84,] 0.015133177  0.0109977851  2.405188e-02 #>   [85,] 0.019973744  0.0070802818  2.377753e-02 #>   [86,] 0.011314532 -0.0119942425 -3.021903e-03 #>   [87,] 0.061869323 -0.0873754008  7.055600e-02 #>   [88,] 0.013314992 -0.0108828718 -2.683516e-02 #>   [89,] 0.040417559 -0.0440594669 -1.181326e-02 #>   [90,] 0.032557767  0.0248619194  2.734330e-02 #>   [91,] 0.006841028 -0.0028061325 -2.408761e-02 #>   [92,] 0.004185708  0.0282626344  5.733716e-03 #>   [93,] 0.035216245  0.0329988755 -1.475722e-02 #>   [94,] 0.039395637 -0.0171499361  1.553488e-02 #>   [95,] 0.035507198  0.0347538540 -1.170441e-02 #>   [96,] 0.042421178 -0.0037423731 -4.790571e-02 #>   [97,] 0.044239362  0.0181382837  2.981335e-03 #>   [98,] 0.033394902 -0.0280875043 -5.336507e-02 #>   [99,] 0.041901895 -0.0160442367  2.222010e-02 #>  [100,] 0.008659212  0.0190745244  2.679943e-02 #>  [101,] 0.040341450 -0.0475750952  1.257961e-02 #>  [102,] 0.017867764  0.0226503695 -4.244151e-02 #>  [103,] 0.032924831  0.0301325262  6.003238e-03 #>  [104,] 0.032557767  0.0248619194  2.734330e-02 #>  [105,] 0.035791836 -0.0419026135  1.590677e-02 #>  [106,] 0.035213087 -0.0062068475 -2.478029e-03 #>  [107,] 0.027288001 -0.0147401582 -7.195759e-02 #>  [108,] 0.033500422 -0.0447689628  3.666723e-02 #>  [109,] 0.031685395 -0.0274438966 -2.649900e-02 #>  [110,] 0.023504593  0.0675230539  3.551931e-02 #>  [111,] 0.015136335  0.0502035080  1.177269e-02 #>  [112,] 0.051365028 -0.0613243163  6.504904e-03 #>  [113,] 0.020079910 -0.0172046326 -2.652991e-02 #>  [114,] 0.017424591  0.0138641343  3.291424e-03 #>  [115,] 0.059845769  0.0101217612 -4.461428e-02 #>  [116,] 0.024262460 -0.0281477211 -8.517003e-03 #>  [117,] 0.006841028 -0.0028061325 -2.408761e-02 #>  [118,] 0.010659673  0.0201858951  2.986166e-03 #>  [119,] 0.031030536  0.0047362410 -2.049093e-02 #>  [120,] 0.017867764  0.0226503695 -4.244151e-02 #>  [121,] 0.035580150 -0.0009362407 -2.381809e-02 #>  [122,] 0.038238628  0.0072007154 -6.591861e-02 #>  [123,] 0.019606680  0.0018096750  4.511759e-02 #>  [124,] 0.010950626  0.0219408736  6.038974e-03 #>  [125,] 0.062712774 -0.0619133786 -3.471075e-02 #>  [126,] 0.010947468 -0.0172648494  1.831816e-02 #>  [127,] 0.024186351 -0.0316633495  1.587587e-02 #>  [128,] 0.042268958 -0.0107736298  8.800361e-04 #>  [129,] 0.057584411 -0.0205451308 -4.976839e-02 #>  [130,] 0.028739122  0.0018698918  2.695211e-04 #>  [131,] 0.028739122  0.0018698918  2.695211e-04 #>  [132,] 0.057011331  0.1011655371  4.762816e-02 #>  [133,] 0.015133177  0.0109977851  2.405188e-02 #>  [134,] 0.028451327  0.0393206363 -1.506247e-02 #>  [135,] 0.021607141  0.0029210458  2.130433e-02 #>  [136,] 0.006764918 -0.0063217608  3.052575e-04 #>  [137,] 0.026768718 -0.0270420217 -1.831778e-03 #>  [138,] 0.026735504 -0.0384472020  3.636197e-02 #>  [139,] 0.043693181  0.0728426859  8.674252e-02 #>  [140,] 0.056027124 -0.0128702664 -7.168806e-02 #>  [141,] 0.040526884 -0.0291386583 -7.439988e-02 #>  [142,] 0.028739122  0.0018698918  2.695211e-04 #>  [143,] 0.017318424  0.0381490487  5.359886e-02 #>  [144,] 0.045584964  0.0514297921 -1.482386e-02 #>  [145,] 0.033212626 -0.0073182183  2.133523e-02 #>  [146,] 0.058136262  0.0107653689 -1.774821e-02 #>  [147,] 0.034743015  0.0520131830  5.689028e-02 #>  [148,] 0.020079910 -0.0172046326 -2.652991e-02 #>  [149,] 0.047076958 -0.0336997692 -1.015403e-01 #>  [150,] 0.044481105 -0.0506286319  1.679164e-02 #>  [151,] 0.041584043  0.0492070506  3.280267e-02 #>  [152,] 0.013529836 -0.0126435216  6.105150e-04 #>  [153,] 0.030660315 -0.0397400888  1.312832e-02 #>  [154,] 0.032848721  0.0266168979  3.039611e-02 #>  [155,] 0.024341728  0.0145736302 -4.518906e-02 #>  [156,] 0.035289196 -0.0026912191 -2.687090e-02 #>  [157,] 0.024556572  0.0128129803 -1.774338e-02 #>  [158,] 0.015424130  0.0127527635  2.710469e-02 #>  [159,] 0.023583861  0.1102444053 -1.152749e-03 #>  [160,] 0.022189048  0.0064310027  2.740994e-02 #>  [161,] 0.012844921  0.0473371588  3.253314e-02 #>  [162,] 0.004185708  0.0282626344  5.733716e-03 #>  [163,] 0.020003800 -0.0207202609 -2.137035e-03 #>  [164,] 0.030448629  0.0012262841 -2.659655e-02 #>  [165,] 0.044633324 -0.0435973752 -3.199410e-02 #>  [166,] 0.037107381  0.0191894377  2.401614e-02 #>  [167,] 0.017894016 -0.0367524403  8.426285e-02 #>  [168,] 0.024341728  0.0145736302 -4.518906e-02 #>  [169,] 0.042054114 -0.0090129800 -2.656564e-02 #>  [170,] 0.015133177  0.0109977851  2.405188e-02 #>  [171,] 0.031394442 -0.0291988751 -2.955181e-02 #>  [172,] 0.028815232  0.0053855201 -2.412335e-02 #>  [173,] 0.022552954 -0.0275041134  1.834907e-02 #>  [174,] 0.015212444  0.0537191364 -1.262018e-02 #>  [175,] 0.029026918 -0.0355808527  1.560152e-02 #>  [176,] 0.039765858  0.0273263938 -1.808438e-02 #>  [177,] 0.024265618  0.0110580019 -2.079619e-02 #>  [178,] 0.031030536  0.0047362410 -2.049093e-02 #>  [179,] 0.010950626  0.0219408736  6.038974e-03 #>  [180,] 0.022265158  0.0099466311  3.017071e-03 #>  [181,] 0.032848721  0.0266168979  3.039611e-02 #>  [182,] 0.037686130 -0.0165063284  4.240094e-02 #>  [183,] 0.044239362  0.0181382837  2.981335e-03 #>  [184,] 0.035001401  0.0347595254 -4.220290e-02 #>  [185,] 0.044484263 -0.0114229090  4.512454e-03 #>  [186,] 0.030663473 -0.0005343658  8.491311e-04 #>  [187,] 0.046375399 -0.0252323468  4.328581e-02 #>  [188,] 0.004473504 -0.0091881101  2.106571e-02 #>  [189,] 0.044742002 -0.0210731107  4.575901e-02 #>  [190,] 0.028375217  0.0358050079  9.330398e-03 #>  [191,] 0.000000000  0.0000000000  0.000000e+00 #>  [192,] 0.041504775  0.0064856992  6.947473e-02 #>  [193,] 0.004473504 -0.0091881101  2.106571e-02 #>  [194,] 0.035580150 -0.0009362407 -2.381809e-02 #>  [195,] 0.013238882 -0.0143985001 -2.442293e-03 #>  [196,] 0.042497288 -0.0002267448 -7.229858e-02 #>  [197,] 0.034849181  0.0277282686  6.582847e-03 #>  [198,] 0.051080390  0.0153321512 -2.110628e-02 #>  [199,] 0.037504501 -0.0033404983 -2.323848e-02 #>  [200,] 0.017712386 -0.0235866102  1.862342e-02 #>  [201,] 0.010659673  0.0201858951  2.986166e-03 #>  [202,] 0.010950626  0.0219408736  6.038974e-03 #>  [203,] 0.013314992 -0.0108828718 -2.683516e-02 #>  [204,] 0.006764918 -0.0063217608  3.052575e-04 #>  [205,] 0.032845563 -0.0125888251  4.267530e-02 #>  [206,] 0.020079910 -0.0172046326 -2.652991e-02 #>  [207,] 0.021607141  0.0029210458  2.130433e-02 #>  [208,] 0.029470091 -0.0267946175 -3.013142e-02 #>  [209,] 0.048528079 -0.0170897193 -2.931319e-02 #>  [210,] 0.010659673  0.0201858951  2.986166e-03 #>  [211,] 0.026086961  0.0721443817  1.781166e-02 #>  [212,] 0.013314992 -0.0108828718 -2.683516e-02 #>  [213,] 0.046345342  0.0025681960  6.920037e-02 #>  [214,] 0.037656720  0.0036907585 -7.202423e-02 #>  [215,] 0.047109526 -0.0146911331  6.056837e-04 #>  [216,] 0.030848260  0.0255055271  5.420937e-02 #>  [217,] 0.050819493 -0.0142233700 -5.007365e-02 #>  [218,] 0.015136335  0.0502035080  1.177269e-02 #>  [219,] 0.004185708  0.0282626344  5.733716e-03 #>  [220,] 0.019421893 -0.0242302179 -8.242650e-03 #>  [221,] 0.015424130  0.0127527635  2.710469e-02 #>  [222,] 0.021894936 -0.0345296987  3.663632e-02 #>  [223,] 0.047793952 -0.0276309329  1.336693e-02 #>  [224,] 0.031132898 -0.0511509404  8.182055e-02 #>  [225,] 0.029030076  0.0036248703  3.322329e-03 #>  [226,] 0.032848721  0.0266168979  3.039611e-02 #>  [227,] 0.035292355  0.0365145038 -3.915009e-02 #>  [228,] 0.039474905  0.0255714153 -2.113718e-02 #>  [229,] 0.041580885  0.0100013276  4.508185e-02 #>  [230,] 0.024447248 -0.0021078282  4.484324e-02 #>  [231,] 0.040156015 -0.0660115322  9.955911e-02 #>  [232,] 0.017424591  0.0138641343  3.291424e-03 #>  [233,] 0.019322043  0.0784661425  1.750641e-02 #>  [234,] 0.026186811 -0.0305519787 -7.937393e-03 #>  [235,] 0.037656720  0.0036907585 -7.202423e-02 #>  [236,] 0.021319345  0.0403717903  5.972332e-03 #>  [237,] 0.039398795  0.0220557869  3.255687e-03 #>  [238,] 0.037977084 -0.0147513499  4.545375e-02 #>  [239,] 0.023504593  0.0675230539  3.551931e-02 #>  [240,] 0.052267456 -0.0368190430  3.443265e-02 #>  [241,] 0.013682056 -0.0056122649 -4.817523e-02 #>  [242,] 0.026738662  0.0007585210  2.408278e-02 #>  [243,] 0.034558228  0.0259732902  3.530040e-03 #>  [244,] 0.024447248 -0.0021078282  4.484324e-02 #>  [245,] 0.021319345  0.0403717903  5.972332e-03 #>  [246,] 0.035504040 -0.0044518690  5.747786e-04 #>  [247,] 0.006841028 -0.0028061325 -2.408761e-02 #>  [248,] 0.028739122  0.0018698918  2.695211e-04 #>  [249,] 0.035871104  0.0008187378 -2.076529e-02 #>  [250,] 0.010947468 -0.0172648494  1.831816e-02 #>  [251,] 0.017712386 -0.0235866102  1.862342e-02 #>  [252,] 0.008659212  0.0190745244  2.679943e-02 #>  [253,] 0.024632682  0.0163286087 -4.213625e-02 #>  [254,] 0.024265618  0.0110580019 -2.079619e-02 #>  [255,] 0.037613178  0.0191837663  5.451463e-02 #>  [256,] 0.049030718 -0.0563011136  1.346448e-02 #>  [257,] 0.037868406 -0.0372756144 -3.229936e-02 #>  [258,] 0.029103028 -0.0320652244 -8.791355e-03 #>  [259,] 0.024186351 -0.0316633495  1.587587e-02 #>  [260,] 0.019606680  0.0018096750  4.511759e-02 #>  [261,] 0.017500700  0.0173797627 -2.110145e-02 #>  [262,] 0.014845381  0.0484485296  8.719883e-03 #>  [263,] 0.018079450 -0.0183160033 -2.716645e-03 #>  [264,] 0.017791654  0.0191347412 -1.804864e-02 #>  [265,] 0.041978005 -0.0125286083 -2.172772e-03 #>  [266,] 0.039319527 -0.0206655644  3.992775e-02 #>  [267,] 0.015500240  0.0162683919  2.711814e-03 #>  [268,] 0.042159634 -0.0256944384  6.346666e-02 #>  [269,] 0.021686409  0.0456423971 -1.536773e-02 #>  [270,] 0.047846322  0.0820966841 -9.669752e-03 #>  [271,] 0.024262460 -0.0281477211 -8.517003e-03 #>  [272,] 0.006841028 -0.0028061325 -2.408761e-02 #>  [273,] 0.015136335  0.0502035080  1.177269e-02 #>  [274,] 0.023583861  0.1102444053 -1.152749e-03 #>  [275,] 0.034819125  0.0555288114  3.249741e-02 #>  [276,] 0.032633877  0.0283775477  2.950430e-03 #>  [277,] 0.023974665  0.0093030234 -2.384900e-02 #>  [278,] 0.022262000 -0.0292590919  1.529626e-02 #>  [279,] 0.037689288  0.0226993946  3.012176e-02 #>  [280,] 0.020446974 -0.0119340257 -4.786997e-02 #>  [281,] 0.021901253  0.0438817472  1.207795e-02 #>  [282,] 0.028818390  0.0445912431 -3.640254e-02 #>  [283,] 0.023504593  0.0675230539  3.551931e-02 #>  [284,] 0.044345529 -0.0061466307 -4.732610e-02 #>  [285,] 0.032842405 -0.0517945481  5.495448e-02 #>  [286,] 0.023974665  0.0093030234 -2.384900e-02 #>  [287,] 0.026083803  0.0329386587  3.009085e-02 #>  [288,] 0.017712386 -0.0235866102  1.862342e-02 #>  [289,] 0.013238882 -0.0143985001 -2.442293e-03 #>  [290,] 0.033685856 -0.0263325258 -5.031226e-02 #>  [291,] 0.024553414 -0.0263927426 -5.464195e-03 #>  [292,] 0.037610020 -0.0200219567  6.679382e-02 #>  [293,] 0.021977362  0.0473973756 -1.231492e-02 #>  [294,] 0.042268958 -0.0107736298  8.800361e-04 #>  [295,] 0.028659854 -0.0408514596  3.694158e-02 #>  [296,] 0.028663013 -0.0016457366  2.466239e-02 #>  [297,] 0.006841028 -0.0028061325 -2.408761e-02 #>  [298,] 0.018003340 -0.0218316317  2.167623e-02 #>  [299,] 0.024708792  0.0198442371 -6.652913e-02 #>  [300,] 0.035867946 -0.0383869852 -8.486098e-03 #>  [301,] 0.026477765 -0.0287970002 -4.884585e-03 #>  [302,] 0.015500240  0.0162683919  2.711814e-03 #>  [303,] 0.048739765 -0.0580560921  1.041167e-02 #>  [304,] 0.004185708  0.0282626344  5.733716e-03 #>  [305,] 0.047000848 -0.0372153976 -7.714743e-02 #>  [306,] 0.019973744  0.0070802818  2.377753e-02 #>  [307,] 0.067770854  0.0186550719  2.486527e-02 #>  [308,] 0.059769659  0.0066061328 -2.022141e-02 #>  [309,] 0.021974204  0.0081916526 -3.573635e-05 #>  [310,] 0.011238422 -0.0155098709  2.137097e-02 #>  [311,] 0.081605129  0.0200740637 -7.209570e-02 #>  [312,] 0.035580150 -0.0009362407 -2.381809e-02 #>  [313,] 0.018155559 -0.0148003750 -2.710952e-02 #>  [314,] 0.019685948  0.0445310263  8.445530e-03 #>  [315,] 0.038023784  0.0089613653 -9.336429e-02 #>  [316,] 0.024189509  0.0075423735  3.596681e-03 #>  [317,] 0.004473504 -0.0091881101  2.106571e-02 #>  [318,] 0.042268958 -0.0107736298  8.800361e-04 #>  [319,] 0.017712386 -0.0235866102  1.862342e-02 #>  [320,] 0.037031271  0.0156738093  4.840901e-02 #>  [321,] 0.031103488 -0.0309538536 -3.260462e-02 #>  [322,] 0.019973744  0.0070802818  2.377753e-02 #>  [323,] 0.019973744  0.0070802818  2.377753e-02 #>  [324,] 0.000000000  0.0000000000  0.000000e+00 #>  [325,] 0.026450866  0.0382092655  8.750788e-03 #>  [326,] 0.038298094 -0.0407969142  2.259200e-02 #>  [327,] 0.010659673  0.0201858951  2.986166e-03 #>  [328,] 0.062352027  0.0112274606 -3.792906e-02 #>  [329,] 0.006841028 -0.0028061325 -2.408761e-02 #>  [330,] 0.028448169  0.0001149133 -2.783286e-03 #>  [331,] 0.030081566 -0.0040443228 -5.256484e-03 #>  [332,] 0.050925012 -0.0309048285  3.995865e-02 #>  [333,] 0.028815232  0.0053855201 -2.412335e-02 #>  [334,] 0.048425071  0.0464009181  8.715051e-03 #>  [335,] 0.020079910 -0.0172046326 -2.652991e-02 #>  [336,] 0.048425071  0.0464009181  8.715051e-03 #>  [337,] 0.031103488 -0.0309538536 -3.260462e-02 #>  [338,] 0.035583308  0.0382694823 -3.609728e-02 #>  [339,] 0.015133177  0.0109977851  2.405188e-02 #>  [340,] 0.031394442 -0.0291988751 -2.955181e-02 #>  [341,] 0.048161015 -0.0223603261 -7.973129e-03 #>  [342,] 0.031103488 -0.0309538536 -3.260462e-02 #>  [343,] 0.037900974 -0.0182669782  6.984662e-02 #>  [344,] 0.024265618  0.0110580019 -2.079619e-02 #>  [345,] 0.021686409  0.0456423971 -1.536773e-02 #>  [346,] 0.021974204  0.0081916526 -3.573635e-05 #>  [347,] 0.038083250 -0.0390362643 -4.853680e-03 #>  [348,] 0.017421433 -0.0253415887  1.557061e-02 #>  [349,] 0.035656260  0.0025793877 -4.821097e-02 #>  [350,] 0.030560465  0.0629562716  3.887738e-02 #>  [351,] 0.036922594 -0.0068504552 -2.934410e-02 #>  [352,] 0.026629984 -0.0217657435 -5.367033e-02 #>  [353,] 0.011026736  0.0254565020 -1.835390e-02 #>  [354,] 0.022341268  0.0134622594 -2.137580e-02 #>  [355,] 0.043584503  0.0503184214  8.989404e-03 #>  [356,] 0.052822465  0.0336971797  5.417363e-02 #>  [357,] 0.022262000 -0.0292590919  1.529626e-02 #>  [358,] 0.024477304 -0.0299083710  1.892868e-02 #>  [359,] 0.023898555  0.0057873950  5.438736e-04 #>  [360,] 0.033503580 -0.0055632398  2.438804e-02 #>  [361,] 0.035504040 -0.0044518690  5.747786e-04 #>  [362,] 0.026768718 -0.0270420217 -1.831778e-03 #>  [363,] 0.017788496 -0.0200709818 -5.769453e-03 #>  [364,] 0.024262460 -0.0281477211 -8.517003e-03 #>  [365,] 0.022189048  0.0064310027  2.740994e-02 #>  [366,] 0.030345621  0.0647169215  1.143170e-02 #>  [367,] 0.015711926 -0.0246979810  4.243668e-02 #>  [368,] 0.031103488 -0.0309538536 -3.260462e-02 #>  [369,] 0.041399255  0.0231671577 -2.055757e-02 #>  [370,] 0.018079450 -0.0183160033 -2.716645e-03 #>  [371,] 0.042133382  0.0337083714 -6.323770e-02 #>  [372,] 0.023898555  0.0057873950  5.438736e-04 #>  [373,] 0.023792389  0.0300723094  5.085131e-02 #>  [374,] 0.030448629  0.0012262841 -2.659655e-02 #>  [375,] 0.020370864 -0.0154496541 -2.347710e-02 #>  [376,] 0.021610299  0.0421267688  9.025140e-03 #>  [377,] 0.057769198  0.0054947621  3.591850e-03 #>  [378,] 0.008947008 -0.0183762201  4.213142e-02 #>  [379,] 0.019894476 -0.0356410695  6.044959e-02 #>  [380,] 0.028556846  0.0226391778  7.496983e-02 #>  [381,] 0.035791836 -0.0419026135  1.590677e-02 #>  [382,] 0.049186096 -0.0100641339 -4.760045e-02 #>  [383,] 0.011238422 -0.0155098709  2.137097e-02 #>  [384,] 0.028735964 -0.0373358312  1.254871e-02 #>  [385,] 0.032633877  0.0283775477  2.950430e-03 #>  [386,] 0.026371598 -0.0045120858  4.542285e-02 #>  [387,] 0.024080184 -0.0073784351  6.618330e-02 #>  [388,] 0.033318792 -0.0316031327 -2.897220e-02 #>  [389,] 0.024844368 -0.0246377642 -2.411388e-03 #>  [390,] 0.015133177  0.0109977851  2.405188e-02 #>  [391,] 0.004185708  0.0282626344  5.733716e-03 #>  [392,] 0.031030536  0.0047362410 -2.049093e-02 #>  [393,] 0.034846023 -0.0114774543  1.886204e-02 #>  [394,] 0.029026918 -0.0355808527  1.560152e-02 #>  [395,] 0.027026457 -0.0366922235  3.941478e-02 #>  [396,] 0.031318332 -0.0327145035 -5.158938e-03 #>  [397,] 0.044266261 -0.0488679821 -1.065404e-02 #>  [398,] 0.024189509  0.0075423735  3.596681e-03 #>  [399,] 0.011238422 -0.0155098709  2.137097e-02 #>  [400,] 0.038053194 -0.0112357215  2.106088e-02 #>  [401,] 0.033838076 -0.0193012691 -9.909801e-02 #>  [402,] 0.039501803 -0.0414348505 -3.477256e-02 #>  [403,] 0.038235470 -0.0320050076 -5.363942e-02 #>  [404,] 0.026553874 -0.0252813719 -2.927746e-02 #>  [405,] 0.017424591  0.0138641343  3.291424e-03 #>  [406,] 0.026083803  0.0329386587  3.009085e-02 #>  [407,] 0.031533176 -0.0344751533  2.228674e-02 #>  [408,] 0.037477602  0.0636657675 -9.603110e-03 #>  [409,] 0.024265618  0.0110580019 -2.079619e-02 #>  [410,] 0.029182296  0.0106561270 -4.546341e-02 #>  [411,] 0.004473504 -0.0091881101  2.106571e-02 #>  [412,] 0.029026918 -0.0355808527  1.560152e-02 #>  [413,] 0.021607141  0.0029210458  2.130433e-02 #>  [414,] 0.017867764  0.0226503695 -4.244151e-02 #>  [415,] 0.037501343 -0.0425462212 -1.095930e-02 #>  [416,] 0.032848721  0.0266168979  3.039611e-02 #>  [417,] 0.043684353 -0.0523779390 -1.675965e-02 #>  [418,] 0.030633417  0.0272661770  2.676369e-02 #>  [419,] 0.012844921  0.0473371588  3.253314e-02 #>  [420,] 0.053004741  0.0129278936 -2.052667e-02 #>  [421,] 0.017791654  0.0191347412 -1.804864e-02 #>  [422,] 0.011314532 -0.0119942425 -3.021903e-03 #>  [423,] 0.011026736  0.0254565020 -1.835390e-02 #>  [424,] 0.030951269 -0.0379851103  1.618113e-02 #>  [425,] 0.021898095  0.0046760242  2.435714e-02 #>  [426,] 0.020079910 -0.0172046326 -2.652991e-02 #>  [427,] 0.039107841  0.0203008084  2.028797e-04 #>  [428,] 0.033579690 -0.0020476114 -4.831265e-06 #>  [429,] 0.031470552 -0.0256832467 -5.394468e-02 #>  [430,] 0.041905053  0.0231614863  9.940913e-03 #>  [431,] 0.000000000  0.0000000000  0.000000e+00 #>  [432,] 0.029208547 -0.0487466828  8.124094e-02 #>  [433,] 0.024920477 -0.0211221358 -2.680426e-02 #>  [434,] 0.047981897  0.0376146829  5.444799e-02 #>  [435,] 0.057948316 -0.0544802470 -5.882927e-02 #>  [436,] 0.018003340 -0.0218316317  2.167623e-02 #>  [437,] 0.049030718 -0.0563011136  1.346448e-02 #>  [438,] 0.019973744  0.0070802818  2.377753e-02 #>  [439,] 0.030345621  0.0647169215  1.143170e-02 #>  [440,] 0.028735964 -0.0373358312  1.254871e-02 #>  [441,] 0.037319067 -0.0217769352  6.374101e-02 #>  [442,] 0.004185708  0.0282626344  5.733716e-03 #>  [443,] 0.034634338  0.0294889185 -2.086283e-02 #>  [444,] 0.023895397 -0.0334183280  1.282306e-02 #>  [445,] 0.027135782 -0.0217714149 -2.317184e-02 #>  [446,] 0.017424591  0.0138641343  3.291424e-03 #>  [447,] 0.022053472  0.0509130040 -3.670780e-02 #>  [448,] 0.035500882 -0.0436575920  1.285397e-02 #>  [449,] 0.039901434 -0.0171556075  4.603336e-02 #>  [450,] 0.022341268  0.0134622594 -2.137580e-02 #>  [451,] 0.015424130  0.0127527635  2.710469e-02 #>  [452,] 0.060348408 -0.0290896332 -1.836609e-03 #>  [453,] 0.017421433 -0.0253415887  1.557061e-02 #>  [454,] 0.037765398  0.0262150230  5.728885e-03 #>  [455,] 0.042268958 -0.0107736298  8.800361e-04 #>  [456,] 0.044924278 -0.0418423967 -2.894129e-02 #>  [457,] 0.013314992 -0.0108828718 -2.683516e-02 #>  [458,] 0.037580611  0.0001751301 -4.763136e-02 #>  [459,] 0.040420717 -0.0048537439 -2.409245e-02 #>  [460,] 0.020079910 -0.0172046326 -2.652991e-02 #>  [461,] 0.022341268  0.0134622594 -2.137580e-02 #>  [462,] 0.006841028 -0.0028061325 -2.408761e-02 #>  [463,] 0.026086961  0.0721443817  1.781166e-02 #>  [464,] 0.041898737 -0.0552499597  3.449929e-02 #>  [465,] 0.021898095  0.0046760242  2.435714e-02 #>  [466,] 0.031318332 -0.0327145035 -5.158938e-03 #>  [467,] 0.045584964  0.0514297921 -1.482386e-02 #>  [468,] 0.027793310  0.0322950510  3.224782e-03 #>  [469,] 0.024553414 -0.0263927426 -5.464195e-03 #>  [470,] 0.021607141  0.0029210458  2.130433e-02 #>  [471,] 0.004473504 -0.0091881101  2.106571e-02 #>  [472,] 0.044163253  0.0146226553  2.737421e-02 #>  [473,] 0.026368440 -0.0437178088  5.770204e-02 #>  [474,] 0.041687051 -0.0142835868 -5.225579e-03 #>  [475,] 0.015424130  0.0127527635  2.710469e-02 #>  [476,] 0.004473504 -0.0091881101  2.106571e-02 #>  [477,] 0.022053472  0.0509130040 -3.670780e-02 #>  [478,] 0.013529836 -0.0126435216  6.105150e-04 #>  [479,] 0.012844921  0.0473371588  3.253314e-02 #>  [480,] 0.031103488 -0.0309538536 -3.260462e-02 #>  [481,] 0.028269051  0.0600899223  5.963783e-02 #>  [482,] 0.037110539  0.0583951607  1.173695e-02 #>  [483,] 0.037504501 -0.0033404983 -2.323848e-02 #>  [484,] 0.012844921  0.0473371588  3.253314e-02 #>  [485,] 0.035289196 -0.0026912191 -2.687090e-02 #>  [486,] 0.037871564  0.0019301086 -4.457855e-02 #>  [487,] 0.019318885  0.0392604195  2.978559e-02 #>  [488,] 0.030663473 -0.0005343658  8.491311e-04 #>  [489,] 0.030663473 -0.0005343658  8.491311e-04 #>  [490,] 0.017421433 -0.0253415887  1.557061e-02 #>  [491,] 0.010947468 -0.0172648494  1.831816e-02 #>  [492,] 0.013605946 -0.0091278933 -2.378236e-02 #>  [493,] 0.030924370  0.0290211554  2.981650e-02 #>  [494,] 0.008371417  0.0565252689  1.146743e-02 #>  [495,] 0.019788956 -0.0189596110 -2.958271e-02 #>  [496,] 0.037762240 -0.0129907000  1.800807e-02 #>  [497,] 0.042268958 -0.0107736298  8.800361e-04 #>  [498,] 0.035504040 -0.0044518690  5.747786e-04 #>  [499,] 0.017791654  0.0191347412 -1.804864e-02 #>  [500,] 0.023507751  0.1067287769  2.324012e-02 #>  [501,] 0.044665892 -0.0245887391  7.015188e-02 #>  [502,] 0.020446974 -0.0119340257 -4.786997e-02 #>  [503,] 0.032633877  0.0283775477  2.950430e-03 #>  [504,] 0.031473710  0.0135224762 -6.622387e-02 #>  [505,] 0.030372519 -0.0022893443 -2.203677e-03 #>  [506,] 0.037401493  0.0601501391  1.478976e-02 #>  [507,] 0.035500882 -0.0436575920  1.285397e-02 #>  [508,] 0.011314532 -0.0119942425 -3.021903e-03 #>  [509,] 0.028739122  0.0018698918  2.695211e-04 #>  [510,] 0.028663013 -0.0016457366  2.466239e-02 #>  [511,] 0.017788496 -0.0200709818 -5.769453e-03 #>  [512,] 0.038159360 -0.0355206359 -2.924655e-02 #>  [513,] 0.044454206  0.0163776338  3.042701e-02 #>  [514,] 0.028735964 -0.0373358312  1.254871e-02 #>  [515,] 0.015212444  0.0537191364 -1.262018e-02 #>  [516,] 0.037610020 -0.0200219567  6.679382e-02 #>  [517,] 0.043581345  0.0111126984  2.126859e-02 #>  [518,] 0.004185708  0.0282626344  5.733716e-03 #>  [519,] 0.024553414 -0.0263927426 -5.464195e-03 #>  [520,] 0.000000000  0.0000000000  0.000000e+00 #>  [521,] 0.039107841  0.0203008084  2.028797e-04 #>  [522,] 0.033212626 -0.0073182183  2.133523e-02 #>  [523,] 0.026159913  0.0364542870  5.697980e-03 #>  [524,] 0.039686591 -0.0153949576  1.858768e-02 #>  [525,] 0.006841028 -0.0028061325 -2.408761e-02 #>  [526,] 0.026163071  0.0756600100 -6.581208e-03 #>  [527,] 0.039769017  0.0665321167 -3.036356e-02 #>  [528,] 0.033318792 -0.0316031327 -2.897220e-02 #>  [529,] 0.031242222 -0.0362301318  1.923393e-02 #>  [530,] 0.035794994 -0.0026968906  3.627586e-03 #>  [531,] 0.028372059 -0.0034007151  2.160959e-02 #>  [532,] 0.016742833  0.1130505377  2.293487e-02 #>  [533,] 0.057845308  0.0090103904 -2.080102e-02 #>  [534,] 0.023792389  0.0300723094  5.085131e-02 #>  [535,] 0.019788956 -0.0189596110 -2.958271e-02 #>  [536,] 0.083922795 -0.0364623969  3.384821e-02 #>  [537,] 0.017318424  0.0381490487  5.359886e-02 #>  [538,] 0.017791654  0.0191347412 -1.804864e-02 #>  [539,] 0.020370864 -0.0154496541 -2.347710e-02 #>  [540,] 0.033500422 -0.0447689628  3.666723e-02 #>  [541,] 0.028663013 -0.0016457366  2.466239e-02 #>  [542,] 0.038264879 -0.0522020944  6.078575e-02 #>  [543,] 0.037871564  0.0019301086 -4.457855e-02 #>  [544,] 0.048822191  0.0238709822 -3.853957e-02 #>  [545,] 0.047321211 -0.0556575059  4.033055e-02 #>  [546,] 0.017715544  0.0156191128  6.344231e-03 #>  [547,] 0.035216245  0.0329988755 -1.475722e-02 #>  [548,] 0.033291894  0.0354031331 -1.533683e-02 #>  [549,] 0.035735528  0.0453007390 -8.488302e-02 #>  [550,] 0.049030718 -0.0563011136  1.346448e-02 #>  [551,] 0.020294754 -0.0189652825  9.157725e-04 #>  [552,] 0.015500240  0.0162683919  2.711814e-03 #>  [553,] 0.064683178 -0.0330014650 -3.260945e-02 #>  [554,] 0.033291894  0.0354031331 -1.533683e-02 #>  [555,] 0.041396097 -0.0160385653 -8.278387e-03 #>  [556,] 0.026083803  0.0329386587  3.009085e-02 #>  [557,] 0.013314992 -0.0108828718 -2.683516e-02 #>  [558,] 0.024920477 -0.0211221358 -2.680426e-02 #>  [559,] 0.032924831  0.0301325262  6.003238e-03 #>  [560,] 0.030554149 -0.0154551744  6.343575e-02 #>  [561,] 0.043875457  0.0520733998  1.204221e-02 #>  [562,] 0.023795547  0.0692780324  3.857212e-02 #>  [563,] 0.018003340 -0.0218316317  2.167623e-02 #>  [564,] 0.024553414 -0.0263927426 -5.464195e-03 #>  [565,] 0.031136056 -0.0119452174  6.954137e-02 #>  [566,] 0.028663013 -0.0016457366  2.466239e-02 #>  [567,] 0.012844921  0.0473371588  3.253314e-02 #>  [568,] 0.037947674  0.0054457369 -6.897142e-02 #>  [569,] 0.011314532 -0.0119942425 -3.021903e-03 #>  [570,] 0.053735710 -0.0157366157 -5.092761e-02 #>  [571,] 0.053031639 -0.0540783721 -3.416204e-02 #>  [572,] 0.069222464 -0.0117757587  5.240850e-02 #>  [573,] 0.042268958 -0.0107736298  8.800361e-04 #>  [574,] 0.026844828 -0.0235263934 -2.622465e-02 #>  [575,] 0.026814772  0.0042741494 -3.100888e-04 #>  [576,] 0.004473504 -0.0091881101  2.106571e-02 #>  [577,] 0.037137437 -0.0086111051 -1.898419e-03 #>  [578,] 0.000000000  0.0000000000  0.000000e+00 #>  [579,] 0.039474905  0.0255714153 -2.113718e-02 #>  [580,] 0.024265618  0.0110580019 -2.079619e-02 #>  [581,] 0.032924831  0.0301325262  6.003238e-03 #>  [582,] 0.019606680  0.0018096750  4.511759e-02 #>  [583,] 0.019685948  0.0445310263  8.445530e-03 #>  [584,] 0.006764918 -0.0063217608  3.052575e-04 #>  [585,] 0.050819493 -0.0142233700 -5.007365e-02 #>  [586,] 0.006473964 -0.0080767393 -2.747550e-03 #>  [587,] 0.046375399 -0.0252323468  4.328581e-02 #>  [588,] 0.006841028 -0.0028061325 -2.408761e-02 #>  [589,] 0.031837615 -0.0204126399 -7.528475e-02 #>  [590,] 0.017424591  0.0138641343  3.291424e-03 #>  [591,] 0.024553414 -0.0263927426 -5.464195e-03 #>  [592,] 0.020446974 -0.0119340257 -4.786997e-02 #>  [593,] 0.031030536  0.0047362410 -2.049093e-02 #>  [594,] 0.041610941 -0.0177992152  1.916729e-02 #>  [595,] 0.046636296  0.0043231745  7.225318e-02 #>  [596,] 0.052710629 -0.0280328078 -1.130029e-02 #>  [597,] 0.013238882 -0.0143985001 -2.442293e-03 #>  [598,] 0.023974665  0.0093030234 -2.384900e-02 #>  [599,] 0.055739328  0.0245804781 -8.702006e-02 #>  [600,] 0.017500700  0.0173797627 -2.110145e-02 #>  [601,] 0.041610941 -0.0177992152  1.916729e-02 #>  [602,] 0.027135782 -0.0217714149 -2.317184e-02 #>  [603,] 0.027978097  0.0583349439  5.658502e-02 #>  [604,] 0.015133177  0.0109977851  2.405188e-02 #>  [605,] 0.040420717 -0.0048537439 -2.409245e-02 #>  [606,] 0.017715544  0.0156191128  6.344231e-03 #>  [607,] 0.006764918 -0.0063217608  3.052575e-04 #>  [608,] 0.021974204  0.0081916526 -3.573635e-05 #>  [609,] 0.013132716  0.0098864143  4.786514e-02 #>  [610,] 0.015424130  0.0127527635  2.710469e-02 #>  [611,] 0.019421893 -0.0242302179 -8.242650e-03 #>  [612,] 0.022185890 -0.0327747203  3.968913e-02 #>  [613,] 0.015133177  0.0109977851  2.405188e-02 #>  [614,] 0.046924738 -0.0407310260 -5.275456e-02 #>  [615,] 0.024447248 -0.0021078282  4.484324e-02 #>  [616,] 0.017424591  0.0138641343  3.291424e-03 #>  [617,] 0.026159913  0.0364542870  5.697980e-03 #>  [618,] 0.038314737  0.0107163438 -9.031148e-02 #>  [619,] 0.037613178  0.0191837663  5.451463e-02 #>  [620,] 0.022053472  0.0509130040 -3.670780e-02 #>  [621,] 0.015500240  0.0162683919  2.711814e-03 #>  [622,] 0.015212444  0.0537191364 -1.262018e-02 #>  [623,] 0.046818572 -0.0164461116 -2.447124e-03 #>  [624,] 0.028844642 -0.0148115667  9.030182e-02 #>  [625,] 0.035397874  0.0198330454  5.088221e-02 #>  [626,] 0.035368464  0.0400301322 -6.354296e-02 #>  [627,] 0.026553874 -0.0252813719 -2.927746e-02 #>  [628,] 0.026768718 -0.0270420217 -1.831778e-03 #>  [629,] 0.010950626  0.0219408736  6.038974e-03 #>  [630,] 0.035794994 -0.0026968906  3.627586e-03 #>  [631,] 0.030739583  0.0029812626 -2.354374e-02 #>  [632,] 0.015133177  0.0109977851  2.405188e-02 #>  [633,] 0.019685948  0.0445310263  8.445530e-03 #>  [634,] 0.044269419 -0.0096622591 -2.293323e-02 #>  [635,] 0.024920477 -0.0211221358 -2.680426e-02 #>  [636,] 0.013605946 -0.0091278933 -2.378236e-02 #>  [637,] 0.030845102 -0.0137001959  6.648856e-02 #>  [638,] 0.035213087 -0.0062068475 -2.478029e-03 #>  [639,] 0.017133637  0.0121091558  2.386161e-04 #>  [640,] 0.036740317  0.0139188308  4.535621e-02 #>  [641,] 0.055947856 -0.0555916177 -3.501600e-02 #>  [642,] 0.022185890 -0.0327747203  3.968913e-02 #>  [643,] 0.035289196 -0.0026912191 -2.687090e-02 #>  [644,] 0.006764918 -0.0063217608  3.052575e-04 #>  [645,] 0.031609286 -0.0309595250 -2.106130e-03 #>  [646,] 0.033609746 -0.0298481542 -2.591939e-02 #>  [647,] 0.026553874 -0.0252813719 -2.927746e-02 #>  [648,] 0.019712847 -0.0224752394 -5.189843e-03 #>  [649,] 0.026080645 -0.0062670643  4.237004e-02 #>  [650,] 0.021898095  0.0046760242  2.435714e-02 #>  [651,] 0.028375217  0.0358050079  9.330398e-03 #>  [652,] 0.017424591  0.0138641343  3.291424e-03 #>  [653,] 0.017424591  0.0138641343  3.291424e-03 #>  [654,] 0.035292355  0.0365145038 -3.915009e-02 #>  [655,] 0.026920938 -0.0200107650 -5.061752e-02 #>  [656,] 0.017791654  0.0191347412 -1.804864e-02 #>  [657,] 0.022262000 -0.0292590919  1.529626e-02 #>  [658,] 0.037319067 -0.0217769352  6.374101e-02 #>  [659,] 0.011314532 -0.0119942425 -3.021903e-03 #>  [660,] 0.029026918 -0.0355808527  1.560152e-02 #>  [661,] 0.037425233 -0.0460618496  1.343358e-02 #>  [662,] 0.035431089  0.0312382256  1.268846e-02 #>  [663,] 0.024480462  0.0092973520  6.649489e-03 #>  [664,] 0.028084263  0.0340500295  6.277590e-03 #>  [665,] 0.035213087 -0.0062068475 -2.478029e-03 #>  [666,] 0.022189048  0.0064310027  2.740994e-02 #>  [667,] 0.024477304 -0.0299083710  1.892868e-02 #>  [668,] 0.031212166 -0.0084295891  4.514849e-02 #>  [669,] 0.034846023 -0.0114774543  1.886204e-02 #>  [670,] 0.006841028 -0.0028061325 -2.408761e-02 #>  [671,] 0.050640375  0.0457516390  1.234747e-02 #>  [672,] 0.031212166 -0.0084295891  4.514849e-02 #>  [673,] 0.018079450 -0.0183160033 -2.716645e-03 #>  [674,] 0.017791654  0.0191347412 -1.804864e-02 #>  [675,] 0.021974204  0.0081916526 -3.573635e-05 #>  [676,] 0.031318332 -0.0327145035 -5.158938e-03 #>  [677,] 0.028451327  0.0393206363 -1.506247e-02 #>  [678,] 0.008947008 -0.0183762201  4.213142e-02 #>  [679,] 0.029317872 -0.0338258742  1.865432e-02 #>  [680,] 0.021610299  0.0421267688  9.025140e-03 #>  [681,] 0.031394442 -0.0291988751 -2.955181e-02 #>  [682,] 0.045690483  0.0347483337  7.520844e-02 #>  [683,] 0.018079450 -0.0183160033 -2.716645e-03 #>  [684,] 0.019606680  0.0018096750  4.511759e-02 #>  [685,] 0.037110539  0.0583951607  1.173695e-02 #>  [686,] 0.056511850  0.1795826545 -7.428699e-03 #>  [687,] 0.034052919 -0.0210619190 -7.165233e-02 #>  [688,] 0.026368440 -0.0437178088  5.770204e-02 #>  [689,] 0.024265618  0.0110580019 -2.079619e-02 #>  [690,] 0.024341728  0.0145736302 -4.518906e-02 #>  [691,] 0.022265158  0.0099466311  3.017071e-03 #>  [692,] 0.048997504 -0.0677062939  5.165823e-02 #>  [693,] 0.033080208  0.0763695059 -5.506169e-02 #>  [694,] 0.042268958 -0.0107736298  8.800361e-04 #>  [695,] 0.066971434 -0.0693408388 -4.109072e-02 #>  [696,] 0.017424591  0.0138641343  3.291424e-03 #>  [697,] 0.017712386 -0.0235866102  1.862342e-02 #>  [698,] 0.039901434 -0.0171556075  4.603336e-02 #>  [699,] 0.028663013 -0.0016457366  2.466239e-02 #>  [700,] 0.038159360 -0.0355206359 -2.924655e-02 #>  [701,] 0.020003800 -0.0207202609 -2.137035e-03 #>  [702,] 0.031242222 -0.0362301318  1.923393e-02 #>  [703,] 0.028739122  0.0018698918  2.695211e-04 #>  [704,] 0.037401493  0.0601501391  1.478976e-02 #>  [705,] 0.047406306  0.1125161719  2.378400e-02 #>  [706,] 0.026738662  0.0007585210  2.408278e-02 #>  [707,] 0.024367980 -0.0448291796  8.151530e-02 #>  [708,] 0.024262460 -0.0281477211 -8.517003e-03 #>  [709,] 0.012947929 -0.0161534786 -5.495100e-03 #>  [710,] 0.026447708 -0.0009964575  2.102998e-02 #>  [711,] 0.017788496 -0.0200709818 -5.769453e-03 #>  [712,] 0.014845381  0.0484485296  8.719883e-03 #>  [713,] 0.041220138  0.0831421667  4.186354e-02 #>  [714,] 0.030951269 -0.0379851103  1.618113e-02 #>  [715,] 0.030951269 -0.0379851103  1.618113e-02 #>  [716,] 0.022265158  0.0099466311  3.017071e-03 #>  [717,] 0.032713145  0.0710988991 -3.372163e-02 #>  [718,] 0.023504593  0.0675230539  3.551931e-02 #>  [719,] 0.033212626 -0.0073182183  2.133523e-02 #>  [720,] 0.020446974 -0.0119340257 -4.786997e-02 #>  [721,] 0.017791654  0.0191347412 -1.804864e-02 #>  [722,] 0.011026736  0.0254565020 -1.835390e-02 #>  [723,] 0.026768718 -0.0270420217 -1.831778e-03 #>  [724,] 0.033368004  0.0389187614 -3.972970e-02 #>  [725,] 0.015788036 -0.0211823526  1.804381e-02 #>  [726,] 0.024708792  0.0198442371 -6.652913e-02 #>  [727,] 0.030815693  0.0064968909 -4.793661e-02 #>  [728,] 0.035504040 -0.0044518690  5.747786e-04 #>  [729,] 0.013314992 -0.0108828718 -2.683516e-02 #>  [730,] 0.045899658 -0.0530272181 -1.312724e-02 #>  [731,] 0.019712847 -0.0224752394 -5.189843e-03 #>  [732,] 0.029103028 -0.0320652244 -8.791355e-03 #>  [733,] 0.004473504 -0.0091881101  2.106571e-02 #>  [734,] 0.015711926 -0.0246979810  4.243668e-02 #>  [735,] 0.015711926 -0.0246979810  4.243668e-02 #>  [736,] 0.013238882 -0.0143985001 -2.442293e-03 #>  [737,] 0.004473504 -0.0091881101  2.106571e-02 #>  [738,] 0.026374757  0.0346936372  3.314366e-02 #>  [739,] 0.035427931 -0.0079674974  2.496765e-02 #>  [740,] 0.040159820 -0.0344092651 -5.305981e-02 #>  [741,] 0.004185708  0.0282626344  5.733716e-03 #>  [742,] 0.013529836 -0.0126435216  6.105150e-04 #>  [743,] 0.050710169 -0.0291441786  1.251297e-02 #>  [744,] 0.053140317 -0.0315541076  4.359107e-02 #>  [745,] 0.028448169  0.0001149133 -2.783286e-03 #>  [746,] 0.037325383  0.0566345108  3.918263e-02 #>  [747,] 0.037504501 -0.0033404983 -2.323848e-02 #>  [748,] 0.013682056 -0.0056122649 -4.817523e-02 #>  [749,] 0.028663013 -0.0016457366  2.466239e-02 #>  [750,] 0.027102567 -0.0331765951  1.502191e-02 #>  [751,] 0.020523083 -0.0084183974 -7.226284e-02 #>  [752,] 0.008947008 -0.0183762201  4.213142e-02 #>  [753,] 0.028663013 -0.0016457366  2.466239e-02 #>  [754,] 0.017788496 -0.0200709818 -5.769453e-03 #>  [755,] 0.041610941 -0.0177992152  1.916729e-02 #>  [756,] 0.028448169  0.0001149133 -2.783286e-03 #>  [757,] 0.017133637  0.0121091558  2.386161e-04 #>  [758,] 0.010659673  0.0201858951  2.986166e-03 #>  [759,] 0.050925012 -0.0309048285  3.995865e-02 #>  [760,] 0.042526697 -0.0204238316  4.212659e-02 #>  [761,] 0.024708792  0.0198442371 -6.652913e-02 #>  [762,] 0.004473504 -0.0091881101  2.106571e-02 #>  [763,] 0.039977544 -0.0136399791  2.164049e-02 #>  [764,] 0.011314532 -0.0119942425 -3.021903e-03 #>  [765,] 0.022552954 -0.0275041134  1.834907e-02 #>  [766,] 0.073669227  0.0854798216 -8.546268e-03 #>  [767,] 0.048451969 -0.0206053476 -4.920322e-03 #>  [768,] 0.041690209  0.0249221362 -1.750477e-02 #>  [769,] 0.060288942  0.0189079964 -9.034722e-02 #>  [770,] 0.018079450 -0.0183160033 -2.716645e-03 #>  [771,] 0.024553414 -0.0263927426 -5.464195e-03 #>  [772,] 0.006764918 -0.0063217608  3.052575e-04 #>  [773,] 0.020079910 -0.0172046326 -2.652991e-02 #>  [774,] 0.040235930 -0.0308936368 -7.745269e-02 #>  [775,] 0.015133177  0.0109977851  2.405188e-02 #>  [776,] 0.019609839  0.0410153980  3.283840e-02 #>  [777,] 0.032924831  0.0301325262  6.003238e-03 #>  [778,] 0.018155559 -0.0148003750 -2.710952e-02 #>  [779,] 0.029317872 -0.0338258742  1.865432e-02 #>  [780,] 0.015133177  0.0109977851  2.405188e-02 #>  [781,] 0.031182756  0.0117674978 -6.927668e-02 #>  [782,] 0.017421433 -0.0253415887  1.557061e-02 #>  [783,] 0.028448169  0.0001149133 -2.783286e-03 #>  [784,] 0.024265618  0.0110580019 -2.079619e-02 #>  [785,] 0.011026736  0.0254565020 -1.835390e-02 #>  [786,] 0.058087050 -0.0597565252 -6.990715e-03 #>  [787,] 0.042086682  0.0099956562  7.558034e-02 #>  [788,] 0.018079450 -0.0183160033 -2.716645e-03 #>  [789,] 0.021977362  0.0473973756 -1.231492e-02 #>  [790,] 0.071081032 -0.0445938327 -1.096413e-02 #>  [791,] 0.022265158  0.0099466311  3.017071e-03 #>  [792,] 0.024556572  0.0128129803 -1.774338e-02 #>  [793,] 0.015711926 -0.0246979810  4.243668e-02 #>  [794,] 0.013605946 -0.0091278933 -2.378236e-02 #>  [795,] 0.036822743  0.0958459052 -3.595042e-03 #>  [796,] 0.043978465 -0.0114172375 -2.598603e-02 #>  [797,] 0.038264879 -0.0522020944  6.078575e-02 #>  [798,] 0.000000000  0.0000000000  0.000000e+00 #>  [799,] 0.047978739 -0.0015910401  6.672718e-02 #>  [800,] 0.046375399 -0.0252323468  4.328581e-02 #>  [801,] 0.042238902  0.0170269129  2.679460e-02 #>  [802,] 0.008371417  0.0565252689  1.146743e-02 #>  [803,] 0.030736425 -0.0362244604 -1.126455e-02 #>  [804,] 0.017712386 -0.0235866102  1.862342e-02 #>  [805,] 0.024159452  0.0353429163  2.951124e-02 #>  [806,] 0.026450866  0.0382092655  8.750788e-03 #>  [807,] 0.014845381  0.0484485296  8.719883e-03 #>  [808,] 0.032848721  0.0266168979  3.039611e-02 #>  [809,] 0.026374757  0.0346936372  3.314366e-02 #>  [810,] 0.018155559 -0.0148003750 -2.710952e-02 #>  [811,] 0.020079910 -0.0172046326 -2.652991e-02 #>  [812,] 0.048742923 -0.0188503691 -1.867514e-03 #>  [813,] 0.026450866  0.0382092655  8.750788e-03 #>  [814,] 0.017500700  0.0173797627 -2.110145e-02 #>  [815,] 0.021610299  0.0421267688  9.025140e-03 #>  [816,] 0.024341728  0.0145736302 -4.518906e-02 #>  [817,] 0.004473504 -0.0091881101  2.106571e-02 #>  [818,] 0.041005294  0.0849028166  1.441786e-02 #>  [819,] 0.022552954 -0.0275041134  1.834907e-02 #>  [820,] 0.055002043 -0.0251664586 -3.206074e-02 #>  [821,] 0.004185708  0.0282626344  5.733716e-03 #>  [822,] 0.055216887 -0.0269271084 -4.615064e-03 #>  [823,] 0.011238422 -0.0155098709  2.137097e-02 #>  [824,] 0.019318885  0.0392604195  2.978559e-02 #>  [825,] 0.026920938 -0.0200107650 -5.061752e-02 #>  [826,] 0.030951269 -0.0379851103  1.618113e-02 #>  [827,] 0.026371598 -0.0045120858  4.542285e-02 #>  [828,] 0.046606886  0.0245202613 -4.217199e-02 #>  [829,] 0.031609286 -0.0309595250 -2.106130e-03 #>  [830,] 0.036922594 -0.0068504552 -2.934410e-02 #>  [831,] 0.017788496 -0.0200709818 -5.769453e-03 #>  [832,] 0.017788496 -0.0200709818 -5.769453e-03 #>  [833,] 0.049655521 -0.0606807086  3.337097e-02 #>  [834,] 0.039554173  0.0682927666 -5.780924e-02 #>  [835,] 0.025872117  0.0739050315 -9.634015e-03 #>  [836,] 0.030663473 -0.0005343658  8.491311e-04 #>  [837,] 0.022552954 -0.0275041134  1.834907e-02 #>  [838,] 0.013238882 -0.0143985001 -2.442293e-03 #>  [839,] 0.044345529 -0.0061466307 -4.732610e-02 #>  [840,] 0.015212444  0.0537191364 -1.262018e-02 #>  [841,] 0.011314532 -0.0119942425 -3.021903e-03 #>  [842,] 0.017424591  0.0138641343  3.291424e-03 #>  [843,] 0.015420972 -0.0264529594  3.938387e-02 #>  [844,] 0.025872117  0.0739050315 -9.634015e-03 #>  [845,] 0.054852982  0.0070080077  4.445812e-03 #>  [846,] 0.041978005 -0.0125286083 -2.172772e-03 #>  [847,] 0.000000000  0.0000000000  0.000000e+00 #>  [848,] 0.024189509  0.0075423735  3.596681e-03 #>  [849,] 0.032921673 -0.0090731968  1.828243e-02 #>  [850,] 0.021898095  0.0046760242  2.435714e-02 #>  [851,] 0.010950626  0.0219408736  6.038974e-03 #>  [852,] 0.021607141  0.0029210458  2.130433e-02 #>  [853,] 0.029241762 -0.0373415026  4.304720e-02 #>  [854,] 0.026526976  0.0417248939 -1.564208e-02 #>  [855,] 0.013529836 -0.0126435216  6.105150e-04 #>  [856,] 0.044160094 -0.0245830677  3.965339e-02 #>  [857,] 0.050895603 -0.0107077416 -7.446652e-02 #>  [858,] 0.015420972 -0.0264529594  3.938387e-02 #>  [859,] 0.013132716  0.0098864143  4.786514e-02 #>  [860,] 0.026371598 -0.0045120858  4.542285e-02 #>  [861,] 0.039610481 -0.0189105859  4.298055e-02 #>  [862,] 0.041216979  0.0439364437  5.414273e-02 #>  [863,] 0.026163071  0.0756600100 -6.581208e-03 #>  [864,] 0.044894221 -0.0140418540 -3.026734e-03 #>  [865,] 0.010659673  0.0201858951  2.986166e-03 #>  [866,] 0.049397782 -0.0510305068 -7.875583e-03 #>  [867,] 0.018003340 -0.0218316317  2.167623e-02 #>  [868,] 0.006841028 -0.0028061325 -2.408761e-02 #>  [869,] 0.022185890 -0.0327747203  3.968913e-02 #>  [870,] 0.022629063 -0.0239884851 -6.043805e-03 #>  [871,] 0.042054114 -0.0090129800 -2.656564e-02 #>  [872,] 0.037504501 -0.0033404983 -2.323848e-02 #>  [873,] 0.008947008 -0.0183762201  4.213142e-02 #>  [874,] 0.017867764  0.0226503695 -4.244151e-02 #>  [875,] 0.050848903 -0.0344204568  6.435152e-02 #>  [876,] 0.050637217  0.0065459160  2.462666e-02 #>  [877,] 0.019609839  0.0410153980  3.283840e-02 #>  [878,] 0.053689009 -0.0394493308  8.789043e-02 #>  [879,] 0.024265618  0.0110580019 -2.079619e-02 #>  [880,] 0.017424591  0.0138641343  3.291424e-03 #>  [881,] 0.026553874 -0.0252813719 -2.927746e-02 #>  [882,] 0.032633877  0.0283775477  2.950430e-03 #>  [883,] 0.024632682  0.0163286087 -4.213625e-02 #>  [884,] 0.037580611  0.0001751301 -4.763136e-02 #>  [885,] 0.024920477 -0.0211221358 -2.680426e-02 #>  [886,] 0.021898095  0.0046760242  2.435714e-02 #>  [887,] 0.024262460 -0.0281477211 -8.517003e-03 #>  [888,] 0.036455680  0.0905752983  1.774502e-02 #>  [889,] 0.008659212  0.0190745244  2.679943e-02 #>  [890,] 0.033288736 -0.0038025899 -3.057639e-03 #>  [891,] 0.046242981  0.0584553775 -3.311111e-02 #>  [892,] 0.021610299  0.0421267688  9.025140e-03 #>  [893,] 0.055369107 -0.0198958517 -5.340081e-02 #>  [894,] 0.044239362  0.0181382837  2.981335e-03 #>  [895,] 0.046745620  0.0192439831  9.666560e-03 #>  [896,] 0.022265158  0.0099466311  3.017071e-03 #>  [897,] 0.022265158  0.0099466311  3.017071e-03 #>  [898,] 0.041763161 -0.0107679584 -2.961845e-02 #>  [899,] 0.049106828 -0.0527854853 -1.092839e-02 #>  [900,] 0.042054114 -0.0090129800 -2.656564e-02 #>  [901,] 0.021974204  0.0081916526 -3.573635e-05 #>  [902,] 0.032163805  0.0865975783  6.231874e-02 #>  [903,] 0.057613821 -0.0407422177  6.465678e-02 #>  [904,] 0.022265158  0.0099466311  3.017071e-03 #>  [905,] 0.042054114 -0.0090129800 -2.656564e-02 #>  [906,] 0.032633877  0.0283775477  2.950430e-03 #>  [907,] 0.019318885  0.0392604195  2.978559e-02 #>  [908,] 0.024447248 -0.0021078282  4.484324e-02 #>  [909,] 0.011314532 -0.0119942425 -3.021903e-03 #>  [910,] 0.013605946 -0.0091278933 -2.378236e-02 #>  [911,] 0.024262460 -0.0281477211 -8.517003e-03 #>  [912,] 0.020370864 -0.0154496541 -2.347710e-02 #>  [913,] 0.060424518 -0.0255740048 -2.622948e-02 #>  [914,] 0.012947929 -0.0161534786 -5.495100e-03 #>  [915,] 0.035947214  0.0043343662 -4.515816e-02 #>  [916,] 0.011026736  0.0254565020 -1.835390e-02 #>  [917,] 0.037947674  0.0054457369 -6.897142e-02 #>  [918,] 0.019897634  0.0035646535  4.817040e-02 #>  [919,] 0.024477304 -0.0299083710  1.892868e-02 #>  [920,] 0.013314992 -0.0108828718 -2.683516e-02 #>  [921,] 0.029317872 -0.0338258742  1.865432e-02 #>  [922,] 0.031685395 -0.0274438966 -2.649900e-02 #>  [923,] 0.020156020 -0.0136890042 -5.092278e-02 #>  [924,] 0.041974847 -0.0517343313  1.010642e-02 #>  [925,] 0.031027378 -0.0344694819 -8.211745e-03 #>  [926,] 0.039689749  0.0238107654  6.308495e-03 #>  [927,] 0.028451327  0.0393206363 -1.506247e-02 #>  [928,] 0.034849181  0.0277282686  6.582847e-03 #>  [929,] 0.022185890 -0.0327747203  3.968913e-02 #>  [930,] 0.035001401  0.0347595254 -4.220290e-02 #>  [931,] 0.029317872 -0.0338258742  1.865432e-02 #>  [932,] 0.006764918 -0.0063217608  3.052575e-04 #>  [933,] 0.031397600  0.0100068479 -4.183100e-02 #>  [934,] 0.034925291  0.0312438970 -1.781002e-02 #>  [935,] 0.041690209  0.0249221362 -1.750477e-02 #>  [936,] 0.021974204  0.0081916526 -3.573635e-05 #>  [937,] 0.028739122  0.0018698918  2.695211e-04 #>  [938,] 0.031106646  0.0082518694 -4.488380e-02 #>  [939,] 0.031470552 -0.0256832467 -5.394468e-02 #>  [940,] 0.030663473 -0.0005343658  8.491311e-04 #>  [941,] 0.017712386 -0.0235866102  1.862342e-02 #>  [942,] 0.032633877  0.0283775477  2.950430e-03 #>  [943,] 0.024080184 -0.0073784351  6.618330e-02 #>  [944,] 0.017133637  0.0121091558  2.386161e-04 #>  [945,] 0.032845563 -0.0125888251  4.267530e-02 #>  [946,] 0.033209468 -0.0465239413  3.361442e-02 #>  [947,] 0.051007438  0.0510222459 -8.992595e-03 #>  [948,] 0.044163253  0.0146226553  2.737421e-02 #>  [949,] 0.035580150 -0.0009362407 -2.381809e-02 #>  [950,] 0.015424130  0.0127527635  2.710469e-02 #>  [951,] 0.006841028 -0.0028061325 -2.408761e-02 #>  [952,] 0.028739122  0.0018698918  2.695211e-04 #>  [953,] 0.024844368 -0.0246377642 -2.411388e-03 #>  [954,] 0.045793491 -0.0287423037  3.718020e-02 #>  [955,] 0.011314532 -0.0119942425 -3.021903e-03 #>  [956,] 0.024265618  0.0110580019 -2.079619e-02 #>  [957,] 0.031212166 -0.0084295891  4.514849e-02 #>  [958,] 0.034849181  0.0277282686  6.582847e-03 #>  [959,] 0.021977362  0.0473973756 -1.231492e-02 #>  [960,] 0.064716392 -0.0215962848 -7.080320e-02 #>  [961,] 0.050921854 -0.0701105515  5.223784e-02 #>  [962,] 0.039765858  0.0273263938 -1.808438e-02 #>  [963,] 0.031685395 -0.0274438966 -2.649900e-02 #>  [964,] 0.042192849 -0.0142892582  2.527291e-02 #>  [965,] 0.020261539 -0.0303704627  3.910952e-02 #>  [966,] 0.008371417  0.0565252689  1.146743e-02 #>  [967,] 0.033471012 -0.0245718760 -7.775794e-02 #>  [968,] 0.038159360 -0.0355206359 -2.924655e-02 #>  [969,] 0.026553874 -0.0252813719 -2.927746e-02 #>  [970,] 0.042268958 -0.0107736298  8.800361e-04 #>  [971,] 0.033368004  0.0389187614 -3.972970e-02 #>  [972,] 0.018155559 -0.0148003750 -2.710952e-02 #>  [973,] 0.041687051 -0.0142835868 -5.225579e-03 #>  [974,] 0.037477602  0.0636657675 -9.603110e-03 #>  [975,] 0.031103488 -0.0309538536 -3.260462e-02 #>  [976,] 0.041981163  0.0266771147 -1.445196e-02 #>  [977,] 0.037322225  0.0174287878  5.146182e-02 #>  [978,] 0.041660153  0.0527226789  8.409794e-03 #>  [979,] 0.006764918 -0.0063217608  3.052575e-04 #>  [980,] 0.013132716  0.0098864143  4.786514e-02 #>  [981,] 0.022185890 -0.0327747203  3.968913e-02 #>  [982,] 0.077164193  0.0482708099  8.984572e-03 #>  [983,] 0.021898095  0.0046760242  2.435714e-02 #>  [984,] 0.040083710 -0.0379248935 -2.866694e-02 #>  [985,] 0.048639915  0.0446402682  3.616073e-02 #>  [986,] 0.057481403  0.0429455066 -1.174015e-02 #>  [987,] 0.026768718 -0.0270420217 -1.831778e-03 #>  [988,] 0.035216245  0.0329988755 -1.475722e-02 #>  [989,] 0.031685395 -0.0274438966 -2.649900e-02 #>  [990,] 0.035318606 -0.0228883060  8.755427e-02 #>  [991,] 0.010947468 -0.0172648494  1.831816e-02 #>  [992,] 0.041981163  0.0266771147 -1.445196e-02 #>  [993,] 0.024186351 -0.0316633495  1.587587e-02 #>  [994,] 0.028160373  0.0375656578 -1.811528e-02 #>  [995,] 0.018079450 -0.0183160033 -2.716645e-03 #>  [996,] 0.024186351 -0.0316633495  1.587587e-02 #>  [997,] 0.044636482 -0.0043916522 -4.427329e-02 #>  [998,] 0.021686409  0.0456423971 -1.536773e-02 #>  [999,] 0.017424591  0.0138641343  3.291424e-03 #> [1000,] 0.035216245  0.0329988755 -1.475722e-02 #>  #> $v #>                [,1]          [,2]          [,3] #>   [1,] 8.514348e-02  8.628310e-02 -7.734185e-02 #>   [2,] 1.869791e-02 -1.773494e-02  7.974568e-02 #>   [3,] 4.770729e-02 -7.600085e-02  2.830516e-02 #>   [4,] 5.707643e-02  1.400860e-02 -6.439118e-02 #>   [5,] 8.608582e-02 -4.425731e-02 -1.158317e-01 #>   [6,] 2.900938e-02 -5.826591e-02 -5.144052e-02 #>   [7,] 1.702466e-01 -2.518762e-02  1.104547e-01 #>   [8,] 1.869791e-02 -1.773494e-02  7.974568e-02 #>   [9,] 6.546286e-02  3.680463e-02  1.465407e-01 #>  [10,] 2.095674e-01 -1.239845e-01 -7.217205e-02 #>  [11,] 1.869791e-02 -1.773494e-02  7.974568e-02 #>  [12,] 2.105098e-01 -2.545249e-01 -1.106619e-01 #>  [13,] 1.122682e-01  2.890980e-01 -5.180266e-02 #>  [14,] 1.506063e-01  1.230877e-01  6.919884e-02 #>  [15,] 8.514348e-02  8.628310e-02 -7.734185e-02 #>  [16,] 5.707643e-02  1.400860e-02 -6.439118e-02 #>  [17,] 1.028991e-01  1.990886e-01  4.089368e-02 #>  [18,] 1.047837e-01 -6.199225e-02 -3.608602e-02 #>  [19,] 6.640520e-02 -9.373578e-02  1.080508e-01 #>  [20,] 6.640520e-02 -9.373578e-02  1.080508e-01 #>  [21,] 1.028991e-01  1.990886e-01  4.089368e-02 #>  [22,] 5.707643e-02  1.400860e-02 -6.439118e-02 #>  [23,] 1.047837e-01 -6.199225e-02 -3.608602e-02 #>  [24,] 1.524910e-01 -1.379931e-01 -7.780864e-03 #>  [25,] 9.447225e-02 -2.146128e-02  9.510017e-02 #>  [26,] 7.483200e-02  1.268141e-01  5.384435e-02 #>  [27,] 1.038414e-01  6.854817e-02  2.403829e-03 #>  [28,] 8.514348e-02  8.628310e-02 -7.734185e-02 #>  [29,] 1.815004e-01 -1.962590e-01 -5.922138e-02 #>  [30,] 2.067404e-01  2.676367e-01  4.329751e-02 #>  [31,] 1.786330e-01 -2.391578e-03  3.213865e-01 #>  [32,] 5.613410e-02  1.445490e-01 -2.590133e-02 #>  [33,] 9.447225e-02 -2.146128e-02  9.510017e-02 #>  [34,] 7.577434e-02 -3.726340e-03  1.535449e-02 #>  [35,] 1.225393e-01  5.081323e-02  8.214950e-02 #>  [36,] 4.770729e-02 -7.600085e-02  2.830516e-02 #>  [37,] 4.676496e-02  5.453957e-02  6.679501e-02 #>  [38,] 8.514348e-02  8.628310e-02 -7.734185e-02 #>  [39,] 7.483200e-02  1.268141e-01  5.384435e-02 #>  [40,] 2.806705e-02  7.227451e-02 -1.295066e-02 #>  [41,] 4.770729e-02 -7.600085e-02  2.830516e-02 #>  [42,] 2.900938e-02 -5.826591e-02 -5.144052e-02 #>  [43,] 7.577434e-02 -3.726340e-03  1.535449e-02 #>  [44,] 1.047837e-01 -6.199225e-02 -3.608602e-02 #>  [45,] 8.702815e-02 -1.747977e-01 -1.543216e-01 #>  [46,] 8.514348e-02  8.628310e-02 -7.734185e-02 #>  [47,] 2.900938e-02 -5.826591e-02 -5.144052e-02 #>  [48,] 7.577434e-02 -3.726340e-03  1.535449e-02 #>  [49,] 1.141529e-01  2.801719e-02 -1.287824e-01 #>  [50,] 1.141470e-18  1.788847e-18  5.590712e-17 #>  [51,] 2.189366e-01 -3.397506e-02 -1.648684e-01 #>  [52,] 2.806705e-02  7.227451e-02 -1.295066e-02 #>  [53,] 1.131702e-01 -3.919621e-02  1.748458e-01 #>  [54,] 1.038414e-01  6.854817e-02  2.403829e-03 #>  [55,] 6.640520e-02 -9.373578e-02  1.080508e-01 #>  [56,] 1.412776e-01  2.308321e-01 -1.032432e-01 #>  [57,] 7.577434e-02 -3.726340e-03  1.535449e-02 #>  [58,] 6.640520e-02 -9.373578e-02  1.080508e-01 #>  [59,] 1.141529e-01  2.801719e-02 -1.287824e-01 #>  [60,] 2.806705e-02  7.227451e-02 -1.295066e-02 #>  [61,] 1.431622e-01 -3.024872e-02 -1.802229e-01 #>  [62,] 8.608582e-02 -4.425731e-02 -1.158317e-01 #>  [63,] 6.640520e-02 -9.373578e-02  1.080508e-01 #>  [64,] 1.047837e-01 -6.199225e-02 -3.608602e-02 #>  [65,] 1.515487e-01 -7.452680e-03  3.070899e-02 #>  [66,] 5.707643e-02  1.400860e-02 -6.439118e-02 #>  [67,] 8.608582e-02 -4.425731e-02 -1.158317e-01 #>  [68,] 5.613410e-02  1.445490e-01 -2.590133e-02 #>  [69,] 1.225393e-01  5.081323e-02  8.214950e-02 #>  [70,] 2.900938e-02 -5.826591e-02 -5.144052e-02 #>  [71,] 6.546286e-02  3.680463e-02  1.465407e-01 #>  [72,] 8.608582e-02 -4.425731e-02 -1.158317e-01 #>  [73,] 9.352991e-02  1.090791e-01  1.335900e-01 #>  [74,] 9.447225e-02 -2.146128e-02  9.510017e-02 #>  [75,] 1.132105e-01  1.585576e-01 -9.029251e-02 #>  [76,] 1.869791e-02 -1.773494e-02  7.974568e-02 #>  [77,] 1.918119e-01 -2.367900e-01 -1.904076e-01 #>  [78,] 1.328104e-01 -1.874716e-01  2.161017e-01 #>  [79,] 8.608582e-02 -4.425731e-02 -1.158317e-01 #>  [80,] 7.577434e-02 -3.726340e-03  1.535449e-02 #>  [81,] 1.141529e-01  2.801719e-02 -1.287824e-01 #>  [82,] 1.869791e-02 -1.773494e-02  7.974568e-02 #>  [83,] 8.514348e-02  8.628310e-02 -7.734185e-02 #>  [84,] 1.038010e-01 -1.292057e-01  2.675422e-01 #>  [85,] 8.416077e-02  1.906970e-02  2.262864e-01 #>  [86,] 4.676496e-02  5.453957e-02  6.679501e-02 #>  [87,] 1.038010e-01 -1.292057e-01  2.675422e-01 #>  [88,] 5.801877e-02 -1.165318e-01 -1.028810e-01 #>  [89,] 7.577434e-02 -3.726340e-03  1.535449e-02 #>  [90,] 1.796157e-01  6.482183e-02  1.775832e-02 #>  [91,] 1.047837e-01 -6.199225e-02 -3.608602e-02 #>  [92,] 2.900938e-02 -5.826591e-02 -5.144052e-02 #>  [93,] 1.786734e-01  1.953622e-01  5.624818e-02 #>  [94,] 7.577434e-02 -3.726340e-03  1.535449e-02 #>  [95,] 8.514348e-02  8.628310e-02 -7.734185e-02 #>  [96,] 4.770729e-02 -7.600085e-02  2.830516e-02 #>  [97,] 5.801877e-02 -1.165318e-01 -1.028810e-01 #>  [98,] 5.707643e-02  1.400860e-02 -6.439118e-02 #>  [99,] 2.900938e-02 -5.826591e-02 -5.144052e-02 #> [100,] 2.806705e-02  7.227451e-02 -1.295066e-02 #>  #> $niter #> [1] 1 #>  #> $nops #> [1] 43 #>"},{"path":"https://rohelab.github.io/fastRG/dev/reference/mmsbm.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an undirected degree-corrected mixed membership stochastic blockmodel object ‚Äî mmsbm","title":"Create an undirected degree-corrected mixed membership stochastic blockmodel object ‚Äî mmsbm","text":"specify degree-corrected mixed membership stochastic blockmodel, must specify degree-heterogeneity parameters (via n theta), mixing matrix (via k B), relative block propensities (optional, via alpha). provide defaults options enable rapid exploration, can invest effort control model parameters. strongly recommend setting expected_degree expected_density argument avoid large memory allocations associated sampling large, dense graphs.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/mmsbm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an undirected degree-corrected mixed membership stochastic blockmodel object ‚Äî mmsbm","text":"","code":"mmsbm(   n = NULL,   theta = NULL,   k = NULL,   B = NULL,   ...,   alpha = rep(1, k),   sort_nodes = TRUE,   force_pure = TRUE,   poisson_edges = TRUE,   allow_self_loops = TRUE )"},{"path":"https://rohelab.github.io/fastRG/dev/reference/mmsbm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an undirected degree-corrected mixed membership stochastic blockmodel object ‚Äî mmsbm","text":"n (degree heterogeneity) number nodes blockmodel. Use want specify degree-heterogeneity parameters theta hand. n specified, theta randomly generated LogNormal(2, 1) distribution. subject change, may reproducible. n defaults NULL. must specify either n theta, . theta (degree heterogeneity) numeric vector explicitly specifying degree heterogeneity parameters. implicitly determines number nodes resulting graph, .e. length(theta) nodes. Must positive. Setting vector ones recovers stochastic blockmodel without degree correction. Defaults NULL. must specify either n theta, . k (mixing matrix) number blocks blockmodel. Use want specify mixing-matrix hand. k specified, elements B drawn randomly Uniform(0, 1) distribution. subject change, may reproducible. k defaults NULL. must specify either k B, . B (mixing matrix) k k matrix block connection probabilities. probability node block connects node community j Poisson(B[, j]). Must square matrix. matrix Matrix objects acceptable. B symmetric, symmetrized via update B := B + t(B). Defaults NULL. must specify either k B, . ... Arguments passed undirected_factor_model expected_degree specified, desired expected degree graph. Specifying expected_degree simply rescales S achieve . Defaults NULL. specify expected_degree expected_density time. expected_density specified, desired expected density graph. Specifying expected_density simply rescales S achieve . Defaults NULL. specify expected_degree expected_density time. alpha (relative block propensities) Relative block propensities, parameters Dirichlet distribution. elments alpha must thus positive. Must match dimensions B k. Defaults rep(1, k), balanced membership across blocks. sort_nodes Logical indicating whether sort nodes grouped block theta. Useful plotting. Defaults TRUE. TRUE, nodes first sorted block membership, degree-correction parameters within block. Additionally, pi sorted increasing order, columns B matrix permuted match new order pi. force_pure Logical indicating whether force presence \"pure nodes\" (nodes belong single community) sake identifiability. include pure nodes, block membership sampling first proceeds per usual. , complete, k nodes chosen randomly pure nodes, one block. Defaults TRUE. poisson_edges Logical indicating whether multiple edges allowed form pair nodes. Defaults TRUE. FALSE, sampling proceeds usual, duplicate edges removed afterwards. , FALSE, assume S specifies desired -factor connection probability, back-transform S appropriate Poisson intensity parameter approximate Bernoulli factor connection probabilities. See Section 2.3 Rohe et al. (2017) additional details. allow_self_loops Logical indicating whether nodes allowed form edges . Defaults TRUE. FALSE, sampling proceeds allowing self-loops, removed fact.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/mmsbm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an undirected degree-corrected mixed membership stochastic blockmodel object ‚Äî mmsbm","text":"undirected_mmsbm S3 object, subclass undirected_factor_model() following additional fields: theta: numeric vector degree-heterogeneity parameters. Z: community memberships node, matrix() k columns, whose row sums equal one. alpha: Community membership proportion propensities. sorted: Logical indicating nodes arranged block (additionally degree heterogeneity parameter) within block.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/mmsbm.html","id":"generative-model","dir":"Reference","previous_headings":"","what":"Generative Model","title":"Create an undirected degree-corrected mixed membership stochastic blockmodel object ‚Äî mmsbm","text":"two levels randomness degree-corrected stochastic blockmodel. First, randomly choose much node belongs block blockmodel. node one unit block membership distribute. handled mmsbm(). , given block memberships, randomly sample edges nodes. second operation handled sample_edgelist(), sample_sparse(), sample_igraph() sample_tidygraph(), depending depending desired graph representation.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/mmsbm.html","id":"block-memberships","dir":"Reference","previous_headings":"","what":"Block memberships","title":"Create an undirected degree-corrected mixed membership stochastic blockmodel object ‚Äî mmsbm","text":"Let \\(Z_i\\) vector k dimensional simplex representing block memberships node \\(\\). generate \\(z_i\\) sample Dirichlet distribution parameter vector \\(\\alpha\\). Block memberships node independent.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/mmsbm.html","id":"degree-heterogeneity","dir":"Reference","previous_headings":"","what":"Degree heterogeneity","title":"Create an undirected degree-corrected mixed membership stochastic blockmodel object ‚Äî mmsbm","text":"addition block membership, MMSBM also allows nodes different propensities edge formation. represent propensity node \\(\\) positive number \\(\\theta_i\\).","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/mmsbm.html","id":"edge-formulation","dir":"Reference","previous_headings":"","what":"Edge formulation","title":"Create an undirected degree-corrected mixed membership stochastic blockmodel object ‚Äî mmsbm","text":"know block membership vector \\(z_i, z_j\\) degree heterogeneity parameters \\(\\theta\\), need one ingredient, baseline intensity connections nodes block block j. given \\(k \\times k\\) matrix \\(B\\). edge \\(A_{,j}\\) Poisson distributed parameter $$   \\lambda_{, j} = \\theta_i \\cdot z_i^T  B z_j \\cdot \\theta_j. $$","code":""},{"path":[]},{"path":"https://rohelab.github.io/fastRG/dev/reference/mmsbm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an undirected degree-corrected mixed membership stochastic blockmodel object ‚Äî mmsbm","text":"","code":"set.seed(27)  lazy_mmsbm <- mmsbm(n = 100, k = 5, expected_density = 0.01) #> Generating random degree heterogeneity parameters `theta` from a LogNormal(2, 1) distribution. This distribution may change in the future. Explicitly set `theta` for reproducible results. #> Generating random mixing matrix `B` with independent Uniform(0, 1) entries. This distribution may change in the future. Explicitly set `B` for reproducible results. lazy_mmsbm #> Undirected Degree-Corrected Mixed Membership Stochastic Blockmodel #> ------------------------------------------------------------------ #>  #> Nodes (n): 100 (arranged by block) #> Blocks (k): 5 #>  #> Traditional MMSBM parameterization: #>  #> Block memberships portions (Z): 100 x 5 [matrix]  #> Degree heterogeneity (theta): 100 [numeric]  #> Block propensities (alpha): 5 [numeric]  #>  #> Factor model parameterization: #>  #> X: 100 x 5 [dgeMatrix]  #> S: 5 x 5 [dgeMatrix]  #>  #> Poisson edges: TRUE  #> Allow self loops: TRUE  #>  #> Expected edges: 50 #> Expected degree: 0.5 #> Expected density: 0.01  # sometimes you gotta let the world burn and # sample a wildly dense graph  dense_lazy_mmsbm <- mmsbm(n = 500, k = 3, expected_density = 0.8) #> Generating random degree heterogeneity parameters `theta` from a LogNormal(2, 1) distribution. This distribution may change in the future. Explicitly set `theta` for reproducible results. #> Generating random mixing matrix `B` with independent Uniform(0, 1) entries. This distribution may change in the future. Explicitly set `B` for reproducible results. dense_lazy_mmsbm #> Undirected Degree-Corrected Mixed Membership Stochastic Blockmodel #> ------------------------------------------------------------------ #>  #> Nodes (n): 500 (arranged by block) #> Blocks (k): 3 #>  #> Traditional MMSBM parameterization: #>  #> Block memberships portions (Z): 500 x 3 [matrix]  #> Degree heterogeneity (theta): 500 [numeric]  #> Block propensities (alpha): 3 [numeric]  #>  #> Factor model parameterization: #>  #> X: 500 x 3 [dgeMatrix]  #> S: 3 x 3 [dgeMatrix]  #>  #> Poisson edges: TRUE  #> Allow self loops: TRUE  #>  #> Expected edges: 99800 #> Expected degree: 199.6 #> Expected density: 0.8  # explicitly setting the degree heterogeneity parameter, # mixing matrix, and relative community sizes rather # than using randomly generated defaults  k <- 5 n <- 100 B <- matrix(stats::runif(k * k), nrow = k, ncol = k)  theta <- round(stats::rlnorm(n, 2))  alpha <- c(1, 2, 4, 1, 1)  custom_mmsbm <- mmsbm(   theta = theta,   B = B,   alpha = alpha,   expected_degree = 50 )  custom_mmsbm #> Undirected Degree-Corrected Mixed Membership Stochastic Blockmodel #> ------------------------------------------------------------------ #>  #> Nodes (n): 100 (arranged by block) #> Blocks (k): 5 #>  #> Traditional MMSBM parameterization: #>  #> Block memberships portions (Z): 100 x 5 [matrix]  #> Degree heterogeneity (theta): 100 [numeric]  #> Block propensities (alpha): 5 [numeric]  #>  #> Factor model parameterization: #>  #> X: 100 x 5 [dgeMatrix]  #> S: 5 x 5 [dgeMatrix]  #>  #> Poisson edges: TRUE  #> Allow self loops: TRUE  #>  #> Expected edges: 5000 #> Expected degree: 50 #> Expected density: 1.0101  edgelist <- sample_edgelist(custom_mmsbm) edgelist #> # A tibble: 5,043 √ó 2 #>     from    to #>    <int> <int> #>  1    10    11 #>  2     3    10 #>  3     1     1 #>  4     2    33 #>  5    13    20 #>  6     2    35 #>  7     3    14 #>  8     1    39 #>  9     1     2 #> 10     3    16 #> # ‚Ñπ 5,033 more rows  # efficient eigendecompostion that leverages low-rank structure in # E(A) so that you don't have to form E(A) to find eigenvectors, # as E(A) is typically dense. computation is # handled via RSpectra  population_eigs <- eigs_sym(custom_mmsbm) svds(custom_mmsbm)$d #> [1] 124.6072910   6.1422714   1.1009983   0.4416063   0.2927190"},{"path":"https://rohelab.github.io/fastRG/dev/reference/overlapping_sbm.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an undirected overlapping degree corrected stochastic blockmodel object ‚Äî overlapping_sbm","title":"Create an undirected overlapping degree corrected stochastic blockmodel object ‚Äî overlapping_sbm","text":"specify overlapping stochastic blockmodel, must specify number nodes (via n), mixing matrix (via k B),  block probabilities (optional, via pi). provide defaults options enable rapid exploration, can invest effort control model parameters. strongly recommend setting expected_degree expected_density argument avoid large memory allocations associated sampling large, dense graphs.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/overlapping_sbm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an undirected overlapping degree corrected stochastic blockmodel object ‚Äî overlapping_sbm","text":"","code":"overlapping_sbm(   n,   k = NULL,   B = NULL,   ...,   pi = rep(1/k, k),   sort_nodes = TRUE,   force_pure = TRUE,   poisson_edges = TRUE,   allow_self_loops = TRUE )"},{"path":"https://rohelab.github.io/fastRG/dev/reference/overlapping_sbm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an undirected overlapping degree corrected stochastic blockmodel object ‚Äî overlapping_sbm","text":"n number nodes overlapping SBM. k (mixing matrix) number blocks blockmodel. Use want specify mixing-matrix hand. k specified, B set diagonal dominant matrix value 0.8 along diagonal 0.1 / (k - 1) -diagonal. k defaults NULL. must specify either k B, . B (mixing matrix) k k matrix block connection probabilities. probability node block connects node community j Poisson(B[, j]). Must invertible, symmetric square matrix. matrix Matrix objects acceptable. B symmetric, symmetrized via update B := B + t(B). Defaults NULL. must specify either k B, . ... Arguments passed undirected_factor_model expected_degree specified, desired expected degree graph. Specifying expected_degree simply rescales S achieve . Defaults NULL. specify expected_degree expected_density time. expected_density specified, desired expected density graph. Specifying expected_density simply rescales S achieve . Defaults NULL. specify expected_degree expected_density time. pi (block probabilities) Probability membership block. Membership block independent overlapping SBM. Defaults rep(1 / k, k). sort_nodes Logical indicating whether sort nodes grouped block. Useful plotting. Defaults TRUE. force_pure Logical indicating whether force presence \"pure nodes\" (nodes belong single community) sake identifiability. include pure nodes, block membership sampling first proceeds per usual. , complete, k nodes chosen randomly pure nodes, one block. Defaults TRUE. poisson_edges Logical indicating whether multiple edges allowed form pair nodes. Defaults TRUE. FALSE, sampling proceeds usual, duplicate edges removed afterwards. , FALSE, assume S specifies desired -factor connection probability, back-transform S appropriate Poisson intensity parameter approximate Bernoulli factor connection probabilities. See Section 2.3 Rohe et al. (2017) additional details. allow_self_loops Logical indicating whether nodes allowed form edges . Defaults TRUE. FALSE, sampling proceeds allowing self-loops, removed fact.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/overlapping_sbm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an undirected overlapping degree corrected stochastic blockmodel object ‚Äî overlapping_sbm","text":"undirected_overlapping_sbm S3 object, subclass undirected_factor_model() following additional fields: pi: Sampling probabilities block. sorted: Logical indicating nodes arranged block (additionally degree heterogeneity parameter) within block.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/overlapping_sbm.html","id":"generative-model","dir":"Reference","previous_headings":"","what":"Generative Model","title":"Create an undirected overlapping degree corrected stochastic blockmodel object ‚Äî overlapping_sbm","text":"two levels randomness degree-corrected overlapping stochastic blockmodel. First, node, independently determine node member block. handled overlapping_sbm(). , given block memberships, randomly sample edges nodes. second operation handled sample_edgelist(), sample_sparse(), sample_igraph() sample_tidygraph(), depending depending desired graph representation.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/overlapping_sbm.html","id":"identifiability","dir":"Reference","previous_headings":"","what":"Identifiability","title":"Create an undirected overlapping degree corrected stochastic blockmodel object ‚Äî overlapping_sbm","text":"order identifiable, overlapping SBM must satisfy two conditions: B must invertible, must least one \"pure node\" block belongs blocks.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/overlapping_sbm.html","id":"block-memberships","dir":"Reference","previous_headings":"","what":"Block memberships","title":"Create an undirected overlapping degree corrected stochastic blockmodel object ‚Äî overlapping_sbm","text":"Note nodes may belong blocks. TODO","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/overlapping_sbm.html","id":"edge-formulation","dir":"Reference","previous_headings":"","what":"Edge formulation","title":"Create an undirected overlapping degree corrected stochastic blockmodel object ‚Äî overlapping_sbm","text":"know block memberships, need one ingredient, baseline intensity connections nodes block block j. edge \\(A_{,j}\\) Poisson distributed parameter TODO","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/overlapping_sbm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create an undirected overlapping degree corrected stochastic blockmodel object ‚Äî overlapping_sbm","text":"Kaufmann, Emilie, Thomas Bonald, Marc Lelarge. \"Spectral Algorithm Additive Clustering Recovery Overlapping Communities Networks,\" Vol. 9925. Lecture Notes Computer Science. Cham: Springer International Publishing, 2016. https://doi.org/10.1007/978-3-319-46379-7. Latouche, Pierre, Etienne Birmel√©, Christophe Ambroise. \"Overlapping Stochastic Block Models Application French Political Blogosphere.\" Annals Applied Statistics 5, . 1 (March 2011): 309‚Äì36. https://doi.org/10.1214/10-AOAS382. Zhang, Yuan, Elizaveta Levina, Ji Zhu. \"Detecting Overlapping Communities Networks Using Spectral Methods.\" ArXiv:1412.3432, December 10, 2014. http://arxiv.org/abs/1412.3432.","code":""},{"path":[]},{"path":"https://rohelab.github.io/fastRG/dev/reference/overlapping_sbm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an undirected overlapping degree corrected stochastic blockmodel object ‚Äî overlapping_sbm","text":"","code":"set.seed(27)  lazy_overlapping_sbm <- overlapping_sbm(n = 1000, k = 5, expected_density = 0.01) #> Setting `B` to a matrix with value 0.8 on the diagonal and 0.1 / (k - 1) on the off-diagonal. This parameterization may change in the future. Explicitly set `B` for reproducible results. lazy_overlapping_sbm #> Undirected Degree-Corrected Overlapping Blockmodel #> ------------------------------------------------- #>  #> Nodes (n): 1000 (sorted) #> Blocks (k): 5 #>  #> Traditional Overlapping SBM parameterization: #>  #> Block memberships (Z): 1000 x 5 [dgCMatrix]  #> Block probabilities (pi): 5 [numeric]  #>  #> Block connection propensities (B): 5 x 5 [matrix]  #>  #> Factor model parameterization: #>  #> X: 1000 x 5 [dgCMatrix]  #> S: 5 x 5 [dsyMatrix]  #>  #> Poisson edges: TRUE  #> Allow self loops: TRUE  #>  #> Expected edges: 4995 #> Expected degree: 5 #> Expected density: 0.01  # sometimes you gotta let the world burn and # sample a wildly dense graph  dense_lazy_overlapping_sbm <- overlapping_sbm(n = 500, k = 3, expected_density = 0.8) #> Setting `B` to a matrix with value 0.8 on the diagonal and 0.1 / (k - 1) on the off-diagonal. This parameterization may change in the future. Explicitly set `B` for reproducible results. dense_lazy_overlapping_sbm #> Undirected Degree-Corrected Overlapping Blockmodel #> ------------------------------------------------- #>  #> Nodes (n): 500 (sorted) #> Blocks (k): 3 #>  #> Traditional Overlapping SBM parameterization: #>  #> Block memberships (Z): 500 x 3 [dgCMatrix]  #> Block probabilities (pi): 3 [numeric]  #>  #> Block connection propensities (B): 3 x 3 [matrix]  #>  #> Factor model parameterization: #>  #> X: 500 x 3 [dgCMatrix]  #> S: 3 x 3 [dsyMatrix]  #>  #> Poisson edges: TRUE  #> Allow self loops: TRUE  #>  #> Expected edges: 99800 #> Expected degree: 199.6 #> Expected density: 0.8  k <- 5 n <- 1000 B <- matrix(stats::runif(k * k), nrow = k, ncol = k)  pi <- c(1, 2, 4, 1, 1) / 5  custom_overlapping_sbm <- overlapping_sbm(   n = 200,   B = B,   pi = pi,   expected_degree = 5 )  custom_overlapping_sbm #> Undirected Degree-Corrected Overlapping Blockmodel #> ------------------------------------------------- #>  #> Nodes (n): 200 (sorted) #> Blocks (k): 5 #>  #> Traditional Overlapping SBM parameterization: #>  #> Block memberships (Z): 200 x 5 [dgCMatrix]  #> Block probabilities (pi): 5 [numeric]  #>  #> Block connection propensities (B): 5 x 5 [matrix]  #>  #> Factor model parameterization: #>  #> X: 200 x 5 [dgCMatrix]  #> S: 5 x 5 [dgeMatrix]  #>  #> Poisson edges: TRUE  #> Allow self loops: TRUE  #>  #> Expected edges: 1000 #> Expected degree: 5 #> Expected density: 0.05025  edgelist <- sample_edgelist(custom_overlapping_sbm) edgelist #> # A tibble: 1,026 √ó 2 #>     from    to #>    <int> <int> #>  1     3    33 #>  2     2     8 #>  3     1     1 #>  4    28    39 #>  5    26    33 #>  6    10    19 #>  7    19    32 #>  8    21    24 #>  9    25    41 #> 10    23    33 #> # ‚Ñπ 1,016 more rows  # efficient eigendecompostion that leverages low-rank structure in # E(A) so that you don't have to form E(A) to find eigenvectors, # as E(A) is typically dense. computation is # handled via RSpectra  population_eigs <- eigs_sym(custom_overlapping_sbm)"},{"path":"https://rohelab.github.io/fastRG/dev/reference/planted_partition.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an undirected planted partition object ‚Äî planted_partition","title":"Create an undirected planted partition object ‚Äî planted_partition","text":"specify planted partition model, must specify number nodes (via n), mixing matrix (optional, either via within_block/between_block /b), relative block probabilites (optional, via pi). provide defaults options enable rapid exploration, can invest effort control model parameters. strongly recommend setting expected_degree expected_density argument avoid large memory allocations associated sampling large, dense graphs.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/planted_partition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an undirected planted partition object ‚Äî planted_partition","text":"","code":"planted_partition(   n,   k,   ...,   within_block = NULL,   between_block = NULL,   a = NULL,   b = NULL,   pi = rep(1/k, k),   sort_nodes = TRUE,   poisson_edges = TRUE,   allow_self_loops = TRUE )"},{"path":"https://rohelab.github.io/fastRG/dev/reference/planted_partition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an undirected planted partition object ‚Äî planted_partition","text":"n number nodes network. Must positive integer. argument required. k Number planted partitions, positive integer. argument required. ... Arguments passed undirected_factor_model expected_degree specified, desired expected degree graph. Specifying expected_degree simply rescales S achieve . Defaults NULL. specify expected_degree expected_density time. expected_density specified, desired expected density graph. Specifying expected_density simply rescales S achieve . Defaults NULL. specify expected_degree expected_density time. within_block Probability within block edges. Must strictly zero one. Must specify either within_block between_block, b determine edge probabilities. between_block Probability block edges. Must strictly zero one. Must specify either within_block between_block, b determine edge probabilities. Integer /n probability edges within block. Useful sparse graphs. Must specify either within_block between_block, b determine edge probabilities. b Integer b/n probability edges blocks. Useful sparse graphs. Must specify either within_block between_block, b determine edge probabilities. pi (relative block probabilities) Relative block probabilities. Must positive, need sum one, normalized internally. Must match dimensions B k. Defaults rep(1 / k, k), balanced blocks. sort_nodes Logical indicating whether sort nodes grouped block theta. Useful plotting. Defaults TRUE. TRUE, nodes first sorted block membership, degree-correction parameters within block. Additionally, pi sorted increasing order, columns B matrix permuted match new order pi. poisson_edges Logical indicating whether multiple edges allowed form pair nodes. Defaults TRUE. FALSE, sampling proceeds usual, duplicate edges removed afterwards. , FALSE, assume S specifies desired -factor connection probability, back-transform S appropriate Poisson intensity parameter approximate Bernoulli factor connection probabilities. See Section 2.3 Rohe et al. (2017) additional details. allow_self_loops Logical indicating whether nodes allowed form edges . Defaults TRUE. FALSE, sampling proceeds allowing self-loops, removed fact.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/planted_partition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an undirected planted partition object ‚Äî planted_partition","text":"undirected_planted_partition S3 object, subclass sbm() object, additional fields: within_block: probability edge formation within block. between_block: probability edge formation two distinct blocks.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/planted_partition.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an undirected planted partition object ‚Äî planted_partition","text":"planted partition model stochastic blockmodel diagonal -diagonal mixing matrix B constant. means edge probabilities depend whether two nodes belong block, different blocks, particular blocks impact apart .","code":""},{"path":[]},{"path":"https://rohelab.github.io/fastRG/dev/reference/planted_partition.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an undirected planted partition object ‚Äî planted_partition","text":"","code":"set.seed(27)  lazy_pp <- planted_partition(   n = 100,   k = 5,   expected_density = 0.01,   within_block = 0.1,   between_block = 0.01 )  lazy_pp #> Undirected Stochastic Blockmodel #> -------------------------------- #>  #> Nodes (n): 100 (arranged by block) #> Blocks (k): 5 #>  #> Traditional SBM parameterization: #>  #> Block memberships (z): 100 [factor]  #> Block probabilities (pi): 5 [numeric]  #> Factor model parameterization: #>  #> X: 100 x 5 [dgCMatrix]  #> S: 5 x 5 [dsyMatrix]  #>  #> Poisson edges: TRUE  #> Allow self loops: TRUE  #>  #> Expected edges: 50 #> Expected degree: 0.5 #> Expected density: 0.01"},{"path":"https://rohelab.github.io/fastRG/dev/reference/plot_expectation.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot (expected) adjacency matrices ‚Äî plot_expectation","title":"Plot (expected) adjacency matrices ‚Äî plot_expectation","text":"Plot (expected) adjacency matrices","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/plot_expectation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot (expected) adjacency matrices ‚Äî plot_expectation","text":"","code":"plot_expectation(model)  plot_dense_matrix(A, ...)  plot_sparse_matrix(A)"},{"path":"https://rohelab.github.io/fastRG/dev/reference/plot_expectation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot (expected) adjacency matrices ‚Äî plot_expectation","text":"model directed_factor_model() undirected_factor_model() object. matrix(), Matrix::Matrix() Matrix::sparseMatrix() object. ... Unused.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/plot_expectation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot (expected) adjacency matrices ‚Äî plot_expectation","text":"ggplot2::ggplot2() plot.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/plot_expectation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot (expected) adjacency matrices ‚Äî plot_expectation","text":"","code":"set.seed(27)  model <- dcsbm(n = 10, k = 2, expected_density = 0.2) #> Generating random degree heterogeneity parameters `theta` from a LogNormal(2, 1) distribution. This distribution may change in the future. Explicitly set `theta` for reproducible results. #> Generating random mixing matrix `B` with independent Uniform(0, 1) entries. This distribution may change in the future. Explicitly set `B` for reproducible results.  plot_expectation(model)   A <- sample_sparse(model)  plot_sparse_matrix(A)"},{"path":"https://rohelab.github.io/fastRG/dev/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages ‚Äî reexports","title":"Objects exported from other packages ‚Äî reexports","text":"objects imported packages. Follow links see documentation. RSpectra eigs_sym, svds","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/sample_edgelist.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample a random edgelist from a random dot product graph ‚Äî sample_edgelist","title":"Sample a random edgelist from a random dot product graph ‚Äî sample_edgelist","text":"two steps using fastRG package. First, must parameterize random dot product graph sampling latent factors. Use functions dcsbm(), sbm(), etc, perform specification. , use sample_*() functions generate random graph preferred format.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/sample_edgelist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample a random edgelist from a random dot product graph ‚Äî sample_edgelist","text":"","code":"sample_edgelist(factor_model, ...)  # S3 method for class 'undirected_factor_model' sample_edgelist(factor_model, ...)  # S3 method for class 'directed_factor_model' sample_edgelist(factor_model, ...)"},{"path":"https://rohelab.github.io/fastRG/dev/reference/sample_edgelist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample a random edgelist from a random dot product graph ‚Äî sample_edgelist","text":"factor_model directed_factor_model() undirected_factor_model(). ... Ignored. use.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/sample_edgelist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample a random edgelist from a random dot product graph ‚Äî sample_edgelist","text":"single realization random Poisson (Bernoulli) Dot Product Graph, represented tibble::tibble() two integer columns, . NOTE: Indices isolated nodes appear edgelist! can lead issues construct network objects edgelist directly. undirected case, encode information edge direction, always <= convenience edge identification. avoid handling considerations , recommend using sample_sparse(), sample_igraph(), sample_tidygraph() sample_edgelist().","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/sample_edgelist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample a random edgelist from a random dot product graph ‚Äî sample_edgelist","text":"function implements fastRG algorithm described Rohe et al (2017). Please see paper (short open access!!) details.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/sample_edgelist.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Sample a random edgelist from a random dot product graph ‚Äî sample_edgelist","text":"Rohe, Karl, Jun Tao, Xintian Han, Norbert Binkiewicz. 2017. \"Note Quickly Sampling Sparse Matrix Low Rank Expectation.\" Journal Machine Learning Research; 19(77):1-13, 2018. https://www.jmlr.org/papers/v19/17-128.html","code":""},{"path":[]},{"path":"https://rohelab.github.io/fastRG/dev/reference/sample_edgelist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample a random edgelist from a random dot product graph ‚Äî sample_edgelist","text":"","code":"library(igraph) #>  #> Attaching package: ‚Äòigraph‚Äô #> The following objects are masked from ‚Äòpackage:fastRG‚Äô: #>  #>     chung_lu, sbm #> The following objects are masked from ‚Äòpackage:stats‚Äô: #>  #>     decompose, spectrum #> The following object is masked from ‚Äòpackage:base‚Äô: #>  #>     union library(tidygraph) #>  #> Attaching package: ‚Äòtidygraph‚Äô #> The following object is masked from ‚Äòpackage:igraph‚Äô: #>  #>     groups #> The following object is masked from ‚Äòpackage:stats‚Äô: #>  #>     filter  set.seed(27)  ##### undirected examples ----------------------------  n <- 100 k <- 5  X <- matrix(rpois(n = n * k, 1), nrow = n) S <- matrix(runif(n = k * k, 0, .1), nrow = k)  # S will be symmetrized internal here, or left unchanged if # it is already symmetric  ufm <- undirected_factor_model(   X, S,   expected_density = 0.1 )  ufm #> Undirected Factor Model #> ----------------------- #>  #> Nodes (n): 100 #> Rank (k): 5 #>  #> X: 100 x 5 [dgeMatrix]  #> S: 5 x 5 [dgeMatrix]  #>  #> Poisson edges: TRUE  #> Allow self loops: TRUE  #>  #> Expected edges: 495 #> Expected degree: 5 #> Expected density: 0.1  ### sampling graphs as edgelists ----------------------  edgelist <- sample_edgelist(ufm) edgelist #> # A tibble: 500 √ó 2 #>     from    to #>    <int> <int> #>  1    66    71 #>  2    85    87 #>  3    37    54 #>  4    70    92 #>  5    14    44 #>  6    66    85 #>  7    76    83 #>  8    57    87 #>  9    57    95 #> 10    22    94 #> # ‚Ñπ 490 more rows  ### sampling graphs as sparse matrices ----------------  A <- sample_sparse(ufm)  inherits(A, \"dsCMatrix\") #> [1] TRUE isSymmetric(A) #> [1] TRUE dim(A) #> [1] 100 100  B <- sample_sparse(ufm)  inherits(B, \"dsCMatrix\") #> [1] TRUE isSymmetric(B) #> [1] TRUE dim(B) #> [1] 100 100  ### sampling graphs as igraph graphs ------------------  sample_igraph(ufm) #> IGRAPH 531b8c4 UN-- 100 486 --  #> + attr: name (v/c) #> + edges from 531b8c4 (vertex names): #>  [1] 65--87  84--100 12--87  13--95  3 --92  25--94  54--98  16--22  1 --66  #> [10] 13--94  65--79  12--66  79--94  55--56  30--64  13--22  22--40  37--80  #> [19] 88--95  11--22  85--94  52--94  11--37  12--16  19--75  47--74  63--97  #> [28] 12--61  11--73  2 --71  25--28  61--70  88--98  44--71  61--97  46--56  #> [37] 14--85  36--65  14--17  20--71  12--12  57--85  59--71  46--90  30--38  #> [46] 17--55  59--98  15--47  37--62  49--85  65--98  37--98  22--33  56--77  #> [55] 25--51  20--80  16--57  25--71  52--64  12--47  8 --80  18--79  22--62  #> [64] 14--31  37--69  16--54  26--90  38--94  20--79  70--97  19--90  11--71  #> + ... omitted several edges  ### sampling graphs as tidygraph graphs ---------------  sample_tidygraph(ufm) #> # A tbl_graph: 100 nodes and 501 edges #> # #> # An undirected multigraph with 1 component #> # #> # Node Data: 100 √ó 1 (active) #>    name  #>    <chr> #>  1 1     #>  2 2     #>  3 3     #>  4 4     #>  5 5     #>  6 6     #>  7 7     #>  8 8     #>  9 9     #> 10 10    #> # ‚Ñπ 90 more rows #> # #> # Edge Data: 501 √ó 2 #>    from    to #>   <int> <int> #> 1    54    94 #> 2    56    94 #> 3    16    22 #> # ‚Ñπ 498 more rows  ##### directed examples ----------------------------  n2 <- 100  k1 <- 5 k2 <- 3  d <- 50  X <- matrix(rpois(n = n2 * k1, 1), nrow = n2) S <- matrix(runif(n = k1 * k2, 0, .1), nrow = k1, ncol = k2) Y <- matrix(rexp(n = k2 * d, 1), nrow = d)  fm <- directed_factor_model(X, S, Y, expected_in_degree = 2) fm #> Directed Factor Model #> --------------------- #>  #> Incoming Nodes (n): 100 #> Incoming Rank (k1): 5 #> Outgoing Rank (k2): 3 #> Outgoing Nodes (d): 50 #>  #> X: 100 x 5 [dgeMatrix]  #> S: 5 x 3 [dgeMatrix]  #> Y: 50 x 3 [dgeMatrix]  #>  #> Poisson edges: TRUE  #> Allow self loops: TRUE  #>  #> Expected edges: 100 #> Expected density: 0.02 #> Expected in degree: 2 #> Expected out degree: 1  ### sampling graphs as edgelists ----------------------  edgelist2 <- sample_edgelist(fm) edgelist2 #> # A tibble: 105 √ó 2 #>     from    to #>    <int> <int> #>  1    84    34 #>  2    80    16 #>  3    42    30 #>  4    42    31 #>  5    47    26 #>  6     7    31 #>  7    39    14 #>  8    14    11 #>  9    49    47 #> 10    54    28 #> # ‚Ñπ 95 more rows  ### sampling graphs as sparse matrices ----------------  A2 <- sample_sparse(fm)  inherits(A2, \"dgCMatrix\") #> [1] TRUE isSymmetric(A2) #> [1] FALSE dim(A2) #> [1] 100  50  B2 <- sample_sparse(fm)  inherits(B2, \"dgCMatrix\") #> [1] TRUE isSymmetric(B2) #> [1] FALSE dim(B2) #> [1] 100  50  ### sampling graphs as igraph graphs ------------------  # since the number of rows and the number of columns # in `fm` differ, we will get a bipartite igraph here  # creating the bipartite igraph is slow relative to other # sampling -- if this is a blocker for # you please open an issue and we can investigate speedups  dig <- sample_igraph(fm) is_bipartite(dig) #> [1] TRUE  ### sampling graphs as tidygraph graphs ---------------  sample_tidygraph(fm) #> # A tbl_graph: 150 nodes and 105 edges #> # #> # A bipartite multigraph with 59 components #> # #> # Node Data: 150 √ó 1 (active) #>    type  #>    <lgl> #>  1 FALSE #>  2 FALSE #>  3 FALSE #>  4 FALSE #>  5 FALSE #>  6 FALSE #>  7 FALSE #>  8 FALSE #>  9 FALSE #> 10 FALSE #> # ‚Ñπ 140 more rows #> # #> # Edge Data: 105 √ó 2 #>    from    to #>   <int> <int> #> 1    55   101 #> 2    61   101 #> 3    89   101 #> # ‚Ñπ 102 more rows"},{"path":"https://rohelab.github.io/fastRG/dev/reference/sample_edgelist.matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Low level interface to sample RPDG edgelists ‚Äî sample_edgelist.matrix","title":"Low level interface to sample RPDG edgelists ‚Äî sample_edgelist.matrix","text":"breaks-, safety checks interface. strongly recommend call sample_edgelist.matrix() unless know , even , still recommend , bypass typical input validation. extremely loud coughing bypass input validation suffer foolishly hand. extremely loud coughing","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/sample_edgelist.matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Low level interface to sample RPDG edgelists ‚Äî sample_edgelist.matrix","text":"","code":"# S3 method for class 'matrix' sample_edgelist(   factor_model,   S,   Y,   directed,   poisson_edges,   allow_self_loops,   ... )  # S3 method for class 'Matrix' sample_edgelist(   factor_model,   S,   Y,   directed,   poisson_edges,   allow_self_loops,   ... )"},{"path":"https://rohelab.github.io/fastRG/dev/reference/sample_edgelist.matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Low level interface to sample RPDG edgelists ‚Äî sample_edgelist.matrix","text":"factor_model n k1 matrix() Matrix::Matrix() latent node positions encoding incoming edge community membership. X matrix Rohe et al (2017). Naming differs consistency S3 generic. S k1 k2 mixing matrix() Matrix::Matrix(). undirect case assumed symmetric check case. Y d k2 matrix() Matrix::Matrix() latent node positions encoding outgoing edge community membership. directed Logical indicating whether graph directed. directed = FALSE, symmetrizes S internally. Y = X together symmetric S implies symmetric expectation (although necessarily undirected graph). directed = FALSE, samples directed graph symmetric expectation, adds edges symmetry achieved. poisson_edges Whether remove duplicate edges sampling. See Section 2.3 Rohe et al. (2017) additional details. Defaults TRUE. allow_self_loops Logical indicating whether nodes allowed form edges . Defaults TRUE. FALSE, sampling proceeds allowing self-loops, removed fact. ... Ignored, generic consistency .","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/sample_edgelist.matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Low level interface to sample RPDG edgelists ‚Äî sample_edgelist.matrix","text":"single realization random Poisson (Bernoulli) Dot Product Graph, represented tibble::tibble() two integer columns, . NOTE: Indices isolated nodes appear edgelist! can lead issues construct network objects edgelist directly. undirected case, encode information edge direction, always <= convenience edge identification. avoid handling considerations , recommend using sample_sparse(), sample_igraph(), sample_tidygraph() sample_edgelist().","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/sample_edgelist.matrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Low level interface to sample RPDG edgelists ‚Äî sample_edgelist.matrix","text":"function implements fastRG algorithm described Rohe et al (2017). Please see paper (short open access!!) details.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/sample_edgelist.matrix.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Low level interface to sample RPDG edgelists ‚Äî sample_edgelist.matrix","text":"Rohe, Karl, Jun Tao, Xintian Han, Norbert Binkiewicz. 2017. \"Note Quickly Sampling Sparse Matrix Low Rank Expectation.\" Journal Machine Learning Research; 19(77):1-13, 2018. https://www.jmlr.org/papers/v19/17-128.html","code":""},{"path":[]},{"path":"https://rohelab.github.io/fastRG/dev/reference/sample_edgelist.matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Low level interface to sample RPDG edgelists ‚Äî sample_edgelist.matrix","text":"","code":"set.seed(46)  n <- 10000 d <- 1000  k1 <- 5 k2 <- 3  X <- matrix(rpois(n = n * k1, 1), nrow = n) S <- matrix(runif(n = k1 * k2, 0, .1), nrow = k1) Y <- matrix(rpois(n = d * k2, 1), nrow = d)  sample_edgelist(X, S, Y, TRUE, TRUE, TRUE) #> # A tibble: 8,089,734 √ó 2 #>     from    to #>    <int> <int> #>  1  2325   310 #>  2   531   962 #>  3    83   779 #>  4  2894   294 #>  5  5454   157 #>  6  7379   677 #>  7  9789   178 #>  8  3077   750 #>  9  7587   992 #> 10  1929   387 #> # ‚Ñπ 8,089,724 more rows"},{"path":"https://rohelab.github.io/fastRG/dev/reference/sample_igraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample a random dot product graph as an igraph graph ‚Äî sample_igraph","title":"Sample a random dot product graph as an igraph graph ‚Äî sample_igraph","text":"two steps using fastRG package. First, must parameterize random dot product graph sampling latent factors. Use functions dcsbm(), sbm(), etc, perform specification. , use sample_*() functions generate random graph preferred format.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/sample_igraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample a random dot product graph as an igraph graph ‚Äî sample_igraph","text":"","code":"sample_igraph(factor_model, ...)  # S3 method for class 'undirected_factor_model' sample_igraph(factor_model, ...)  # S3 method for class 'directed_factor_model' sample_igraph(factor_model, ...)"},{"path":"https://rohelab.github.io/fastRG/dev/reference/sample_igraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample a random dot product graph as an igraph graph ‚Äî sample_igraph","text":"factor_model directed_factor_model() undirected_factor_model(). ... Ignored. use.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/sample_igraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample a random dot product graph as an igraph graph ‚Äî sample_igraph","text":"igraph::igraph() object possibly multigraph (, take multiple edges rather weighted edges). factor_model undirected:   factor_model directed square:   factor_model directed rectangular:   Note working bipartite graphs igraph complex working one-mode graphs.","code":"- the graph is undirected and one-mode. - the graph is directed and one-mode. - the graph is undirected and bipartite."},{"path":"https://rohelab.github.io/fastRG/dev/reference/sample_igraph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample a random dot product graph as an igraph graph ‚Äî sample_igraph","text":"function implements fastRG algorithm described Rohe et al (2017). Please see paper (short open access!!) details.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/sample_igraph.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Sample a random dot product graph as an igraph graph ‚Äî sample_igraph","text":"Rohe, Karl, Jun Tao, Xintian Han, Norbert Binkiewicz. 2017. \"Note Quickly Sampling Sparse Matrix Low Rank Expectation.\" Journal Machine Learning Research; 19(77):1-13, 2018. https://www.jmlr.org/papers/v19/17-128.html","code":""},{"path":[]},{"path":"https://rohelab.github.io/fastRG/dev/reference/sample_igraph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample a random dot product graph as an igraph graph ‚Äî sample_igraph","text":"","code":"library(igraph) library(tidygraph)  set.seed(27)  ##### undirected examples ----------------------------  n <- 100 k <- 5  X <- matrix(rpois(n = n * k, 1), nrow = n) S <- matrix(runif(n = k * k, 0, .1), nrow = k)  # S will be symmetrized internal here, or left unchanged if # it is already symmetric  ufm <- undirected_factor_model(   X, S,   expected_density = 0.1 )  ufm #> Undirected Factor Model #> ----------------------- #>  #> Nodes (n): 100 #> Rank (k): 5 #>  #> X: 100 x 5 [dgeMatrix]  #> S: 5 x 5 [dgeMatrix]  #>  #> Poisson edges: TRUE  #> Allow self loops: TRUE  #>  #> Expected edges: 495 #> Expected degree: 5 #> Expected density: 0.1  ### sampling graphs as edgelists ----------------------  edgelist <- sample_edgelist(ufm) edgelist #> # A tibble: 500 √ó 2 #>     from    to #>    <int> <int> #>  1    66    71 #>  2    85    87 #>  3    37    54 #>  4    70    92 #>  5    14    44 #>  6    66    85 #>  7    76    83 #>  8    57    87 #>  9    57    95 #> 10    22    94 #> # ‚Ñπ 490 more rows  ### sampling graphs as sparse matrices ----------------  A <- sample_sparse(ufm)  inherits(A, \"dsCMatrix\") #> [1] TRUE isSymmetric(A) #> [1] TRUE dim(A) #> [1] 100 100  B <- sample_sparse(ufm)  inherits(B, \"dsCMatrix\") #> [1] TRUE isSymmetric(B) #> [1] TRUE dim(B) #> [1] 100 100  ### sampling graphs as igraph graphs ------------------  sample_igraph(ufm) #> IGRAPH 7526722 UN-- 100 486 --  #> + attr: name (v/c) #> + edges from 7526722 (vertex names): #>  [1] 65--87  84--100 12--87  13--95  3 --92  25--94  54--98  16--22  1 --66  #> [10] 13--94  65--79  12--66  79--94  55--56  30--64  13--22  22--40  37--80  #> [19] 88--95  11--22  85--94  52--94  11--37  12--16  19--75  47--74  63--97  #> [28] 12--61  11--73  2 --71  25--28  61--70  88--98  44--71  61--97  46--56  #> [37] 14--85  36--65  14--17  20--71  12--12  57--85  59--71  46--90  30--38  #> [46] 17--55  59--98  15--47  37--62  49--85  65--98  37--98  22--33  56--77  #> [55] 25--51  20--80  16--57  25--71  52--64  12--47  8 --80  18--79  22--62  #> [64] 14--31  37--69  16--54  26--90  38--94  20--79  70--97  19--90  11--71  #> + ... omitted several edges  ### sampling graphs as tidygraph graphs ---------------  sample_tidygraph(ufm) #> # A tbl_graph: 100 nodes and 501 edges #> # #> # An undirected multigraph with 1 component #> # #> # Node Data: 100 √ó 1 (active) #>    name  #>    <chr> #>  1 1     #>  2 2     #>  3 3     #>  4 4     #>  5 5     #>  6 6     #>  7 7     #>  8 8     #>  9 9     #> 10 10    #> # ‚Ñπ 90 more rows #> # #> # Edge Data: 501 √ó 2 #>    from    to #>   <int> <int> #> 1    54    94 #> 2    56    94 #> 3    16    22 #> # ‚Ñπ 498 more rows  ##### directed examples ----------------------------  n2 <- 100  k1 <- 5 k2 <- 3  d <- 50  X <- matrix(rpois(n = n2 * k1, 1), nrow = n2) S <- matrix(runif(n = k1 * k2, 0, .1), nrow = k1, ncol = k2) Y <- matrix(rexp(n = k2 * d, 1), nrow = d)  fm <- directed_factor_model(X, S, Y, expected_in_degree = 2) fm #> Directed Factor Model #> --------------------- #>  #> Incoming Nodes (n): 100 #> Incoming Rank (k1): 5 #> Outgoing Rank (k2): 3 #> Outgoing Nodes (d): 50 #>  #> X: 100 x 5 [dgeMatrix]  #> S: 5 x 3 [dgeMatrix]  #> Y: 50 x 3 [dgeMatrix]  #>  #> Poisson edges: TRUE  #> Allow self loops: TRUE  #>  #> Expected edges: 100 #> Expected density: 0.02 #> Expected in degree: 2 #> Expected out degree: 1  ### sampling graphs as edgelists ----------------------  edgelist2 <- sample_edgelist(fm) edgelist2 #> # A tibble: 105 √ó 2 #>     from    to #>    <int> <int> #>  1    84    34 #>  2    80    16 #>  3    42    30 #>  4    42    31 #>  5    47    26 #>  6     7    31 #>  7    39    14 #>  8    14    11 #>  9    49    47 #> 10    54    28 #> # ‚Ñπ 95 more rows  ### sampling graphs as sparse matrices ----------------  A2 <- sample_sparse(fm)  inherits(A2, \"dgCMatrix\") #> [1] TRUE isSymmetric(A2) #> [1] FALSE dim(A2) #> [1] 100  50  B2 <- sample_sparse(fm)  inherits(B2, \"dgCMatrix\") #> [1] TRUE isSymmetric(B2) #> [1] FALSE dim(B2) #> [1] 100  50  ### sampling graphs as igraph graphs ------------------  # since the number of rows and the number of columns # in `fm` differ, we will get a bipartite igraph here  # creating the bipartite igraph is slow relative to other # sampling -- if this is a blocker for # you please open an issue and we can investigate speedups  dig <- sample_igraph(fm) is_bipartite(dig) #> [1] TRUE  ### sampling graphs as tidygraph graphs ---------------  sample_tidygraph(fm) #> # A tbl_graph: 150 nodes and 105 edges #> # #> # A bipartite multigraph with 59 components #> # #> # Node Data: 150 √ó 1 (active) #>    type  #>    <lgl> #>  1 FALSE #>  2 FALSE #>  3 FALSE #>  4 FALSE #>  5 FALSE #>  6 FALSE #>  7 FALSE #>  8 FALSE #>  9 FALSE #> 10 FALSE #> # ‚Ñπ 140 more rows #> # #> # Edge Data: 105 √ó 2 #>    from    to #>   <int> <int> #> 1    55   101 #> 2    61   101 #> 3    89   101 #> # ‚Ñπ 102 more rows"},{"path":"https://rohelab.github.io/fastRG/dev/reference/sample_sparse.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample a random dot product graph as a sparse Matrix ‚Äî sample_sparse","title":"Sample a random dot product graph as a sparse Matrix ‚Äî sample_sparse","text":"two steps using fastRG package. First, must parameterize random dot product graph sampling latent factors. Use functions dcsbm(), sbm(), etc, perform specification. , use sample_*() functions generate random graph preferred format.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/sample_sparse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample a random dot product graph as a sparse Matrix ‚Äî sample_sparse","text":"","code":"sample_sparse(factor_model, ...)  # S3 method for class 'undirected_factor_model' sample_sparse(factor_model, ...)  # S3 method for class 'directed_factor_model' sample_sparse(factor_model, ...)"},{"path":"https://rohelab.github.io/fastRG/dev/reference/sample_sparse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample a random dot product graph as a sparse Matrix ‚Äî sample_sparse","text":"factor_model directed_factor_model() undirected_factor_model(). ... Ignored. use.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/sample_sparse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample a random dot product graph as a sparse Matrix ‚Äî sample_sparse","text":"undirected factor models, sparse Matrix::Matrix() class dsCMatrix. particular, means Matrix object (1) double data type, (2) symmetric, (3) column compressed storage format. directed factor models, sparse Matrix::Matrix() class dgCMatrix. means Matrix object (1) double data type, (2) symmetric, (3) column compressed storage format. reiterate: undirected graphs, get symmetric matrix. directed graphs, get general sparse matrix.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/sample_sparse.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample a random dot product graph as a sparse Matrix ‚Äî sample_sparse","text":"function implements fastRG algorithm described Rohe et al (2017). Please see paper (short open access!!) details.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/sample_sparse.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Sample a random dot product graph as a sparse Matrix ‚Äî sample_sparse","text":"Rohe, Karl, Jun Tao, Xintian Han, Norbert Binkiewicz. 2017. \"Note Quickly Sampling Sparse Matrix Low Rank Expectation.\" Journal Machine Learning Research; 19(77):1-13, 2018. https://www.jmlr.org/papers/v19/17-128.html","code":""},{"path":[]},{"path":"https://rohelab.github.io/fastRG/dev/reference/sample_sparse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample a random dot product graph as a sparse Matrix ‚Äî sample_sparse","text":"","code":"library(igraph) library(tidygraph)  set.seed(27)  ##### undirected examples ----------------------------  n <- 100 k <- 5  X <- matrix(rpois(n = n * k, 1), nrow = n) S <- matrix(runif(n = k * k, 0, .1), nrow = k)  # S will be symmetrized internal here, or left unchanged if # it is already symmetric  ufm <- undirected_factor_model(   X, S,   expected_density = 0.1 )  ufm #> Undirected Factor Model #> ----------------------- #>  #> Nodes (n): 100 #> Rank (k): 5 #>  #> X: 100 x 5 [dgeMatrix]  #> S: 5 x 5 [dgeMatrix]  #>  #> Poisson edges: TRUE  #> Allow self loops: TRUE  #>  #> Expected edges: 495 #> Expected degree: 5 #> Expected density: 0.1  ### sampling graphs as edgelists ----------------------  edgelist <- sample_edgelist(ufm) edgelist #> # A tibble: 500 √ó 2 #>     from    to #>    <int> <int> #>  1    66    71 #>  2    85    87 #>  3    37    54 #>  4    70    92 #>  5    14    44 #>  6    66    85 #>  7    76    83 #>  8    57    87 #>  9    57    95 #> 10    22    94 #> # ‚Ñπ 490 more rows  ### sampling graphs as sparse matrices ----------------  A <- sample_sparse(ufm)  inherits(A, \"dsCMatrix\") #> [1] TRUE isSymmetric(A) #> [1] TRUE dim(A) #> [1] 100 100  B <- sample_sparse(ufm)  inherits(B, \"dsCMatrix\") #> [1] TRUE isSymmetric(B) #> [1] TRUE dim(B) #> [1] 100 100  ### sampling graphs as igraph graphs ------------------  sample_igraph(ufm) #> IGRAPH 096ecbe UN-- 100 486 --  #> + attr: name (v/c) #> + edges from 096ecbe (vertex names): #>  [1] 65--87  84--100 12--87  13--95  3 --92  25--94  54--98  16--22  1 --66  #> [10] 13--94  65--79  12--66  79--94  55--56  30--64  13--22  22--40  37--80  #> [19] 88--95  11--22  85--94  52--94  11--37  12--16  19--75  47--74  63--97  #> [28] 12--61  11--73  2 --71  25--28  61--70  88--98  44--71  61--97  46--56  #> [37] 14--85  36--65  14--17  20--71  12--12  57--85  59--71  46--90  30--38  #> [46] 17--55  59--98  15--47  37--62  49--85  65--98  37--98  22--33  56--77  #> [55] 25--51  20--80  16--57  25--71  52--64  12--47  8 --80  18--79  22--62  #> [64] 14--31  37--69  16--54  26--90  38--94  20--79  70--97  19--90  11--71  #> + ... omitted several edges  ### sampling graphs as tidygraph graphs ---------------  sample_tidygraph(ufm) #> # A tbl_graph: 100 nodes and 501 edges #> # #> # An undirected multigraph with 1 component #> # #> # Node Data: 100 √ó 1 (active) #>    name  #>    <chr> #>  1 1     #>  2 2     #>  3 3     #>  4 4     #>  5 5     #>  6 6     #>  7 7     #>  8 8     #>  9 9     #> 10 10    #> # ‚Ñπ 90 more rows #> # #> # Edge Data: 501 √ó 2 #>    from    to #>   <int> <int> #> 1    54    94 #> 2    56    94 #> 3    16    22 #> # ‚Ñπ 498 more rows  ##### directed examples ----------------------------  n2 <- 100  k1 <- 5 k2 <- 3  d <- 50  X <- matrix(rpois(n = n2 * k1, 1), nrow = n2) S <- matrix(runif(n = k1 * k2, 0, .1), nrow = k1, ncol = k2) Y <- matrix(rexp(n = k2 * d, 1), nrow = d)  fm <- directed_factor_model(X, S, Y, expected_in_degree = 2) fm #> Directed Factor Model #> --------------------- #>  #> Incoming Nodes (n): 100 #> Incoming Rank (k1): 5 #> Outgoing Rank (k2): 3 #> Outgoing Nodes (d): 50 #>  #> X: 100 x 5 [dgeMatrix]  #> S: 5 x 3 [dgeMatrix]  #> Y: 50 x 3 [dgeMatrix]  #>  #> Poisson edges: TRUE  #> Allow self loops: TRUE  #>  #> Expected edges: 100 #> Expected density: 0.02 #> Expected in degree: 2 #> Expected out degree: 1  ### sampling graphs as edgelists ----------------------  edgelist2 <- sample_edgelist(fm) edgelist2 #> # A tibble: 105 √ó 2 #>     from    to #>    <int> <int> #>  1    84    34 #>  2    80    16 #>  3    42    30 #>  4    42    31 #>  5    47    26 #>  6     7    31 #>  7    39    14 #>  8    14    11 #>  9    49    47 #> 10    54    28 #> # ‚Ñπ 95 more rows  ### sampling graphs as sparse matrices ----------------  A2 <- sample_sparse(fm)  inherits(A2, \"dgCMatrix\") #> [1] TRUE isSymmetric(A2) #> [1] FALSE dim(A2) #> [1] 100  50  B2 <- sample_sparse(fm)  inherits(B2, \"dgCMatrix\") #> [1] TRUE isSymmetric(B2) #> [1] FALSE dim(B2) #> [1] 100  50  ### sampling graphs as igraph graphs ------------------  # since the number of rows and the number of columns # in `fm` differ, we will get a bipartite igraph here  # creating the bipartite igraph is slow relative to other # sampling -- if this is a blocker for # you please open an issue and we can investigate speedups  dig <- sample_igraph(fm) is_bipartite(dig) #> [1] TRUE  ### sampling graphs as tidygraph graphs ---------------  sample_tidygraph(fm) #> # A tbl_graph: 150 nodes and 105 edges #> # #> # A bipartite multigraph with 59 components #> # #> # Node Data: 150 √ó 1 (active) #>    type  #>    <lgl> #>  1 FALSE #>  2 FALSE #>  3 FALSE #>  4 FALSE #>  5 FALSE #>  6 FALSE #>  7 FALSE #>  8 FALSE #>  9 FALSE #> 10 FALSE #> # ‚Ñπ 140 more rows #> # #> # Edge Data: 105 √ó 2 #>    from    to #>   <int> <int> #> 1    55   101 #> 2    61   101 #> 3    89   101 #> # ‚Ñπ 102 more rows"},{"path":"https://rohelab.github.io/fastRG/dev/reference/sample_tidygraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample a random dot product graph as a tidygraph graph ‚Äî sample_tidygraph","title":"Sample a random dot product graph as a tidygraph graph ‚Äî sample_tidygraph","text":"two steps using fastRG package. First, must parameterize random dot product graph sampling latent factors. Use functions dcsbm(), sbm(), etc, perform specification. , use sample_*() functions generate random graph preferred format.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/sample_tidygraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample a random dot product graph as a tidygraph graph ‚Äî sample_tidygraph","text":"","code":"sample_tidygraph(factor_model, ...)  # S3 method for class 'undirected_factor_model' sample_tidygraph(factor_model, ...)  # S3 method for class 'directed_factor_model' sample_tidygraph(factor_model, ...)"},{"path":"https://rohelab.github.io/fastRG/dev/reference/sample_tidygraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample a random dot product graph as a tidygraph graph ‚Äî sample_tidygraph","text":"factor_model directed_factor_model() undirected_factor_model(). ... Ignored. use.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/sample_tidygraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample a random dot product graph as a tidygraph graph ‚Äî sample_tidygraph","text":"tidygraph::tbl_graph() object possibly multigraph (, take multiple edges rather weighted edges). factor_model undirected:   factor_model directed square:   factor_model directed rectangular:   Note working bipartite graphs tidygraph complex working one-mode graphs.","code":"- the graph is undirected and one-mode. - the graph is directed and one-mode. - the graph is undirected and bipartite."},{"path":"https://rohelab.github.io/fastRG/dev/reference/sample_tidygraph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample a random dot product graph as a tidygraph graph ‚Äî sample_tidygraph","text":"function implements fastRG algorithm described Rohe et al (2017). Please see paper (short open access!!) details.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/sample_tidygraph.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Sample a random dot product graph as a tidygraph graph ‚Äî sample_tidygraph","text":"Rohe, Karl, Jun Tao, Xintian Han, Norbert Binkiewicz. 2017. \"Note Quickly Sampling Sparse Matrix Low Rank Expectation.\" Journal Machine Learning Research; 19(77):1-13, 2018. https://www.jmlr.org/papers/v19/17-128.html","code":""},{"path":[]},{"path":"https://rohelab.github.io/fastRG/dev/reference/sample_tidygraph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample a random dot product graph as a tidygraph graph ‚Äî sample_tidygraph","text":"","code":"library(igraph) library(tidygraph)  set.seed(27)  ##### undirected examples ----------------------------  n <- 100 k <- 5  X <- matrix(rpois(n = n * k, 1), nrow = n) S <- matrix(runif(n = k * k, 0, .1), nrow = k)  # S will be symmetrized internal here, or left unchanged if # it is already symmetric  ufm <- undirected_factor_model(   X, S,   expected_density = 0.1 )  ufm #> Undirected Factor Model #> ----------------------- #>  #> Nodes (n): 100 #> Rank (k): 5 #>  #> X: 100 x 5 [dgeMatrix]  #> S: 5 x 5 [dgeMatrix]  #>  #> Poisson edges: TRUE  #> Allow self loops: TRUE  #>  #> Expected edges: 495 #> Expected degree: 5 #> Expected density: 0.1  ### sampling graphs as edgelists ----------------------  edgelist <- sample_edgelist(ufm) edgelist #> # A tibble: 500 √ó 2 #>     from    to #>    <int> <int> #>  1    66    71 #>  2    85    87 #>  3    37    54 #>  4    70    92 #>  5    14    44 #>  6    66    85 #>  7    76    83 #>  8    57    87 #>  9    57    95 #> 10    22    94 #> # ‚Ñπ 490 more rows  ### sampling graphs as sparse matrices ----------------  A <- sample_sparse(ufm)  inherits(A, \"dsCMatrix\") #> [1] TRUE isSymmetric(A) #> [1] TRUE dim(A) #> [1] 100 100  B <- sample_sparse(ufm)  inherits(B, \"dsCMatrix\") #> [1] TRUE isSymmetric(B) #> [1] TRUE dim(B) #> [1] 100 100  ### sampling graphs as igraph graphs ------------------  sample_igraph(ufm) #> IGRAPH 86da585 UN-- 100 486 --  #> + attr: name (v/c) #> + edges from 86da585 (vertex names): #>  [1] 65--87  84--100 12--87  13--95  3 --92  25--94  54--98  16--22  1 --66  #> [10] 13--94  65--79  12--66  79--94  55--56  30--64  13--22  22--40  37--80  #> [19] 88--95  11--22  85--94  52--94  11--37  12--16  19--75  47--74  63--97  #> [28] 12--61  11--73  2 --71  25--28  61--70  88--98  44--71  61--97  46--56  #> [37] 14--85  36--65  14--17  20--71  12--12  57--85  59--71  46--90  30--38  #> [46] 17--55  59--98  15--47  37--62  49--85  65--98  37--98  22--33  56--77  #> [55] 25--51  20--80  16--57  25--71  52--64  12--47  8 --80  18--79  22--62  #> [64] 14--31  37--69  16--54  26--90  38--94  20--79  70--97  19--90  11--71  #> + ... omitted several edges  ### sampling graphs as tidygraph graphs ---------------  sample_tidygraph(ufm) #> # A tbl_graph: 100 nodes and 501 edges #> # #> # An undirected multigraph with 1 component #> # #> # Node Data: 100 √ó 1 (active) #>    name  #>    <chr> #>  1 1     #>  2 2     #>  3 3     #>  4 4     #>  5 5     #>  6 6     #>  7 7     #>  8 8     #>  9 9     #> 10 10    #> # ‚Ñπ 90 more rows #> # #> # Edge Data: 501 √ó 2 #>    from    to #>   <int> <int> #> 1    54    94 #> 2    56    94 #> 3    16    22 #> # ‚Ñπ 498 more rows  ##### directed examples ----------------------------  n2 <- 100  k1 <- 5 k2 <- 3  d <- 50  X <- matrix(rpois(n = n2 * k1, 1), nrow = n2) S <- matrix(runif(n = k1 * k2, 0, .1), nrow = k1, ncol = k2) Y <- matrix(rexp(n = k2 * d, 1), nrow = d)  fm <- directed_factor_model(X, S, Y, expected_in_degree = 2) fm #> Directed Factor Model #> --------------------- #>  #> Incoming Nodes (n): 100 #> Incoming Rank (k1): 5 #> Outgoing Rank (k2): 3 #> Outgoing Nodes (d): 50 #>  #> X: 100 x 5 [dgeMatrix]  #> S: 5 x 3 [dgeMatrix]  #> Y: 50 x 3 [dgeMatrix]  #>  #> Poisson edges: TRUE  #> Allow self loops: TRUE  #>  #> Expected edges: 100 #> Expected density: 0.02 #> Expected in degree: 2 #> Expected out degree: 1  ### sampling graphs as edgelists ----------------------  edgelist2 <- sample_edgelist(fm) edgelist2 #> # A tibble: 105 √ó 2 #>     from    to #>    <int> <int> #>  1    84    34 #>  2    80    16 #>  3    42    30 #>  4    42    31 #>  5    47    26 #>  6     7    31 #>  7    39    14 #>  8    14    11 #>  9    49    47 #> 10    54    28 #> # ‚Ñπ 95 more rows  ### sampling graphs as sparse matrices ----------------  A2 <- sample_sparse(fm)  inherits(A2, \"dgCMatrix\") #> [1] TRUE isSymmetric(A2) #> [1] FALSE dim(A2) #> [1] 100  50  B2 <- sample_sparse(fm)  inherits(B2, \"dgCMatrix\") #> [1] TRUE isSymmetric(B2) #> [1] FALSE dim(B2) #> [1] 100  50  ### sampling graphs as igraph graphs ------------------  # since the number of rows and the number of columns # in `fm` differ, we will get a bipartite igraph here  # creating the bipartite igraph is slow relative to other # sampling -- if this is a blocker for # you please open an issue and we can investigate speedups  dig <- sample_igraph(fm) is_bipartite(dig) #> [1] TRUE  ### sampling graphs as tidygraph graphs ---------------  sample_tidygraph(fm) #> # A tbl_graph: 150 nodes and 105 edges #> # #> # A bipartite multigraph with 59 components #> # #> # Node Data: 150 √ó 1 (active) #>    type  #>    <lgl> #>  1 FALSE #>  2 FALSE #>  3 FALSE #>  4 FALSE #>  5 FALSE #>  6 FALSE #>  7 FALSE #>  8 FALSE #>  9 FALSE #> 10 FALSE #> # ‚Ñπ 140 more rows #> # #> # Edge Data: 105 √ó 2 #>    from    to #>   <int> <int> #> 1    55   101 #> 2    61   101 #> 3    89   101 #> # ‚Ñπ 102 more rows"},{"path":"https://rohelab.github.io/fastRG/dev/reference/sbm.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an undirected stochastic blockmodel object ‚Äî sbm","title":"Create an undirected stochastic blockmodel object ‚Äî sbm","text":"specify stochastic blockmodel, must specify number nodes (via n), mixing matrix (via k B), relative block probabilites (optional, via pi). provide defaults options enable rapid exploration, can invest effort control model parameters. strongly recommend setting expected_degree expected_density argument avoid large memory allocations associated sampling large, dense graphs.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/sbm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an undirected stochastic blockmodel object ‚Äî sbm","text":"","code":"sbm(   n,   k = NULL,   B = NULL,   ...,   pi = rep(1/k, k),   sort_nodes = TRUE,   poisson_edges = TRUE,   allow_self_loops = TRUE )"},{"path":"https://rohelab.github.io/fastRG/dev/reference/sbm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an undirected stochastic blockmodel object ‚Äî sbm","text":"n number nodes network. Must positive integer. argument required. k (mixing matrix) number blocks blockmodel. Use want specify mixing-matrix hand. k specified, elements B drawn randomly Uniform(0, 1) distribution. subject change, may reproducible. k defaults NULL. must specify either k B, . B (mixing matrix) k k matrix block connection probabilities. probability node block connects node community j Poisson(B[, j]). Must square matrix. matrix Matrix objects acceptable. B symmetric, symmetrized via update B := B + t(B). Defaults NULL. must specify either k B, . ... Arguments passed undirected_factor_model expected_degree specified, desired expected degree graph. Specifying expected_degree simply rescales S achieve . Defaults NULL. specify expected_degree expected_density time. expected_density specified, desired expected density graph. Specifying expected_density simply rescales S achieve . Defaults NULL. specify expected_degree expected_density time. pi (relative block probabilities) Relative block probabilities. Must positive, need sum one, normalized internally. Must match dimensions B k. Defaults rep(1 / k, k), balanced blocks. sort_nodes Logical indicating whether sort nodes grouped block theta. Useful plotting. Defaults TRUE. TRUE, nodes first sorted block membership, degree-correction parameters within block. Additionally, pi sorted increasing order, columns B matrix permuted match new order pi. poisson_edges Logical indicating whether multiple edges allowed form pair nodes. Defaults TRUE. FALSE, sampling proceeds usual, duplicate edges removed afterwards. , FALSE, assume S specifies desired -factor connection probability, back-transform S appropriate Poisson intensity parameter approximate Bernoulli factor connection probabilities. See Section 2.3 Rohe et al. (2017) additional details. allow_self_loops Logical indicating whether nodes allowed form edges . Defaults TRUE. FALSE, sampling proceeds allowing self-loops, removed fact.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/sbm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an undirected stochastic blockmodel object ‚Äî sbm","text":"undirected_sbm S3 object, subclass dcsbm() object.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/sbm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an undirected stochastic blockmodel object ‚Äî sbm","text":"stochastic block equivalent degree-corrected stochastic blockmodel degree heterogeneity parameters set equal 1.","code":""},{"path":[]},{"path":"https://rohelab.github.io/fastRG/dev/reference/sbm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an undirected stochastic blockmodel object ‚Äî sbm","text":"","code":"set.seed(27)  lazy_sbm <- sbm(n = 100, k = 5, expected_density = 0.01) lazy_sbm #> $fun #> function (n, pref.matrix, block.sizes, directed = FALSE, loops = FALSE)  #> { #>     n <- as.numeric(n) #>     pref.matrix[] <- as.numeric(pref.matrix) #>     block.sizes <- as.numeric(block.sizes) #>     directed <- as.logical(directed) #>     loops <- as.logical(loops) #>     on.exit(.Call(R_igraph_finalizer)) #>     res <- .Call(R_igraph_sbm_game, n, pref.matrix, block.sizes,  #>         directed, loops) #>     if (igraph_opt(\"add.params\")) { #>         res$name <- \"Stochastic block model\" #>         res$loops <- loops #>     } #>     res #> } #> <bytecode: 0x55c52d0dee88> #> <environment: namespace:igraph> #>  #> $args #> <list_of<quosure>> #>  #> $n #> <quosure> #> expr: ^100 #> env:  empty #>  #> $k #> <quosure> #> expr: ^5 #> env:  empty #>  #> $expected_density #> <quosure> #> expr: ^0.01 #> env:  empty #>  #>  #> $lazy #> [1] FALSE #>  #> attr(,\"class\") #> [1] \"igraph_constructor_spec\"  # by default we get a multigraph (i.e. multiple edges are # allowed between the same two nodes). using bernoulli edges # will with an adjacency matrix with only zeroes and ones  bernoulli_sbm <- sbm(   n = 500,   k = 30,   poisson_edges = FALSE,   expected_degree = 8 )  bernoulli_sbm #> $fun #> function (n, pref.matrix, block.sizes, directed = FALSE, loops = FALSE)  #> { #>     n <- as.numeric(n) #>     pref.matrix[] <- as.numeric(pref.matrix) #>     block.sizes <- as.numeric(block.sizes) #>     directed <- as.logical(directed) #>     loops <- as.logical(loops) #>     on.exit(.Call(R_igraph_finalizer)) #>     res <- .Call(R_igraph_sbm_game, n, pref.matrix, block.sizes,  #>         directed, loops) #>     if (igraph_opt(\"add.params\")) { #>         res$name <- \"Stochastic block model\" #>         res$loops <- loops #>     } #>     res #> } #> <bytecode: 0x55c52d0dee88> #> <environment: namespace:igraph> #>  #> $args #> <list_of<quosure>> #>  #> $n #> <quosure> #> expr: ^500 #> env:  empty #>  #> $k #> <quosure> #> expr: ^30 #> env:  empty #>  #> $poisson_edges #> <quosure> #> expr: ^FALSE #> env:  empty #>  #> $expected_degree #> <quosure> #> expr: ^8 #> env:  empty #>  #>  #> $lazy #> [1] FALSE #>  #> attr(,\"class\") #> [1] \"igraph_constructor_spec\"  edgelist <- sample_edgelist(bernoulli_sbm) #> Error in UseMethod(\"sample_edgelist\"): no applicable method for 'sample_edgelist' applied to an object of class \"igraph_constructor_spec\" edgelist #> Error: object 'edgelist' not found  A <- sample_sparse(bernoulli_sbm) #> Error in UseMethod(\"sample_sparse\"): no applicable method for 'sample_sparse' applied to an object of class \"igraph_constructor_spec\"  # only zeroes and ones! sign(A) #> Error: object 'A' not found"},{"path":"https://rohelab.github.io/fastRG/dev/reference/svds.directed_factor_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the singular value decomposition of the expected adjacency matrix of a directed factor model ‚Äî svds.directed_factor_model","title":"Compute the singular value decomposition of the expected adjacency matrix of a directed factor model ‚Äî svds.directed_factor_model","text":"Compute singular value decomposition expected adjacency matrix directed factor model","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/svds.directed_factor_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the singular value decomposition of the expected adjacency matrix of a directed factor model ‚Äî svds.directed_factor_model","text":"","code":"# S3 method for class 'directed_factor_model' svds(A, k = min(A$k1, A$k2), nu = k, nv = k, opts = list(), ...)"},{"path":"https://rohelab.github.io/fastRG/dev/reference/svds.directed_factor_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the singular value decomposition of the expected adjacency matrix of a directed factor model ‚Äî svds.directed_factor_model","text":"undirected_factor_model(). k Desired rank decomposition. nu Number left singular vectors computed. must 0 k. nv Number right singular vectors computed. must 0 k. opts Control parameters related computing algorithm. See Details . ... Unused, included consistency generic signature.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/svds.directed_factor_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the singular value decomposition of the expected adjacency matrix of a directed factor model ‚Äî svds.directed_factor_model","text":"opts argument list can supply following parameters: ncv Number Lanzcos basis vectors use. vectors                   result faster convergence, greater                   memory use. ncv must satisfy                   \\(k < ncv \\le p\\)                   p = min(m, n).                   Default min(p, max(2*k+1, 20)). tol Precision parameter. Default 1e-10. maxitr Maximum number iterations. Default 1000. center Either logical value (TRUE/FALSE), numeric                      vector length \\(n\\). vector \\(c\\) supplied,                      SVD computed matrix \\(- 1c'\\),                      implicit way without actually forming matrix.                      center = TRUE effect                      center = colMeans(). Default FALSE. scale Either logical value (TRUE/FALSE), numeric                     vector length \\(n\\). vector \\(s\\) supplied,                     SVD computed matrix \\((- 1c')S\\),                     \\(c\\) centering vector \\(S = diag(1/s)\\).                     scale = TRUE, vector \\(s\\) computed                     column norm \\(- 1c'\\).                     Default FALSE.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/svds.undirected_factor_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the singular value decomposition of the expected adjacency matrix of an undirected factor model ‚Äî svds.undirected_factor_model","title":"Compute the singular value decomposition of the expected adjacency matrix of an undirected factor model ‚Äî svds.undirected_factor_model","text":"Compute singular value decomposition expected adjacency matrix undirected factor model","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/svds.undirected_factor_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the singular value decomposition of the expected adjacency matrix of an undirected factor model ‚Äî svds.undirected_factor_model","text":"","code":"# S3 method for class 'undirected_factor_model' svds(A, k = A$k, nu = k, nv = k, opts = list(), ...)"},{"path":"https://rohelab.github.io/fastRG/dev/reference/svds.undirected_factor_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the singular value decomposition of the expected adjacency matrix of an undirected factor model ‚Äî svds.undirected_factor_model","text":"undirected_factor_model(). k Desired rank decomposition. nu Number left singular vectors computed. must 0 k. nv Number right singular vectors computed. must 0 k. opts Control parameters related computing algorithm. See Details . ... Unused, included consistency generic signature.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/svds.undirected_factor_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the singular value decomposition of the expected adjacency matrix of an undirected factor model ‚Äî svds.undirected_factor_model","text":"opts argument list can supply following parameters: ncv Number Lanzcos basis vectors use. vectors                   result faster convergence, greater                   memory use. ncv must satisfy                   \\(k < ncv \\le p\\)                   p = min(m, n).                   Default min(p, max(2*k+1, 20)). tol Precision parameter. Default 1e-10. maxitr Maximum number iterations. Default 1000. center Either logical value (TRUE/FALSE), numeric                      vector length \\(n\\). vector \\(c\\) supplied,                      SVD computed matrix \\(- 1c'\\),                      implicit way without actually forming matrix.                      center = TRUE effect                      center = colMeans(). Default FALSE. scale Either logical value (TRUE/FALSE), numeric                     vector length \\(n\\). vector \\(s\\) supplied,                     SVD computed matrix \\((- 1c')S\\),                     \\(c\\) centering vector \\(S = diag(1/s)\\).                     scale = TRUE, vector \\(s\\) computed                     column norm \\(- 1c'\\).                     Default FALSE.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/undirected_factor_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an undirected factor model graph ‚Äî undirected_factor_model","title":"Create an undirected factor model graph ‚Äî undirected_factor_model","text":"undirected factor model graph undirected generalized Poisson random dot product graph. edges graph assumed independent Poisson distributed. graph parameterized expected adjacency matrix, E[|X] = X S X'. recommend casual users use function, see instead dcsbm() related functions, formulate common variants stochastic blockmodels undirected factor models lots helpful input validation.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/undirected_factor_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an undirected factor model graph ‚Äî undirected_factor_model","text":"","code":"undirected_factor_model(   X,   S,   ...,   expected_degree = NULL,   expected_density = NULL,   poisson_edges = TRUE,   allow_self_loops = TRUE )"},{"path":"https://rohelab.github.io/fastRG/dev/reference/undirected_factor_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an undirected factor model graph ‚Äî undirected_factor_model","text":"X matrix() Matrix::Matrix() representing real-valued latent node positions. Entries must positive. S matrix() Matrix::Matrix() mixing matrix. S symmetrized already, undirected case. Entries must positive. ... Ignored. Must empty. expected_degree specified, desired expected degree graph. Specifying expected_degree simply rescales S achieve . Defaults NULL. specify expected_degree expected_density time. expected_density specified, desired expected density graph. Specifying expected_density simply rescales S achieve . Defaults NULL. specify expected_degree expected_density time. poisson_edges Logical indicating whether multiple edges allowed form pair nodes. Defaults TRUE. FALSE, sampling proceeds usual, duplicate edges removed afterwards. , FALSE, assume S specifies desired -factor connection probability, back-transform S appropriate Poisson intensity parameter approximate Bernoulli factor connection probabilities. See Section 2.3 Rohe et al. (2017) additional details. allow_self_loops Logical indicating whether nodes allowed form edges . Defaults TRUE. FALSE, sampling proceeds allowing self-loops, removed fact.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/undirected_factor_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an undirected factor model graph ‚Äî undirected_factor_model","text":"undirected_factor_model S3 class based list following elements: X: latent positions Matrix::Matrix() object. S: mixing matrix Matrix::Matrix() object. n: number nodes network. k: rank expectation matrix. Equivalently, dimension latent node position vectors.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/reference/undirected_factor_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an undirected factor model graph ‚Äî undirected_factor_model","text":"","code":"n <- 100 k <- 5  X <- matrix(rpois(n = n * k, 1), nrow = n) S <- matrix(runif(n = k * k, 0, .1), nrow = k)  ufm <- undirected_factor_model(X, S) ufm #> Undirected Factor Model #> ----------------------- #>  #> Nodes (n): 100 #> Rank (k): 5 #>  #> X: 100 x 5 [dgeMatrix]  #> S: 5 x 5 [dgeMatrix]  #>  #> Poisson edges: TRUE  #> Allow self loops: TRUE  #>  #> Expected edges: 12303 #> Expected degree: 123 #> Expected density: 2.48555  ufm2 <- undirected_factor_model(X, S, expected_degree = 50) ufm2 #> Undirected Factor Model #> ----------------------- #>  #> Nodes (n): 100 #> Rank (k): 5 #>  #> X: 100 x 5 [dgeMatrix]  #> S: 5 x 5 [dgeMatrix]  #>  #> Poisson edges: TRUE  #> Allow self loops: TRUE  #>  #> Expected edges: 5000 #> Expected degree: 50 #> Expected density: 1.0101  svds(ufm2) #> $d #> [1] 57.6538304  3.4381554  2.6111020  0.5400835  0.2872029 #>  #> $u #>              [,1]         [,2]         [,3]         [,4]         [,5] #>   [1,] 0.09964174  0.142445332  0.089932486  0.211623998 -0.014246759 #>   [2,] 0.06716158  0.070564578 -0.023357876 -0.081406807  0.116670736 #>   [3,] 0.08753783 -0.078955289 -0.066213634  0.032259959  0.063206581 #>   [4,] 0.06362401  0.094723163 -0.072089168 -0.037684790 -0.104541393 #>   [5,] 0.01456548  0.055720563 -0.008993179  0.063653841  0.033273751 #>   [6,] 0.03404917 -0.017191462 -0.018240288  0.096149798  0.037240632 #>   [7,] 0.15559197 -0.084998552 -0.123180159  0.032023961  0.122446281 #>   [8,] 0.10299588 -0.099842567 -0.108815461  0.177084609  0.039049296 #>   [9,] 0.08717752 -0.058553271 -0.027495608  0.075018069 -0.057208782 #>  [10,] 0.09402012 -0.093932567  0.132026456  0.004483579 -0.048703213 #>  [11,] 0.08310769  0.021811138 -0.081336277 -0.005188833 -0.100574512 #>  [12,] 0.11261124 -0.090236751  0.156387996 -0.044191272  0.012694704 #>  [13,] 0.08999448 -0.041907820  0.098671736  0.116812272 -0.076827379 #>  [14,] 0.12404364 -0.059099282  0.080431449  0.212962070 -0.039586747 #>  [15,] 0.12238627  0.086652257  0.170990200  0.024771887 -0.238228001 #>  [16,] 0.04539319  0.070625329 -0.135168735 -0.031768048 -0.045523947 #>  [17,] 0.10259138 -0.051100888 -0.090583385  0.027307124 -0.096607631 #>  [18,] 0.11349152  0.036242405 -0.171649310  0.160531548  0.028957317 #>  [19,] 0.04539319  0.070625329 -0.135168735 -0.031768048 -0.045523947 #>  [20,] 0.16166977 -0.051234150  0.093292007 -0.145529903 -0.125120440 #>  [21,] 0.08225931  0.070079318 -0.027241678  0.106175953 -0.027901912 #>  [22,] 0.09348786 -0.037726743  0.126917078 -0.119445339  0.129143186 #>  [23,] 0.11956932  0.070006806  0.044822856 -0.017022316 -0.218609404 #>  [24,] 0.11751717 -0.015782343 -0.138294590  0.048202855  0.057081483 #>  [25,] 0.11157942 -0.260097885 -0.036996645  0.076356141 -0.082548770 #>  [26,] 0.09156347 -0.130980036 -0.032858914 -0.080068734  0.091330747 #>  [27,] 0.04369643  0.167161689 -0.026979538  0.190961524  0.099821252 #>  [28,] 0.12610071 -0.176037660 -0.066475774 -0.052525612 -0.064516584 #>  [29,] 0.07537253  0.133798275 -0.207249692 -0.015825152 -0.051649045 #>  [30,] 0.09678060  0.154139543 -0.056720807 -0.022705800 -0.009869725 #>  [31,] 0.06402850  0.045981484 -0.090321245  0.112092695  0.031115534 #>  [32,] 0.05348867 -0.061763826 -0.047973346 -0.063889839  0.025965949 #>  [33,] 0.15062958  0.071973698 -0.143412179 -0.129353750  0.136511587 #>  [34,] 0.05719819 -0.121726217  0.044585349  0.059075172 -0.051083684 #>  [35,] 0.06997853  0.087210029  0.102809468 -0.039612603  0.097052139 #>  [36,] 0.06362401  0.094723163 -0.072089168 -0.037684790 -0.104541393 #>  [37,] 0.06854222 -0.033909425 -0.072343098 -0.068842674 -0.133848263 #>  [38,] 0.07176366 -0.066005654  0.035592170  0.122729014 -0.017809933 #>  [39,] 0.08575270  0.074260394  0.001003664 -0.130081658  0.178068653 #>  [40,] 0.01859112  0.003695816  0.024361540 -0.048674852  0.061397917 #>  [41,] 0.05755849 -0.142128235  0.005867323  0.016317062  0.069331679 #>  [42,] 0.14030588 -0.099915079 -0.036750928  0.053886339 -0.151658196 #>  [43,] 0.07082691  0.038941849  0.048714869 -0.150977389  0.024379539 #>  [44,] 0.14433152 -0.151939826 -0.003396208 -0.058442353 -0.123534029 #>  [45,] 0.18013312 -0.040074190  0.094312094 -0.168356189  0.249780803 #>  [46,] 0.03315660  0.059416379  0.015368361  0.014978990  0.094671668 #>  [47,] 0.08579688  0.045920733  0.021489614  0.062453936  0.193310217 #>  [48,] 0.03771450 -0.048814191  0.053832458  0.026579215 -0.055050565 #>  [49,] 0.05264029 -0.013495646  0.006121253  0.047474947  0.098638549 #>  [50,] 0.11261124 -0.090236751  0.156387996 -0.044191272  0.012694704 #>  [51,] 0.03315660  0.059416379  0.015368361  0.014978990  0.094671668 #>  [52,] 0.09852155  0.029263521 -0.144424055 -0.052899778 -0.139973361 #>  [53,] 0.06362401  0.094723163 -0.072089168 -0.037684790 -0.104541393 #>  [54,] 0.08820934  0.111307864  0.165889034 -0.045529345  0.038034693 #>  [55,] 0.13856493  0.024960943  0.050952320  0.084080317 -0.021554560 #>  [56,] 0.14514051 -0.249423185 -0.039860360  0.241112616  0.147779824 #>  [57,] 0.12525233 -0.127769480 -0.012381176  0.058839174  0.008156016 #>  [58,] 0.07033884  0.066808011  0.064091442 -0.082370713  0.217467502 #>  [59,] 0.14071037 -0.148656759 -0.054983004  0.203663824 -0.016001269 #>  [60,] 0.12273430  0.269337236 -0.162156484  0.105565789 -0.044118990 #>  [61,] 0.10528057 -0.026991293  0.012242505  0.094949893  0.197277098 #>  [62,] 0.15751636  0.008254741  0.036595834 -0.007352645  0.160258720 #>  [63,] 0.08784903  0.131709882  0.204607060 -0.002771235 -0.082380670 #>  [64,] 0.07453643 -0.021020541  0.141273564 -0.028012378 -0.052670094 #>  [65,] 0.05666593 -0.065520393  0.039475972 -0.064853746  0.126762715 #>  [66,] 0.16890458  0.067731871 -0.059846663  0.057265103  0.092735705 #>  [67,] 0.07770141  0.178309889 -0.065705775  0.094575727  0.121820320 #>  [68,] 0.06595289  0.139234777  0.069454748  0.072716090  0.068927973 #>  [69,] 0.14259057 -0.027063804  0.084307039 -0.028248376  0.006569606 #>  [70,] 0.08753783 -0.078955289 -0.066213634  0.032259959  0.063206581 #>  [71,] 0.08995029 -0.013568158  0.078185786 -0.075723322 -0.092068943 #>  [72,] 0.10487608  0.021750387  0.030474581 -0.054827591  0.061620171 #>  [73,] 0.13941331 -0.023307238 -0.003142279 -0.027284469 -0.094227160 #>  [74,] 0.08941803  0.042637665  0.073076409 -0.199652241  0.085777456 #>  [75,] 0.06997853  0.087210029  0.102809468 -0.039612603  0.097052139 #>  [76,] 0.06313593  0.122589325 -0.056712596  0.030921886  0.088546570 #>  [77,] 0.12221432  0.122456063  0.127162796 -0.141915141  0.060033761 #>  [78,] 0.07328355  0.075989318  0.213600239 -0.066425076 -0.115654421 #>  [79,] 0.04624157  0.022357149 -0.189263333 -0.143132834 -0.118196547 #>  [80,] 0.06684545  0.062626935  0.035846099  0.153886898  0.011496937 #>  [81,] 0.06764965  0.042698416 -0.038734449 -0.150013483 -0.076417227 #>  [82,] 0.10259138 -0.051100888 -0.090583385  0.027307124 -0.096607631 #>  [83,] 0.15032574 -0.139050942  0.210220454 -0.017612057 -0.042355860 #>  [84,] 0.13892524  0.004558925  0.012234294  0.041322207  0.098860803 #>  [85,] 0.10697241  0.079199874  0.234077977  0.072482832 -0.198829152 #>  [86,] 0.13570379  0.036655153 -0.095700974 -0.150249481 -0.017177527 #>  [87,] 0.07118722  0.018539831  0.009996843 -0.193735500  0.144794902 #>  [88,] 0.04821015  0.087270780 -0.009001391  0.010026155 -0.065142544 #>  [89,] 0.06890252 -0.054311443 -0.111061124 -0.111600784 -0.013432900 #>  [90,] 0.08503208  0.115064431  0.078439716 -0.044565438 -0.062762073 #>  [91,] 0.08749364 -0.050615627 -0.086699583 -0.160275636  0.047965017 #>  [92,] 0.13816044  0.073702622  0.069184396 -0.065697167 -0.157211487 #>  [93,] 0.09120316 -0.110578018  0.005859112 -0.037310624 -0.029084616 #>  [94,] 0.06720576  0.042224917 -0.002871927  0.111128788  0.131912300 #>  [95,] 0.17060134 -0.028804489 -0.168035860 -0.165464469 -0.052609495 #>  [96,] 0.11295435  0.295175755  0.153265982  0.236865141 -0.043957335 #>  [97,] 0.08993801  0.189518839 -0.216242871  0.047828689 -0.018375295 #>  [98,] 0.10666121 -0.131465296 -0.036742716  0.107514026 -0.053241901 #>  [99,] 0.03807481 -0.069216209  0.015114432 -0.016178895  0.065364798 #> [100,] 0.13252653  0.040411720 -0.183150292 -0.149285574 -0.117974293 #>  #> $v #>              [,1]         [,2]         [,3]         [,4]         [,5] #>   [1,] 0.09964174  0.142445332 -0.089932486  0.211623998  0.014246759 #>   [2,] 0.06716158  0.070564578  0.023357876 -0.081406807 -0.116670736 #>   [3,] 0.08753783 -0.078955289  0.066213634  0.032259959 -0.063206581 #>   [4,] 0.06362401  0.094723163  0.072089168 -0.037684790  0.104541393 #>   [5,] 0.01456548  0.055720563  0.008993179  0.063653841 -0.033273751 #>   [6,] 0.03404917 -0.017191462  0.018240288  0.096149798 -0.037240632 #>   [7,] 0.15559197 -0.084998552  0.123180159  0.032023961 -0.122446281 #>   [8,] 0.10299588 -0.099842567  0.108815461  0.177084609 -0.039049296 #>   [9,] 0.08717752 -0.058553271  0.027495608  0.075018069  0.057208782 #>  [10,] 0.09402012 -0.093932567 -0.132026456  0.004483579  0.048703213 #>  [11,] 0.08310769  0.021811138  0.081336277 -0.005188833  0.100574512 #>  [12,] 0.11261124 -0.090236751 -0.156387996 -0.044191272 -0.012694704 #>  [13,] 0.08999448 -0.041907820 -0.098671736  0.116812272  0.076827379 #>  [14,] 0.12404364 -0.059099282 -0.080431449  0.212962070  0.039586747 #>  [15,] 0.12238627  0.086652257 -0.170990200  0.024771887  0.238228001 #>  [16,] 0.04539319  0.070625329  0.135168735 -0.031768048  0.045523947 #>  [17,] 0.10259138 -0.051100888  0.090583385  0.027307124  0.096607631 #>  [18,] 0.11349152  0.036242405  0.171649310  0.160531548 -0.028957317 #>  [19,] 0.04539319  0.070625329  0.135168735 -0.031768048  0.045523947 #>  [20,] 0.16166977 -0.051234150 -0.093292007 -0.145529903  0.125120440 #>  [21,] 0.08225931  0.070079318  0.027241678  0.106175953  0.027901912 #>  [22,] 0.09348786 -0.037726743 -0.126917078 -0.119445339 -0.129143186 #>  [23,] 0.11956932  0.070006806 -0.044822856 -0.017022316  0.218609404 #>  [24,] 0.11751717 -0.015782343  0.138294590  0.048202855 -0.057081483 #>  [25,] 0.11157942 -0.260097885  0.036996645  0.076356141  0.082548770 #>  [26,] 0.09156347 -0.130980036  0.032858914 -0.080068734 -0.091330747 #>  [27,] 0.04369643  0.167161689  0.026979538  0.190961524 -0.099821252 #>  [28,] 0.12610071 -0.176037660  0.066475774 -0.052525612  0.064516584 #>  [29,] 0.07537253  0.133798275  0.207249692 -0.015825152  0.051649045 #>  [30,] 0.09678060  0.154139543  0.056720807 -0.022705800  0.009869725 #>  [31,] 0.06402850  0.045981484  0.090321245  0.112092695 -0.031115534 #>  [32,] 0.05348867 -0.061763826  0.047973346 -0.063889839 -0.025965949 #>  [33,] 0.15062958  0.071973698  0.143412179 -0.129353750 -0.136511587 #>  [34,] 0.05719819 -0.121726217 -0.044585349  0.059075172  0.051083684 #>  [35,] 0.06997853  0.087210029 -0.102809468 -0.039612603 -0.097052139 #>  [36,] 0.06362401  0.094723163  0.072089168 -0.037684790  0.104541393 #>  [37,] 0.06854222 -0.033909425  0.072343098 -0.068842674  0.133848263 #>  [38,] 0.07176366 -0.066005654 -0.035592170  0.122729014  0.017809933 #>  [39,] 0.08575270  0.074260394 -0.001003664 -0.130081658 -0.178068653 #>  [40,] 0.01859112  0.003695816 -0.024361540 -0.048674852 -0.061397917 #>  [41,] 0.05755849 -0.142128235 -0.005867323  0.016317062 -0.069331679 #>  [42,] 0.14030588 -0.099915079  0.036750928  0.053886339  0.151658196 #>  [43,] 0.07082691  0.038941849 -0.048714869 -0.150977389 -0.024379539 #>  [44,] 0.14433152 -0.151939826  0.003396208 -0.058442353  0.123534029 #>  [45,] 0.18013312 -0.040074190 -0.094312094 -0.168356189 -0.249780803 #>  [46,] 0.03315660  0.059416379 -0.015368361  0.014978990 -0.094671668 #>  [47,] 0.08579688  0.045920733 -0.021489614  0.062453936 -0.193310217 #>  [48,] 0.03771450 -0.048814191 -0.053832458  0.026579215  0.055050565 #>  [49,] 0.05264029 -0.013495646 -0.006121253  0.047474947 -0.098638549 #>  [50,] 0.11261124 -0.090236751 -0.156387996 -0.044191272 -0.012694704 #>  [51,] 0.03315660  0.059416379 -0.015368361  0.014978990 -0.094671668 #>  [52,] 0.09852155  0.029263521  0.144424055 -0.052899778  0.139973361 #>  [53,] 0.06362401  0.094723163  0.072089168 -0.037684790  0.104541393 #>  [54,] 0.08820934  0.111307864 -0.165889034 -0.045529345 -0.038034693 #>  [55,] 0.13856493  0.024960943 -0.050952320  0.084080317  0.021554560 #>  [56,] 0.14514051 -0.249423185  0.039860360  0.241112616 -0.147779824 #>  [57,] 0.12525233 -0.127769480  0.012381176  0.058839174 -0.008156016 #>  [58,] 0.07033884  0.066808011 -0.064091442 -0.082370713 -0.217467502 #>  [59,] 0.14071037 -0.148656759  0.054983004  0.203663824  0.016001269 #>  [60,] 0.12273430  0.269337236  0.162156484  0.105565789  0.044118990 #>  [61,] 0.10528057 -0.026991293 -0.012242505  0.094949893 -0.197277098 #>  [62,] 0.15751636  0.008254741 -0.036595834 -0.007352645 -0.160258720 #>  [63,] 0.08784903  0.131709882 -0.204607060 -0.002771235  0.082380670 #>  [64,] 0.07453643 -0.021020541 -0.141273564 -0.028012378  0.052670094 #>  [65,] 0.05666593 -0.065520393 -0.039475972 -0.064853746 -0.126762715 #>  [66,] 0.16890458  0.067731871  0.059846663  0.057265103 -0.092735705 #>  [67,] 0.07770141  0.178309889  0.065705775  0.094575727 -0.121820320 #>  [68,] 0.06595289  0.139234777 -0.069454748  0.072716090 -0.068927973 #>  [69,] 0.14259057 -0.027063804 -0.084307039 -0.028248376 -0.006569606 #>  [70,] 0.08753783 -0.078955289  0.066213634  0.032259959 -0.063206581 #>  [71,] 0.08995029 -0.013568158 -0.078185786 -0.075723322  0.092068943 #>  [72,] 0.10487608  0.021750387 -0.030474581 -0.054827591 -0.061620171 #>  [73,] 0.13941331 -0.023307238  0.003142279 -0.027284469  0.094227160 #>  [74,] 0.08941803  0.042637665 -0.073076409 -0.199652241 -0.085777456 #>  [75,] 0.06997853  0.087210029 -0.102809468 -0.039612603 -0.097052139 #>  [76,] 0.06313593  0.122589325  0.056712596  0.030921886 -0.088546570 #>  [77,] 0.12221432  0.122456063 -0.127162796 -0.141915141 -0.060033761 #>  [78,] 0.07328355  0.075989318 -0.213600239 -0.066425076  0.115654421 #>  [79,] 0.04624157  0.022357149  0.189263333 -0.143132834  0.118196547 #>  [80,] 0.06684545  0.062626935 -0.035846099  0.153886898 -0.011496937 #>  [81,] 0.06764965  0.042698416  0.038734449 -0.150013483  0.076417227 #>  [82,] 0.10259138 -0.051100888  0.090583385  0.027307124  0.096607631 #>  [83,] 0.15032574 -0.139050942 -0.210220454 -0.017612057  0.042355860 #>  [84,] 0.13892524  0.004558925 -0.012234294  0.041322207 -0.098860803 #>  [85,] 0.10697241  0.079199874 -0.234077977  0.072482832  0.198829152 #>  [86,] 0.13570379  0.036655153  0.095700974 -0.150249481  0.017177527 #>  [87,] 0.07118722  0.018539831 -0.009996843 -0.193735500 -0.144794902 #>  [88,] 0.04821015  0.087270780  0.009001391  0.010026155  0.065142544 #>  [89,] 0.06890252 -0.054311443  0.111061124 -0.111600784  0.013432900 #>  [90,] 0.08503208  0.115064431 -0.078439716 -0.044565438  0.062762073 #>  [91,] 0.08749364 -0.050615627  0.086699583 -0.160275636 -0.047965017 #>  [92,] 0.13816044  0.073702622 -0.069184396 -0.065697167  0.157211487 #>  [93,] 0.09120316 -0.110578018 -0.005859112 -0.037310624  0.029084616 #>  [94,] 0.06720576  0.042224917  0.002871927  0.111128788 -0.131912300 #>  [95,] 0.17060134 -0.028804489  0.168035860 -0.165464469  0.052609495 #>  [96,] 0.11295435  0.295175755 -0.153265982  0.236865141  0.043957335 #>  [97,] 0.08993801  0.189518839  0.216242871  0.047828689  0.018375295 #>  [98,] 0.10666121 -0.131465296  0.036742716  0.107514026  0.053241901 #>  [99,] 0.03807481 -0.069216209 -0.015114432 -0.016178895 -0.065364798 #> [100,] 0.13252653  0.040411720  0.183150292 -0.149285574  0.117974293 #>  #> $niter #> [1] 1 #>  #> $nops #> [1] 45 #>"},{"path":[]},{"path":"https://rohelab.github.io/fastRG/dev/news/index.html","id":"fastrg-033","dir":"Changelog","previous_headings":"","what":"fastRG 0.3.3","title":"fastRG 0.3.3","text":"Improve cross-linking documentation packages CRAN","code":""},{"path":"https://rohelab.github.io/fastRG/dev/news/index.html","id":"fastrg-032","dir":"Changelog","previous_headings":"","what":"fastRG 0.3.2","title":"fastRG 0.3.2","text":"CRAN release: 2023-08-21 Added documentation block sorting blockmodels sort_nodes = TRUE (#35). Blocks now sorted sort_nodes = TRUE, although previously always sorted. directed stochastic blocks, flipped incoming outgoing blocks, X now contains info outgoing blocks Y now contains info incoming blocks, expected [, j] encodes edge node node j Fixed bug isolated nodes sometimes dropped igraph tidygraph objects (#35) Added plot_expectation(), plot_sparse_matrix() expectation() utilities (#34) Fixed incorrect computation expected_degrees() (#34)","code":""},{"path":"https://rohelab.github.io/fastRG/dev/news/index.html","id":"fastrg-031","dir":"Changelog","previous_headings":"","what":"fastRG 0.3.1","title":"fastRG 0.3.1","text":"CRAN release: 2022-06-30","code":""},{"path":"https://rohelab.github.io/fastRG/dev/news/index.html","id":"breaking-changes-0-3-1","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"fastRG 0.3.1","text":"Users must now pass poisson_edges allow_self_loops arguments model object constructors (.e.¬†sbm()) rather sample_*() methods. Additionally, poisson_edges = FALSE, mixing matrix S taken (degree-scaling possible symmetrization undirected models) represent desired inter-factor connection probabilities, thus zero one. Bernoulli-parameterized S transformed equivalent (approximately equivalent) Poisson S. See Section 2.3 Rohe et al.¬†(2017) additional details conversion approximation Bernoulli graphs Poisson graphs (#29).","code":""},{"path":"https://rohelab.github.io/fastRG/dev/news/index.html","id":"other-news-0-3-1","dir":"Changelog","previous_headings":"","what":"Other news","title":"fastRG 0.3.1","text":"Add overlapping stochastic blockmodel (#7, #25) Add directed degree-corrected stochastic blockmodels (#18) Allow rank 1 undirected stochastic block models Fix bug isolated nodes dropped sampled tidygraphs (#23) Allow users force model identification DC-SBMs force_identifiability = TRUE, overlapping SBMs force_pure = TRUE, now default. Improve population expected degree/density computations (#19) Let user know theta_out automatically generated directed DC-SBMs (#22) Fixed obscure pesky issue sampling models empty blocks (#13) Documented svds() eigs_sym() methods, allow users take spectral decompositions expected adjacency matrices conditional X, S Y.","code":""},{"path":"https://rohelab.github.io/fastRG/dev/news/index.html","id":"fastrg-030","dir":"Changelog","previous_headings":"","what":"fastRG 0.3.0","title":"fastRG 0.3.0","text":"CRAN release: 2021-02-26 Released CRAN","code":""},{"path":"https://rohelab.github.io/fastRG/dev/news/index.html","id":"fastrg-0209000","dir":"Changelog","previous_headings":"","what":"fastRG 0.2.0.9000","title":"fastRG 0.2.0.9000","text":"Added NEWS.md file track changes package.","code":""}]
